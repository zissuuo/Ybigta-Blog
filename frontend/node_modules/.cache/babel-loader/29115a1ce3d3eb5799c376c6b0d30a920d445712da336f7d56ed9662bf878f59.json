{"ast":null,"code":"var _jsxFileName = \"E:\\\\Documents\\\\2024-1 YBIGTA\\\\Ybigta_BLOG\\\\Ybigta-Blog\\\\frontend\\\\src\\\\components\\\\page\\\\BlogListPage.jsx\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport { useNavigate, useSearchParams } from 'react-router-dom';\nimport styled, { createGlobalStyle } from 'styled-components';\nimport { useEffect, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Wrapper = styled.div`\n    display: flex;\n    flex-direction: column;\n    padding: 40px;\n`;\n_c = Wrapper;\nconst TagContainer = styled.div`\n    display: flex;\n    flex-direction: row;\n    flex-wrap: wrap;\n    align-items: center;\n    justify-content: center;\n    //width: 600px;\n    gap: 7px;\n`;\n_c2 = TagContainer;\nconst CategoryContainer = styled.div`\n    display: flex;\n    flex-direction: row;\n    flex-wrap: wrap;\n    align-items: center;\n    justify-content: center;\n    //width: 600px;\n    gap: 7px;\n`;\n_c3 = CategoryContainer;\nconst Tags = styled.span`\n    padding-top: 3px;\n    padding-bottom: 3px;\n    padding-right: 8px;\n    padding-left: 8px;\n    background-color: #EBEBEB;\n    text-align: center;\n    font-size: 13px;\n    justify-content: center;\n    color: #666666;\n    border-radius: 5px;\n`;\n_c4 = Tags;\nconst BlogListPage = () => {\n  _s();\n  // 로딩 및 에러 표시 \n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  // 서버로부터 받은 포스트들을 저장할 상태\n  const [posts, setPosts] = useState([]);\n\n  // 태그 및 카테고리 정의\n  const [tags, setTags] = useState([]);\n  const [categories, setCategories] = useState(['ALL', 'Data Analytics TEAM', 'Data Engineering TEAM', 'Data Science TEAM']);\n  const [selectedTags, setSelectedTags] = useState([]);\n  const [selectedCategory, setSelectedCategory] = useState('');\n  const [searchParams, setSearchParams] = useSearchParams();\n\n  // 페이지 이동\n  const navigate = useNavigate();\n\n  // 초기 포스트 페이지 로딩\n  useEffect(() => {\n    fetch('http://localhost:8000/posts/').then(response => {\n      if (!response.ok) {\n        throw new Error('Failed to fetch posts');\n      }\n      return response.json();\n    }).then(data => {\n      setPosts(data);\n      setLoading(false);\n    }).catch(error => {\n      setError(error.message);\n      setLoading(false);\n    });\n  }, []);\n\n  // 게시물 로딩\n  useEffect(() => {\n    const fetchPosts = async () => {\n      setLoading(true);\n      try {\n        // 쿼리 스트링을 구성합니다.\n        let queryParams = [];\n        if (selectedTags.length > 0) {\n          const tagsQueryParam = selectedTags.map(tag => `tags=${tag}`).join('&');\n          queryParams.push(tagsQueryParam);\n        }\n        if (selectedCategory && selectedCategory !== 'ALL') {\n          queryParams.push(`cat=${selectedCategory}`);\n        }\n        const queryString = queryParams.join('&');\n        const response = await fetch(`http://localhost:8000/posts/?${queryString}`);\n        if (!response.ok) throw new Error('Failed to fetch posts');\n        const data = await response.json();\n        setPosts(data);\n      } catch (error) {\n        setError(error.message);\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchPosts();\n  }, [selectedTags, selectedCategory]);\n\n  // 글 제목 클릭 시 해당 글의 상세 페이지로 이동하는 함수\n  const handlePostClick = postId => {\n    navigate(`/posts/${postId}`);\n  };\n\n  // 태그 클릭 시 URL 업데이트\n  const handleTagChange = tag => {\n    const newSelectedTags = selectedTags.includes(tag) ? selectedTags.filter(t => t !== tag) : [...selectedTags, tag];\n    setSelectedTags(newSelectedTags);\n    updateURL(newSelectedTags, selectedCategory);\n  };\n\n  // 카테고리 클릭 시 URL 업데이트\n  const handleCategoryChange = category => {\n    setSelectedCategory(category === 'ALL' ? '' : category);\n    updateURL(selectedTags, category === 'ALL' ? '' : category);\n  };\n\n  // URL 업데이트\n  const updateURL = (tags, category) => {\n    const tagsQuery = tags.join('&');\n    setSearchParams({\n      tags: tagsQuery,\n      cat: category\n    });\n  };\n\n  // Query String\n  const buildQueryString = () => {\n    const tagsQuery = selectedTags.join('&');\n    return `tags=${tagsQuery}${selectedCategory ? `&cat=${selectedCategory}` : ''}`;\n  };\n\n  // 태그 버튼 클릭 시 해당 태그를 가진 글로 필터링하는 로직\n  // const filterPostsByTag = (tag) => {\n  //     navigate(`/tags/${encodeURIComponent(tag)}`);\n  //   };\n\n  // // 상단 태그 버튼 클릭 시 이벤트\n  // const handleTagClick = (tag, event) => {\n  //     event.stopPropagation();\n  //     filterPostsByTag(tag);\n  // };\n\n  const allTags = posts.reduce((acc, post) => [...acc, ...post.tags], []);\n  const uniqueTags = [...new Set(allTags)];\n  if (loading) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"Loading...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 161,\n    columnNumber: 25\n  }, this);\n  if (error) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [\"Error: \", error]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 162,\n    columnNumber: 23\n  }, this);\n  return /*#__PURE__*/_jsxDEV(Wrapper, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"\\uBE14\\uB85C\\uADF8 \\uBA54\\uC778/\\uB9AC\\uC2A4\\uD2B8 \\uD398\\uC774\\uC9C0\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(TagContainer, {\n      children: uniqueTags.map((tag, tagIndex) => /*#__PURE__*/_jsxDEV(Tags, {\n        style: {\n          marginRight: \"10px\",\n          cursor: 'pointer',\n          gap: \"10px\"\n        },\n        onClick: event => handleTagChange(tag, event),\n        children: [\"#\", tag]\n      }, tagIndex, true, {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 17\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(CategoryContainer, {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: categories.map((category, index) => /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handleCategoryChange(category),\n          style: {\n            margin: \"10px\"\n          },\n          children: selectedCategory === category ? `<Selected> ${category}` : category\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 181,\n          columnNumber: 17\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: posts.map((post, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        onClick: () => handlePostClick(post._id),\n        style: {\n          cursor: 'pointer'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: post.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 192,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n          children: post.outline\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 193,\n          columnNumber: 21\n        }, this), post.tags.map((tag, tagIndex) => /*#__PURE__*/_jsxDEV(Tags, {\n          style: {\n            marginRight: \"10px\",\n            cursor: 'pointer',\n            gap: \"10px\"\n          },\n          children: [\"#\", tag]\n        }, tagIndex, true, {\n          fileName: _jsxFileName,\n          lineNumber: 195,\n          columnNumber: 25\n        }, this))]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 17\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 165,\n    columnNumber: 5\n  }, this);\n};\n_s(BlogListPage, \"46qRWpAjijJiKSH0FRY+8c8d1Dc=\", false, function () {\n  return [useSearchParams, useNavigate];\n});\n_c5 = BlogListPage;\nexport default BlogListPage;\nvar _c, _c2, _c3, _c4, _c5;\n$RefreshReg$(_c, \"Wrapper\");\n$RefreshReg$(_c2, \"TagContainer\");\n$RefreshReg$(_c3, \"CategoryContainer\");\n$RefreshReg$(_c4, \"Tags\");\n$RefreshReg$(_c5, \"BlogListPage\");","map":{"version":3,"names":["React","useNavigate","useSearchParams","styled","createGlobalStyle","useEffect","useState","jsxDEV","_jsxDEV","Wrapper","div","_c","TagContainer","_c2","CategoryContainer","_c3","Tags","span","_c4","BlogListPage","_s","loading","setLoading","error","setError","posts","setPosts","tags","setTags","categories","setCategories","selectedTags","setSelectedTags","selectedCategory","setSelectedCategory","searchParams","setSearchParams","navigate","fetch","then","response","ok","Error","json","data","catch","message","fetchPosts","queryParams","length","tagsQueryParam","map","tag","join","push","queryString","handlePostClick","postId","handleTagChange","newSelectedTags","includes","filter","t","updateURL","handleCategoryChange","category","tagsQuery","cat","buildQueryString","allTags","reduce","acc","post","uniqueTags","Set","children","fileName","_jsxFileName","lineNumber","columnNumber","tagIndex","style","marginRight","cursor","gap","onClick","event","index","margin","_id","title","outline","_c5","$RefreshReg$"],"sources":["E:/Documents/2024-1 YBIGTA/Ybigta_BLOG/Ybigta-Blog/frontend/src/components/page/BlogListPage.jsx"],"sourcesContent":["import React from 'react';\r\nimport { useNavigate, useSearchParams } from 'react-router-dom';\r\nimport styled, { createGlobalStyle } from 'styled-components';\r\nimport { useEffect, useState } from 'react';\r\n\r\nconst Wrapper = styled.div`\r\n    display: flex;\r\n    flex-direction: column;\r\n    padding: 40px;\r\n`;\r\n\r\nconst TagContainer = styled.div`\r\n    display: flex;\r\n    flex-direction: row;\r\n    flex-wrap: wrap;\r\n    align-items: center;\r\n    justify-content: center;\r\n    //width: 600px;\r\n    gap: 7px;\r\n`;\r\n\r\nconst CategoryContainer = styled.div`\r\n    display: flex;\r\n    flex-direction: row;\r\n    flex-wrap: wrap;\r\n    align-items: center;\r\n    justify-content: center;\r\n    //width: 600px;\r\n    gap: 7px;\r\n`;\r\n\r\nconst Tags = styled.span`\r\n    padding-top: 3px;\r\n    padding-bottom: 3px;\r\n    padding-right: 8px;\r\n    padding-left: 8px;\r\n    background-color: #EBEBEB;\r\n    text-align: center;\r\n    font-size: 13px;\r\n    justify-content: center;\r\n    color: #666666;\r\n    border-radius: 5px;\r\n`;\r\n\r\nconst BlogListPage = () => {\r\n\r\n    // 로딩 및 에러 표시 \r\n    const [loading, setLoading] = useState(true);\r\n    const [error, setError] = useState(null);\r\n\r\n    // 서버로부터 받은 포스트들을 저장할 상태\r\n    const [posts, setPosts] = useState([]); \r\n\r\n    // 태그 및 카테고리 정의\r\n    const [tags, setTags] = useState([]);\r\n    const [categories, setCategories] = useState(['ALL', 'Data Analytics TEAM', 'Data Engineering TEAM', 'Data Science TEAM', ]);\r\n    const [selectedTags, setSelectedTags] = useState([]);\r\n    const [selectedCategory, setSelectedCategory] = useState('');\r\n\r\n    const [searchParams, setSearchParams] = useSearchParams();\r\n\r\n    // 페이지 이동\r\n    const navigate = useNavigate(); \r\n\r\n    // 초기 포스트 페이지 로딩\r\n    useEffect(() => {\r\n        \r\n        fetch('http://localhost:8000/posts/')\r\n            .then(response => {\r\n                if (!response.ok) {\r\n                    throw new Error('Failed to fetch posts');\r\n                }\r\n                return response.json();\r\n            })\r\n            .then(data => {\r\n                setPosts(data);\r\n                setLoading(false);\r\n            })\r\n            .catch(error => {\r\n                setError(error.message);\r\n                setLoading(false);\r\n            });\r\n        }, []);\r\n    \r\n  // 게시물 로딩\r\n  useEffect(() => {\r\n    const fetchPosts = async () => {\r\n      setLoading(true);\r\n      try {\r\n        // 쿼리 스트링을 구성합니다.\r\n        let queryParams = [];\r\n        if (selectedTags.length > 0) {\r\n          const tagsQueryParam = selectedTags.map(tag => `tags=${tag}`).join('&');\r\n          queryParams.push(tagsQueryParam);\r\n        }\r\n        if (selectedCategory && selectedCategory !== 'ALL') {\r\n          queryParams.push(`cat=${selectedCategory}`);\r\n        }\r\n        const queryString = queryParams.join('&');\r\n\r\n        const response = await fetch(`http://localhost:8000/posts/?${queryString}`);\r\n        if (!response.ok) throw new Error('Failed to fetch posts');\r\n        const data = await response.json();\r\n        setPosts(data);\r\n      } catch (error) {\r\n        setError(error.message);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchPosts();\r\n  }, [selectedTags, selectedCategory]);\r\n\r\n\r\n    // 글 제목 클릭 시 해당 글의 상세 페이지로 이동하는 함수\r\n    const handlePostClick = (postId) => {\r\n        navigate(`/posts/${postId}`); \r\n      };\r\n    \r\n\r\n    // 태그 클릭 시 URL 업데이트\r\n    const handleTagChange = tag => {\r\n        const newSelectedTags = selectedTags.includes(tag) ? selectedTags.filter(t => t !== tag) : [...selectedTags, tag];\r\n        setSelectedTags(newSelectedTags);\r\n        updateURL(newSelectedTags, selectedCategory);\r\n    };\r\n\r\n    // 카테고리 클릭 시 URL 업데이트\r\n    const handleCategoryChange = category => {\r\n        setSelectedCategory(category === 'ALL' ? '' : category);\r\n        updateURL(selectedTags, category === 'ALL' ? '' : category);\r\n    };\r\n\r\n    // URL 업데이트\r\n    const updateURL = (tags, category) => {\r\n        const tagsQuery = tags.join('&');\r\n        setSearchParams({ tags: tagsQuery, cat: category });\r\n    };\r\n\r\n    // Query String\r\n    const buildQueryString = () => {\r\n        const tagsQuery = selectedTags.join('&');\r\n        return `tags=${tagsQuery}${selectedCategory ? `&cat=${selectedCategory}` : ''}`;\r\n    };\r\n\r\n    // 태그 버튼 클릭 시 해당 태그를 가진 글로 필터링하는 로직\r\n    // const filterPostsByTag = (tag) => {\r\n    //     navigate(`/tags/${encodeURIComponent(tag)}`);\r\n    //   };\r\n    \r\n    // // 상단 태그 버튼 클릭 시 이벤트\r\n    // const handleTagClick = (tag, event) => {\r\n    //     event.stopPropagation();\r\n    //     filterPostsByTag(tag);\r\n    // };\r\n\r\n    const allTags = posts.reduce((acc, post) => [...acc, ...post.tags], []);\r\n    const uniqueTags = [...new Set(allTags)];\r\n\r\n    if (loading) return <div>Loading...</div>;\r\n    if (error) return <div>Error: {error}</div>;\r\n\r\n    return (\r\n    <Wrapper>\r\n        <h1>블로그 메인/리스트 페이지</h1>\r\n\r\n        {/* 태그 렌더링 */}\r\n        <TagContainer>\r\n            {uniqueTags.map((tag, tagIndex) => (\r\n                <Tags key={tagIndex} style={{marginRight: \"10px\", cursor: 'pointer', gap: \"10px\" }} onClick={(event) => handleTagChange(tag, event)}>\r\n                    #{tag}\r\n                </Tags>     \r\n            ))}\r\n        </TagContainer>\r\n\r\n        {/* 카테고리 버튼 렌더링 */}\r\n        <CategoryContainer>\r\n        <div>\r\n            {categories.map((category, index) => (\r\n                <button key={index} onClick={() => handleCategoryChange(category)} style={{margin: \"10px\"}}>\r\n                    {selectedCategory === category ? `<Selected> ${category}` : category}\r\n                </button>\r\n            ))}\r\n        </div>\r\n        </CategoryContainer>\r\n\r\n        {/* 포스트 목록 렌더링 및 포스트로 이동 */}\r\n        <div>\r\n            {posts.map((post, index) => (\r\n                <div key={index} onClick={() => handlePostClick(post._id)} style={{ cursor: 'pointer' }}>\r\n                    <h2>{post.title}</h2>\r\n                    <h4>{post.outline}</h4>\r\n                    {post.tags.map((tag, tagIndex) => (\r\n                        <Tags key={tagIndex} style={{marginRight: \"10px\", cursor: 'pointer', gap: \"10px\" }}>\r\n                            #{tag}\r\n                        </Tags>\r\n                    ))}\r\n                </div>\r\n            ))}\r\n        </div>\r\n\r\n        {/* 포스트 내용으로 이동 */}\r\n        {/* <div>\r\n            {posts.map((post, index) => (\r\n                <div key={index}>\r\n                    <h2 onClick={() => handlePostClick(post._id)} style={{ cursor: 'pointer' }}>\r\n                        {post.title}\r\n                    </h2>\r\n                    <h4>{post.outline}</h4>\r\n                    {post.tags.map((tag, tagIndex) => (\r\n                        <Tags key={tagIndex} style={{marginRight: \"10px\", cursor: 'pointer', gap: \"10px\" }} onClick={(event) => handleTagClick(tag, event)}>\r\n                            #{tag}\r\n                        </Tags>\r\n                    ))}\r\n                </div>\r\n            ))}\r\n        </div>  */}\r\n\r\n    </Wrapper>\r\n    );\r\n};\r\n\r\nexport default BlogListPage;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}