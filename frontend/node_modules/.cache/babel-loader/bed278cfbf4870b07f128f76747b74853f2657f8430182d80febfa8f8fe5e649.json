{"ast":null,"code":"/**\r\n * @typedef {import('micromark-util-types').Code} Code\r\n * @typedef {import('micromark-util-types').Construct} Construct\r\n * @typedef {import('micromark-util-types').State} State\r\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\r\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\r\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { asciiAlpha, asciiAlphanumeric, markdownLineEnding, markdownLineEndingOrSpace, markdownSpace } from 'micromark-util-character';\nimport { codes, constants, types } from 'micromark-util-symbol';\nimport { ok as assert } from 'devlop';\n\n/** @type {Construct} */\nexport const htmlText = {\n  name: 'htmlText',\n  tokenize: tokenizeHtmlText\n};\n\n/**\r\n * @this {TokenizeContext}\r\n * @type {Tokenizer}\r\n */\nfunction tokenizeHtmlText(effects, ok, nok) {\n  const self = this;\n  /** @type {NonNullable<Code> | undefined} */\n  let marker;\n  /** @type {number} */\n  let index;\n  /** @type {State} */\n  let returnState;\n  return start;\n\n  /**\r\n   * Start of HTML (text).\r\n   *\r\n   * ```markdown\r\n   * > | a <b> c\r\n   *       ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\n  function start(code) {\n    assert(code === codes.lessThan, 'expected `<`');\n    effects.enter(types.htmlText);\n    effects.enter(types.htmlTextData);\n    effects.consume(code);\n    return open;\n  }\n\n  /**\r\n   * After `<`, at tag name or other stuff.\r\n   *\r\n   * ```markdown\r\n   * > | a <b> c\r\n   *        ^\r\n   * > | a <!doctype> c\r\n   *        ^\r\n   * > | a <!--b--> c\r\n   *        ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\n  function open(code) {\n    if (code === codes.exclamationMark) {\n      effects.consume(code);\n      return declarationOpen;\n    }\n    if (code === codes.slash) {\n      effects.consume(code);\n      return tagCloseStart;\n    }\n    if (code === codes.questionMark) {\n      effects.consume(code);\n      return instruction;\n    }\n\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      effects.consume(code);\n      return tagOpen;\n    }\n    return nok(code);\n  }\n\n  /**\r\n   * After `<!`, at declaration, comment, or CDATA.\r\n   *\r\n   * ```markdown\r\n   * > | a <!doctype> c\r\n   *         ^\r\n   * > | a <!--b--> c\r\n   *         ^\r\n   * > | a <![CDATA[>&<]]> c\r\n   *         ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\n  function declarationOpen(code) {\n    if (code === codes.dash) {\n      effects.consume(code);\n      return commentOpenInside;\n    }\n    if (code === codes.leftSquareBracket) {\n      effects.consume(code);\n      index = 0;\n      return cdataOpenInside;\n    }\n    if (asciiAlpha(code)) {\n      effects.consume(code);\n      return declaration;\n    }\n    return nok(code);\n  }\n\n  /**\r\n   * In a comment, after `<!-`, at another `-`.\r\n   *\r\n   * ```markdown\r\n   * > | a <!--b--> c\r\n   *          ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\n  function commentOpenInside(code) {\n    if (code === codes.dash) {\n      effects.consume(code);\n      return commentEnd;\n    }\n    return nok(code);\n  }\n\n  /**\r\n   * In comment.\r\n   *\r\n   * ```markdown\r\n   * > | a <!--b--> c\r\n   *           ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\n  function comment(code) {\n    if (code === codes.eof) {\n      return nok(code);\n    }\n    if (code === codes.dash) {\n      effects.consume(code);\n      return commentClose;\n    }\n    if (markdownLineEnding(code)) {\n      returnState = comment;\n      return lineEndingBefore(code);\n    }\n    effects.consume(code);\n    return comment;\n  }\n\n  /**\r\n   * In comment, after `-`.\r\n   *\r\n   * ```markdown\r\n   * > | a <!--b--> c\r\n   *             ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\n  function commentClose(code) {\n    if (code === codes.dash) {\n      effects.consume(code);\n      return commentEnd;\n    }\n    return comment(code);\n  }\n\n  /**\r\n   * In comment, after `--`.\r\n   *\r\n   * ```markdown\r\n   * > | a <!--b--> c\r\n   *              ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\n  function commentEnd(code) {\n    return code === codes.greaterThan ? end(code) : code === codes.dash ? commentClose(code) : comment(code);\n  }\n\n  /**\r\n   * After `<![`, in CDATA, expecting `CDATA[`.\r\n   *\r\n   * ```markdown\r\n   * > | a <![CDATA[>&<]]> b\r\n   *          ^^^^^^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\n  function cdataOpenInside(code) {\n    const value = constants.cdataOpeningString;\n    if (code === value.charCodeAt(index++)) {\n      effects.consume(code);\n      return index === value.length ? cdata : cdataOpenInside;\n    }\n    return nok(code);\n  }\n\n  /**\r\n   * In CDATA.\r\n   *\r\n   * ```markdown\r\n   * > | a <![CDATA[>&<]]> b\r\n   *                ^^^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\n  function cdata(code) {\n    if (code === codes.eof) {\n      return nok(code);\n    }\n    if (code === codes.rightSquareBracket) {\n      effects.consume(code);\n      return cdataClose;\n    }\n    if (markdownLineEnding(code)) {\n      returnState = cdata;\n      return lineEndingBefore(code);\n    }\n    effects.consume(code);\n    return cdata;\n  }\n\n  /**\r\n   * In CDATA, after `]`, at another `]`.\r\n   *\r\n   * ```markdown\r\n   * > | a <![CDATA[>&<]]> b\r\n   *                    ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\n  function cdataClose(code) {\n    if (code === codes.rightSquareBracket) {\n      effects.consume(code);\n      return cdataEnd;\n    }\n    return cdata(code);\n  }\n\n  /**\r\n   * In CDATA, after `]]`, at `>`.\r\n   *\r\n   * ```markdown\r\n   * > | a <![CDATA[>&<]]> b\r\n   *                     ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\n  function cdataEnd(code) {\n    if (code === codes.greaterThan) {\n      return end(code);\n    }\n    if (code === codes.rightSquareBracket) {\n      effects.consume(code);\n      return cdataEnd;\n    }\n    return cdata(code);\n  }\n\n  /**\r\n   * In declaration.\r\n   *\r\n   * ```markdown\r\n   * > | a <!b> c\r\n   *          ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\n  function declaration(code) {\n    if (code === codes.eof || code === codes.greaterThan) {\n      return end(code);\n    }\n    if (markdownLineEnding(code)) {\n      returnState = declaration;\n      return lineEndingBefore(code);\n    }\n    effects.consume(code);\n    return declaration;\n  }\n\n  /**\r\n   * In instruction.\r\n   *\r\n   * ```markdown\r\n   * > | a <?b?> c\r\n   *         ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\n  function instruction(code) {\n    if (code === codes.eof) {\n      return nok(code);\n    }\n    if (code === codes.questionMark) {\n      effects.consume(code);\n      return instructionClose;\n    }\n    if (markdownLineEnding(code)) {\n      returnState = instruction;\n      return lineEndingBefore(code);\n    }\n    effects.consume(code);\n    return instruction;\n  }\n\n  /**\r\n   * In instruction, after `?`, at `>`.\r\n   *\r\n   * ```markdown\r\n   * > | a <?b?> c\r\n   *           ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\n  function instructionClose(code) {\n    return code === codes.greaterThan ? end(code) : instruction(code);\n  }\n\n  /**\r\n   * After `</`, in closing tag, at tag name.\r\n   *\r\n   * ```markdown\r\n   * > | a </b> c\r\n   *         ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\n  function tagCloseStart(code) {\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      effects.consume(code);\n      return tagClose;\n    }\n    return nok(code);\n  }\n\n  /**\r\n   * After `</x`, in a tag name.\r\n   *\r\n   * ```markdown\r\n   * > | a </b> c\r\n   *          ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\n  function tagClose(code) {\n    // ASCII alphanumerical and `-`.\n    if (code === codes.dash || asciiAlphanumeric(code)) {\n      effects.consume(code);\n      return tagClose;\n    }\n    return tagCloseBetween(code);\n  }\n\n  /**\r\n   * In closing tag, after tag name.\r\n   *\r\n   * ```markdown\r\n   * > | a </b> c\r\n   *          ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\n  function tagCloseBetween(code) {\n    if (markdownLineEnding(code)) {\n      returnState = tagCloseBetween;\n      return lineEndingBefore(code);\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return tagCloseBetween;\n    }\n    return end(code);\n  }\n\n  /**\r\n   * After `<x`, in opening tag name.\r\n   *\r\n   * ```markdown\r\n   * > | a <b> c\r\n   *         ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\n  function tagOpen(code) {\n    // ASCII alphanumerical and `-`.\n    if (code === codes.dash || asciiAlphanumeric(code)) {\n      effects.consume(code);\n      return tagOpen;\n    }\n    if (code === codes.slash || code === codes.greaterThan || markdownLineEndingOrSpace(code)) {\n      return tagOpenBetween(code);\n    }\n    return nok(code);\n  }\n\n  /**\r\n   * In opening tag, after tag name.\r\n   *\r\n   * ```markdown\r\n   * > | a <b> c\r\n   *         ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\n  function tagOpenBetween(code) {\n    if (code === codes.slash) {\n      effects.consume(code);\n      return end;\n    }\n\n    // ASCII alphabetical and `:` and `_`.\n    if (code === codes.colon || code === codes.underscore || asciiAlpha(code)) {\n      effects.consume(code);\n      return tagOpenAttributeName;\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenBetween;\n      return lineEndingBefore(code);\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return tagOpenBetween;\n    }\n    return end(code);\n  }\n\n  /**\r\n   * In attribute name.\r\n   *\r\n   * ```markdown\r\n   * > | a <b c> d\r\n   *          ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\n  function tagOpenAttributeName(code) {\n    // ASCII alphabetical and `-`, `.`, `:`, and `_`.\n    if (code === codes.dash || code === codes.dot || code === codes.colon || code === codes.underscore || asciiAlphanumeric(code)) {\n      effects.consume(code);\n      return tagOpenAttributeName;\n    }\n    return tagOpenAttributeNameAfter(code);\n  }\n\n  /**\r\n   * After attribute name, before initializer, the end of the tag, or\r\n   * whitespace.\r\n   *\r\n   * ```markdown\r\n   * > | a <b c> d\r\n   *           ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\n  function tagOpenAttributeNameAfter(code) {\n    if (code === codes.equalsTo) {\n      effects.consume(code);\n      return tagOpenAttributeValueBefore;\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeNameAfter;\n      return lineEndingBefore(code);\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return tagOpenAttributeNameAfter;\n    }\n    return tagOpenBetween(code);\n  }\n\n  /**\r\n   * Before unquoted, double quoted, or single quoted attribute value, allowing\r\n   * whitespace.\r\n   *\r\n   * ```markdown\r\n   * > | a <b c=d> e\r\n   *            ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\n  function tagOpenAttributeValueBefore(code) {\n    if (code === codes.eof || code === codes.lessThan || code === codes.equalsTo || code === codes.greaterThan || code === codes.graveAccent) {\n      return nok(code);\n    }\n    if (code === codes.quotationMark || code === codes.apostrophe) {\n      effects.consume(code);\n      marker = code;\n      return tagOpenAttributeValueQuoted;\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeValueBefore;\n      return lineEndingBefore(code);\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return tagOpenAttributeValueBefore;\n    }\n    effects.consume(code);\n    return tagOpenAttributeValueUnquoted;\n  }\n\n  /**\r\n   * In double or single quoted attribute value.\r\n   *\r\n   * ```markdown\r\n   * > | a <b c=\"d\"> e\r\n   *             ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\n  function tagOpenAttributeValueQuoted(code) {\n    if (code === marker) {\n      effects.consume(code);\n      marker = undefined;\n      return tagOpenAttributeValueQuotedAfter;\n    }\n    if (code === codes.eof) {\n      return nok(code);\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeValueQuoted;\n      return lineEndingBefore(code);\n    }\n    effects.consume(code);\n    return tagOpenAttributeValueQuoted;\n  }\n\n  /**\r\n   * In unquoted attribute value.\r\n   *\r\n   * ```markdown\r\n   * > | a <b c=d> e\r\n   *            ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\n  function tagOpenAttributeValueUnquoted(code) {\n    if (code === codes.eof || code === codes.quotationMark || code === codes.apostrophe || code === codes.lessThan || code === codes.equalsTo || code === codes.graveAccent) {\n      return nok(code);\n    }\n    if (code === codes.slash || code === codes.greaterThan || markdownLineEndingOrSpace(code)) {\n      return tagOpenBetween(code);\n    }\n    effects.consume(code);\n    return tagOpenAttributeValueUnquoted;\n  }\n\n  /**\r\n   * After double or single quoted attribute value, before whitespace or the end\r\n   * of the tag.\r\n   *\r\n   * ```markdown\r\n   * > | a <b c=\"d\"> e\r\n   *               ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\n  function tagOpenAttributeValueQuotedAfter(code) {\n    if (code === codes.slash || code === codes.greaterThan || markdownLineEndingOrSpace(code)) {\n      return tagOpenBetween(code);\n    }\n    return nok(code);\n  }\n\n  /**\r\n   * In certain circumstances of a tag where only an `>` is allowed.\r\n   *\r\n   * ```markdown\r\n   * > | a <b c=\"d\"> e\r\n   *               ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\n  function end(code) {\n    if (code === codes.greaterThan) {\n      effects.consume(code);\n      effects.exit(types.htmlTextData);\n      effects.exit(types.htmlText);\n      return ok;\n    }\n    return nok(code);\n  }\n\n  /**\r\n   * At eol.\r\n   *\r\n   * > 👉 **Note**: we can’t have blank lines in text, so no need to worry about\r\n   * > empty tokens.\r\n   *\r\n   * ```markdown\r\n   * > | a <!--a\r\n   *            ^\r\n   *   | b-->\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\n  function lineEndingBefore(code) {\n    assert(returnState, 'expected return state');\n    assert(markdownLineEnding(code), 'expected eol');\n    effects.exit(types.htmlTextData);\n    effects.enter(types.lineEnding);\n    effects.consume(code);\n    effects.exit(types.lineEnding);\n    return lineEndingAfter;\n  }\n\n  /**\r\n   * After eol, at optional whitespace.\r\n   *\r\n   * > 👉 **Note**: we can’t have blank lines in text, so no need to worry about\r\n   * > empty tokens.\r\n   *\r\n   * ```markdown\r\n   *   | a <!--a\r\n   * > | b-->\r\n   *     ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\n  function lineEndingAfter(code) {\n    // Always populated by defaults.\n    assert(self.parser.constructs.disable.null, 'expected `disable.null` to be populated');\n    return markdownSpace(code) ? factorySpace(effects, lineEndingAfterPrefix, types.linePrefix, self.parser.constructs.disable.null.includes('codeIndented') ? undefined : constants.tabSize)(code) : lineEndingAfterPrefix(code);\n  }\n\n  /**\r\n   * After eol, after optional whitespace.\r\n   *\r\n   * > 👉 **Note**: we can’t have blank lines in text, so no need to worry about\r\n   * > empty tokens.\r\n   *\r\n   * ```markdown\r\n   *   | a <!--a\r\n   * > | b-->\r\n   *     ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\n  function lineEndingAfterPrefix(code) {\n    effects.enter(types.htmlTextData);\n    return returnState(code);\n  }\n}","map":{"version":3,"names":["factorySpace","asciiAlpha","asciiAlphanumeric","markdownLineEnding","markdownLineEndingOrSpace","markdownSpace","codes","constants","types","ok","assert","htmlText","name","tokenize","tokenizeHtmlText","effects","nok","self","marker","index","returnState","start","code","lessThan","enter","htmlTextData","consume","open","exclamationMark","declarationOpen","slash","tagCloseStart","questionMark","instruction","tagOpen","dash","commentOpenInside","leftSquareBracket","cdataOpenInside","declaration","commentEnd","comment","eof","commentClose","lineEndingBefore","greaterThan","end","value","cdataOpeningString","charCodeAt","length","cdata","rightSquareBracket","cdataClose","cdataEnd","instructionClose","tagClose","tagCloseBetween","tagOpenBetween","colon","underscore","tagOpenAttributeName","dot","tagOpenAttributeNameAfter","equalsTo","tagOpenAttributeValueBefore","graveAccent","quotationMark","apostrophe","tagOpenAttributeValueQuoted","tagOpenAttributeValueUnquoted","undefined","tagOpenAttributeValueQuotedAfter","exit","lineEnding","lineEndingAfter","parser","constructs","disable","null","lineEndingAfterPrefix","linePrefix","includes","tabSize"],"sources":["C:/Users/rjalr/OneDrive/바탕 화면/ybigta/ybigta_blog_2/Ybigta-Blog/frontend/node_modules/micromark-core-commonmark/dev/lib/html-text.js"],"sourcesContent":["/**\r\n * @typedef {import('micromark-util-types').Code} Code\r\n * @typedef {import('micromark-util-types').Construct} Construct\r\n * @typedef {import('micromark-util-types').State} State\r\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\r\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\r\n */\r\n\r\nimport {factorySpace} from 'micromark-factory-space'\r\nimport {\r\n  asciiAlpha,\r\n  asciiAlphanumeric,\r\n  markdownLineEnding,\r\n  markdownLineEndingOrSpace,\r\n  markdownSpace\r\n} from 'micromark-util-character'\r\nimport {codes, constants, types} from 'micromark-util-symbol'\r\nimport {ok as assert} from 'devlop'\r\n\r\n/** @type {Construct} */\r\nexport const htmlText = {name: 'htmlText', tokenize: tokenizeHtmlText}\r\n\r\n/**\r\n * @this {TokenizeContext}\r\n * @type {Tokenizer}\r\n */\r\nfunction tokenizeHtmlText(effects, ok, nok) {\r\n  const self = this\r\n  /** @type {NonNullable<Code> | undefined} */\r\n  let marker\r\n  /** @type {number} */\r\n  let index\r\n  /** @type {State} */\r\n  let returnState\r\n\r\n  return start\r\n\r\n  /**\r\n   * Start of HTML (text).\r\n   *\r\n   * ```markdown\r\n   * > | a <b> c\r\n   *       ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function start(code) {\r\n    assert(code === codes.lessThan, 'expected `<`')\r\n    effects.enter(types.htmlText)\r\n    effects.enter(types.htmlTextData)\r\n    effects.consume(code)\r\n    return open\r\n  }\r\n\r\n  /**\r\n   * After `<`, at tag name or other stuff.\r\n   *\r\n   * ```markdown\r\n   * > | a <b> c\r\n   *        ^\r\n   * > | a <!doctype> c\r\n   *        ^\r\n   * > | a <!--b--> c\r\n   *        ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function open(code) {\r\n    if (code === codes.exclamationMark) {\r\n      effects.consume(code)\r\n      return declarationOpen\r\n    }\r\n\r\n    if (code === codes.slash) {\r\n      effects.consume(code)\r\n      return tagCloseStart\r\n    }\r\n\r\n    if (code === codes.questionMark) {\r\n      effects.consume(code)\r\n      return instruction\r\n    }\r\n\r\n    // ASCII alphabetical.\r\n    if (asciiAlpha(code)) {\r\n      effects.consume(code)\r\n      return tagOpen\r\n    }\r\n\r\n    return nok(code)\r\n  }\r\n\r\n  /**\r\n   * After `<!`, at declaration, comment, or CDATA.\r\n   *\r\n   * ```markdown\r\n   * > | a <!doctype> c\r\n   *         ^\r\n   * > | a <!--b--> c\r\n   *         ^\r\n   * > | a <![CDATA[>&<]]> c\r\n   *         ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function declarationOpen(code) {\r\n    if (code === codes.dash) {\r\n      effects.consume(code)\r\n      return commentOpenInside\r\n    }\r\n\r\n    if (code === codes.leftSquareBracket) {\r\n      effects.consume(code)\r\n      index = 0\r\n      return cdataOpenInside\r\n    }\r\n\r\n    if (asciiAlpha(code)) {\r\n      effects.consume(code)\r\n      return declaration\r\n    }\r\n\r\n    return nok(code)\r\n  }\r\n\r\n  /**\r\n   * In a comment, after `<!-`, at another `-`.\r\n   *\r\n   * ```markdown\r\n   * > | a <!--b--> c\r\n   *          ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function commentOpenInside(code) {\r\n    if (code === codes.dash) {\r\n      effects.consume(code)\r\n      return commentEnd\r\n    }\r\n\r\n    return nok(code)\r\n  }\r\n\r\n  /**\r\n   * In comment.\r\n   *\r\n   * ```markdown\r\n   * > | a <!--b--> c\r\n   *           ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function comment(code) {\r\n    if (code === codes.eof) {\r\n      return nok(code)\r\n    }\r\n\r\n    if (code === codes.dash) {\r\n      effects.consume(code)\r\n      return commentClose\r\n    }\r\n\r\n    if (markdownLineEnding(code)) {\r\n      returnState = comment\r\n      return lineEndingBefore(code)\r\n    }\r\n\r\n    effects.consume(code)\r\n    return comment\r\n  }\r\n\r\n  /**\r\n   * In comment, after `-`.\r\n   *\r\n   * ```markdown\r\n   * > | a <!--b--> c\r\n   *             ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function commentClose(code) {\r\n    if (code === codes.dash) {\r\n      effects.consume(code)\r\n      return commentEnd\r\n    }\r\n\r\n    return comment(code)\r\n  }\r\n\r\n  /**\r\n   * In comment, after `--`.\r\n   *\r\n   * ```markdown\r\n   * > | a <!--b--> c\r\n   *              ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function commentEnd(code) {\r\n    return code === codes.greaterThan\r\n      ? end(code)\r\n      : code === codes.dash\r\n      ? commentClose(code)\r\n      : comment(code)\r\n  }\r\n\r\n  /**\r\n   * After `<![`, in CDATA, expecting `CDATA[`.\r\n   *\r\n   * ```markdown\r\n   * > | a <![CDATA[>&<]]> b\r\n   *          ^^^^^^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function cdataOpenInside(code) {\r\n    const value = constants.cdataOpeningString\r\n\r\n    if (code === value.charCodeAt(index++)) {\r\n      effects.consume(code)\r\n      return index === value.length ? cdata : cdataOpenInside\r\n    }\r\n\r\n    return nok(code)\r\n  }\r\n\r\n  /**\r\n   * In CDATA.\r\n   *\r\n   * ```markdown\r\n   * > | a <![CDATA[>&<]]> b\r\n   *                ^^^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function cdata(code) {\r\n    if (code === codes.eof) {\r\n      return nok(code)\r\n    }\r\n\r\n    if (code === codes.rightSquareBracket) {\r\n      effects.consume(code)\r\n      return cdataClose\r\n    }\r\n\r\n    if (markdownLineEnding(code)) {\r\n      returnState = cdata\r\n      return lineEndingBefore(code)\r\n    }\r\n\r\n    effects.consume(code)\r\n    return cdata\r\n  }\r\n\r\n  /**\r\n   * In CDATA, after `]`, at another `]`.\r\n   *\r\n   * ```markdown\r\n   * > | a <![CDATA[>&<]]> b\r\n   *                    ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function cdataClose(code) {\r\n    if (code === codes.rightSquareBracket) {\r\n      effects.consume(code)\r\n      return cdataEnd\r\n    }\r\n\r\n    return cdata(code)\r\n  }\r\n\r\n  /**\r\n   * In CDATA, after `]]`, at `>`.\r\n   *\r\n   * ```markdown\r\n   * > | a <![CDATA[>&<]]> b\r\n   *                     ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function cdataEnd(code) {\r\n    if (code === codes.greaterThan) {\r\n      return end(code)\r\n    }\r\n\r\n    if (code === codes.rightSquareBracket) {\r\n      effects.consume(code)\r\n      return cdataEnd\r\n    }\r\n\r\n    return cdata(code)\r\n  }\r\n\r\n  /**\r\n   * In declaration.\r\n   *\r\n   * ```markdown\r\n   * > | a <!b> c\r\n   *          ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function declaration(code) {\r\n    if (code === codes.eof || code === codes.greaterThan) {\r\n      return end(code)\r\n    }\r\n\r\n    if (markdownLineEnding(code)) {\r\n      returnState = declaration\r\n      return lineEndingBefore(code)\r\n    }\r\n\r\n    effects.consume(code)\r\n    return declaration\r\n  }\r\n\r\n  /**\r\n   * In instruction.\r\n   *\r\n   * ```markdown\r\n   * > | a <?b?> c\r\n   *         ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function instruction(code) {\r\n    if (code === codes.eof) {\r\n      return nok(code)\r\n    }\r\n\r\n    if (code === codes.questionMark) {\r\n      effects.consume(code)\r\n      return instructionClose\r\n    }\r\n\r\n    if (markdownLineEnding(code)) {\r\n      returnState = instruction\r\n      return lineEndingBefore(code)\r\n    }\r\n\r\n    effects.consume(code)\r\n    return instruction\r\n  }\r\n\r\n  /**\r\n   * In instruction, after `?`, at `>`.\r\n   *\r\n   * ```markdown\r\n   * > | a <?b?> c\r\n   *           ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function instructionClose(code) {\r\n    return code === codes.greaterThan ? end(code) : instruction(code)\r\n  }\r\n\r\n  /**\r\n   * After `</`, in closing tag, at tag name.\r\n   *\r\n   * ```markdown\r\n   * > | a </b> c\r\n   *         ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function tagCloseStart(code) {\r\n    // ASCII alphabetical.\r\n    if (asciiAlpha(code)) {\r\n      effects.consume(code)\r\n      return tagClose\r\n    }\r\n\r\n    return nok(code)\r\n  }\r\n\r\n  /**\r\n   * After `</x`, in a tag name.\r\n   *\r\n   * ```markdown\r\n   * > | a </b> c\r\n   *          ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function tagClose(code) {\r\n    // ASCII alphanumerical and `-`.\r\n    if (code === codes.dash || asciiAlphanumeric(code)) {\r\n      effects.consume(code)\r\n      return tagClose\r\n    }\r\n\r\n    return tagCloseBetween(code)\r\n  }\r\n\r\n  /**\r\n   * In closing tag, after tag name.\r\n   *\r\n   * ```markdown\r\n   * > | a </b> c\r\n   *          ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function tagCloseBetween(code) {\r\n    if (markdownLineEnding(code)) {\r\n      returnState = tagCloseBetween\r\n      return lineEndingBefore(code)\r\n    }\r\n\r\n    if (markdownSpace(code)) {\r\n      effects.consume(code)\r\n      return tagCloseBetween\r\n    }\r\n\r\n    return end(code)\r\n  }\r\n\r\n  /**\r\n   * After `<x`, in opening tag name.\r\n   *\r\n   * ```markdown\r\n   * > | a <b> c\r\n   *         ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function tagOpen(code) {\r\n    // ASCII alphanumerical and `-`.\r\n    if (code === codes.dash || asciiAlphanumeric(code)) {\r\n      effects.consume(code)\r\n      return tagOpen\r\n    }\r\n\r\n    if (\r\n      code === codes.slash ||\r\n      code === codes.greaterThan ||\r\n      markdownLineEndingOrSpace(code)\r\n    ) {\r\n      return tagOpenBetween(code)\r\n    }\r\n\r\n    return nok(code)\r\n  }\r\n\r\n  /**\r\n   * In opening tag, after tag name.\r\n   *\r\n   * ```markdown\r\n   * > | a <b> c\r\n   *         ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function tagOpenBetween(code) {\r\n    if (code === codes.slash) {\r\n      effects.consume(code)\r\n      return end\r\n    }\r\n\r\n    // ASCII alphabetical and `:` and `_`.\r\n    if (code === codes.colon || code === codes.underscore || asciiAlpha(code)) {\r\n      effects.consume(code)\r\n      return tagOpenAttributeName\r\n    }\r\n\r\n    if (markdownLineEnding(code)) {\r\n      returnState = tagOpenBetween\r\n      return lineEndingBefore(code)\r\n    }\r\n\r\n    if (markdownSpace(code)) {\r\n      effects.consume(code)\r\n      return tagOpenBetween\r\n    }\r\n\r\n    return end(code)\r\n  }\r\n\r\n  /**\r\n   * In attribute name.\r\n   *\r\n   * ```markdown\r\n   * > | a <b c> d\r\n   *          ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function tagOpenAttributeName(code) {\r\n    // ASCII alphabetical and `-`, `.`, `:`, and `_`.\r\n    if (\r\n      code === codes.dash ||\r\n      code === codes.dot ||\r\n      code === codes.colon ||\r\n      code === codes.underscore ||\r\n      asciiAlphanumeric(code)\r\n    ) {\r\n      effects.consume(code)\r\n      return tagOpenAttributeName\r\n    }\r\n\r\n    return tagOpenAttributeNameAfter(code)\r\n  }\r\n\r\n  /**\r\n   * After attribute name, before initializer, the end of the tag, or\r\n   * whitespace.\r\n   *\r\n   * ```markdown\r\n   * > | a <b c> d\r\n   *           ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function tagOpenAttributeNameAfter(code) {\r\n    if (code === codes.equalsTo) {\r\n      effects.consume(code)\r\n      return tagOpenAttributeValueBefore\r\n    }\r\n\r\n    if (markdownLineEnding(code)) {\r\n      returnState = tagOpenAttributeNameAfter\r\n      return lineEndingBefore(code)\r\n    }\r\n\r\n    if (markdownSpace(code)) {\r\n      effects.consume(code)\r\n      return tagOpenAttributeNameAfter\r\n    }\r\n\r\n    return tagOpenBetween(code)\r\n  }\r\n\r\n  /**\r\n   * Before unquoted, double quoted, or single quoted attribute value, allowing\r\n   * whitespace.\r\n   *\r\n   * ```markdown\r\n   * > | a <b c=d> e\r\n   *            ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function tagOpenAttributeValueBefore(code) {\r\n    if (\r\n      code === codes.eof ||\r\n      code === codes.lessThan ||\r\n      code === codes.equalsTo ||\r\n      code === codes.greaterThan ||\r\n      code === codes.graveAccent\r\n    ) {\r\n      return nok(code)\r\n    }\r\n\r\n    if (code === codes.quotationMark || code === codes.apostrophe) {\r\n      effects.consume(code)\r\n      marker = code\r\n      return tagOpenAttributeValueQuoted\r\n    }\r\n\r\n    if (markdownLineEnding(code)) {\r\n      returnState = tagOpenAttributeValueBefore\r\n      return lineEndingBefore(code)\r\n    }\r\n\r\n    if (markdownSpace(code)) {\r\n      effects.consume(code)\r\n      return tagOpenAttributeValueBefore\r\n    }\r\n\r\n    effects.consume(code)\r\n    return tagOpenAttributeValueUnquoted\r\n  }\r\n\r\n  /**\r\n   * In double or single quoted attribute value.\r\n   *\r\n   * ```markdown\r\n   * > | a <b c=\"d\"> e\r\n   *             ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function tagOpenAttributeValueQuoted(code) {\r\n    if (code === marker) {\r\n      effects.consume(code)\r\n      marker = undefined\r\n      return tagOpenAttributeValueQuotedAfter\r\n    }\r\n\r\n    if (code === codes.eof) {\r\n      return nok(code)\r\n    }\r\n\r\n    if (markdownLineEnding(code)) {\r\n      returnState = tagOpenAttributeValueQuoted\r\n      return lineEndingBefore(code)\r\n    }\r\n\r\n    effects.consume(code)\r\n    return tagOpenAttributeValueQuoted\r\n  }\r\n\r\n  /**\r\n   * In unquoted attribute value.\r\n   *\r\n   * ```markdown\r\n   * > | a <b c=d> e\r\n   *            ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function tagOpenAttributeValueUnquoted(code) {\r\n    if (\r\n      code === codes.eof ||\r\n      code === codes.quotationMark ||\r\n      code === codes.apostrophe ||\r\n      code === codes.lessThan ||\r\n      code === codes.equalsTo ||\r\n      code === codes.graveAccent\r\n    ) {\r\n      return nok(code)\r\n    }\r\n\r\n    if (\r\n      code === codes.slash ||\r\n      code === codes.greaterThan ||\r\n      markdownLineEndingOrSpace(code)\r\n    ) {\r\n      return tagOpenBetween(code)\r\n    }\r\n\r\n    effects.consume(code)\r\n    return tagOpenAttributeValueUnquoted\r\n  }\r\n\r\n  /**\r\n   * After double or single quoted attribute value, before whitespace or the end\r\n   * of the tag.\r\n   *\r\n   * ```markdown\r\n   * > | a <b c=\"d\"> e\r\n   *               ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function tagOpenAttributeValueQuotedAfter(code) {\r\n    if (\r\n      code === codes.slash ||\r\n      code === codes.greaterThan ||\r\n      markdownLineEndingOrSpace(code)\r\n    ) {\r\n      return tagOpenBetween(code)\r\n    }\r\n\r\n    return nok(code)\r\n  }\r\n\r\n  /**\r\n   * In certain circumstances of a tag where only an `>` is allowed.\r\n   *\r\n   * ```markdown\r\n   * > | a <b c=\"d\"> e\r\n   *               ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function end(code) {\r\n    if (code === codes.greaterThan) {\r\n      effects.consume(code)\r\n      effects.exit(types.htmlTextData)\r\n      effects.exit(types.htmlText)\r\n      return ok\r\n    }\r\n\r\n    return nok(code)\r\n  }\r\n\r\n  /**\r\n   * At eol.\r\n   *\r\n   * > 👉 **Note**: we can’t have blank lines in text, so no need to worry about\r\n   * > empty tokens.\r\n   *\r\n   * ```markdown\r\n   * > | a <!--a\r\n   *            ^\r\n   *   | b-->\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function lineEndingBefore(code) {\r\n    assert(returnState, 'expected return state')\r\n    assert(markdownLineEnding(code), 'expected eol')\r\n    effects.exit(types.htmlTextData)\r\n    effects.enter(types.lineEnding)\r\n    effects.consume(code)\r\n    effects.exit(types.lineEnding)\r\n    return lineEndingAfter\r\n  }\r\n\r\n  /**\r\n   * After eol, at optional whitespace.\r\n   *\r\n   * > 👉 **Note**: we can’t have blank lines in text, so no need to worry about\r\n   * > empty tokens.\r\n   *\r\n   * ```markdown\r\n   *   | a <!--a\r\n   * > | b-->\r\n   *     ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function lineEndingAfter(code) {\r\n    // Always populated by defaults.\r\n    assert(\r\n      self.parser.constructs.disable.null,\r\n      'expected `disable.null` to be populated'\r\n    )\r\n    return markdownSpace(code)\r\n      ? factorySpace(\r\n          effects,\r\n          lineEndingAfterPrefix,\r\n          types.linePrefix,\r\n          self.parser.constructs.disable.null.includes('codeIndented')\r\n            ? undefined\r\n            : constants.tabSize\r\n        )(code)\r\n      : lineEndingAfterPrefix(code)\r\n  }\r\n\r\n  /**\r\n   * After eol, after optional whitespace.\r\n   *\r\n   * > 👉 **Note**: we can’t have blank lines in text, so no need to worry about\r\n   * > empty tokens.\r\n   *\r\n   * ```markdown\r\n   *   | a <!--a\r\n   * > | b-->\r\n   *     ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function lineEndingAfterPrefix(code) {\r\n    effects.enter(types.htmlTextData)\r\n    return returnState(code)\r\n  }\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}