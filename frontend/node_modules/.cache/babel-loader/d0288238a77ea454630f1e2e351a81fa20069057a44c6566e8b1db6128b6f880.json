{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\rjalr\\\\OneDrive\\\\\\uBC14\\uD0D5 \\uD654\\uBA74\\\\ybigta\\\\ybigta_blog_2\\\\Ybigta-Blog\\\\frontend\\\\src\\\\components\\\\page\\\\BlogListPage.jsx\",\n  _s = $RefreshSig$();\nimport React from \"react\";\nimport { useEffect, useState } from \"react\";\nimport { useNavigate, useSearchParams } from \"react-router-dom\";\nimport styled, { createGlobalStyle } from \"styled-components\";\nimport HeaderComponent from \"../ui/HeaderComponent\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Wrapper = styled.div`\n  padding: 40px;\n  display: flex;\n  flex-direction: column;\n`;\n_c = Wrapper;\nconst TagContainer = styled.div`\n  display: flex;\n  flex-direction: row;\n  flex-wrap: wrap;\n  align-items: center;\n  justify-content: center;\n  //width: 600px;\n  gap: 7px;\n`;\n_c2 = TagContainer;\nconst CategoryContainer = styled.div`\n  display: flex;\n  flex-direction: row;\n  flex-wrap: wrap;\n  align-items: center;\n  justify-content: center;\n  //width: 600px;\n  gap: 7px;\n`;\n_c3 = CategoryContainer;\nconst Tags = styled.span`\n  padding-top: 3px;\n  padding-bottom: 3px;\n  padding-right: 8px;\n  padding-left: 8px;\n  background-color: #ebebeb;\n  text-align: center;\n  font-size: 13px;\n  justify-content: center;\n  color: #666666;\n  border-radius: 5px;\n`;\n_c4 = Tags;\nconst BlogListPage = () => {\n  _s();\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [posts, setPosts] = useState([]);\n  const [selectedTags, setSelectedTags] = useState([]);\n  const [selectedCategory, setSelectedCategory] = useState(\"\");\n  const [searchParams, setSearchParams] = useSearchParams();\n  const [searchQuery, setSearchQuery] = useState(\"\");\n\n  // 페이지 이동\n  const navigate = useNavigate();\n\n  // 필터링 초기화\n  const resetFilters = () => {\n    setSelectedTags([]);\n    setSelectedCategory(\"\");\n    setSearchParams({});\n  };\n\n  // 날짜 정렬\n  const sortPostsByDate = posts => {\n    return posts.sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt));\n  };\n\n  // 검색어 입력 처리 저장\n  const handleSearchInputChange = event => {\n    setSearchQuery(event.target.value); // 입력된 검색어를 상태로 저장\n  };\n\n  // 초기 포스트 페이지 로딩\n  useEffect(() => {\n    fetch(\"http://localhost:8000/posts/\").then(response => {\n      if (!response.ok) {\n        throw new Error(\"Failed to fetch posts\");\n      }\n      return response.json();\n    }).then(data => {\n      const sortedPosts = sortPostsByDate(data); // 받아온 데이터를 날짜 순으로 정렬\n      setPosts(sortedPosts);\n      // setPosts(data);\n    }).catch(error => {\n      setError(error.message);\n    }).finally(() => {\n      setLoading(false);\n    });\n  }, []);\n\n  // URL 쿼리 파라미터 값 변화에 따라 바로 렌더링하기\n  useEffect(() => {\n    // URL에서 tags와 cat 쿼리 파라미터 값 읽어오기\n    const tagsFromURL = searchParams.get(\"tags\");\n    const categoryFromURL = searchParams.get(\"cat\");\n\n    // 쿼리 파라미터가 없는 경우 빈 배열 또는 빈 문자열로 초기화\n    const tagsArray = tagsFromURL ? tagsFromURL.split(\"&\") : [];\n    const category = categoryFromURL ? categoryFromURL : \"\";\n\n    // 컴포넌트 상태를 URL의 쿼리 파라미터에 맞게 업데이트\n    setSelectedTags(tagsArray);\n    setSelectedCategory(category);\n  }, [searchParams]); // searchParams 변화 감지\n\n  // 글 제목 클릭 시 해당 글의 상세 페이지로 이동하는 함수\n  const handlePostClick = postId => {\n    navigate(`/posts/${postId}`);\n  };\n\n  // 태그 단일선택 처리 (공통사용)\n  const handleTagClick = (tag, event) => {\n    event.stopPropagation();\n    navigate(`/?tags=${tag}`);\n  };\n\n  // 태그 다중선택 처리\n  const handleTagChange = tag => {\n    const newSelectedTags = selectedTags.includes(tag) ? selectedTags.filter(t => t !== tag) : [...selectedTags, tag];\n    setSelectedTags(newSelectedTags);\n    setSearchParams({\n      tags: newSelectedTags.join(\"&\"),\n      cat: selectedCategory\n    });\n  };\n\n  // 카테고리 선택 처리\n  const handleCategoryChange = category => {\n    const isDeselecting = selectedCategory === category || category === \"ALL\";\n    const newCategory = isDeselecting ? \"\" : category;\n    setSelectedCategory(newCategory);\n    if (newCategory === \"\") {\n      setSearchParams(selectedTags.length > 0 ? {\n        tags: selectedTags.join(\"&\")\n      } : {});\n    } else {\n      setSearchParams({\n        tags: selectedTags.join(\"&\"),\n        cat: newCategory\n      });\n    }\n  };\n\n  // posts Data 필터링\n  const filteredPosts = posts.filter(post => {\n    const hasSelectedTags = selectedTags.length === 0 || selectedTags.every(tag => post.tags.includes(tag));\n    const hasSelectedCategory = !selectedCategory || post.categories.includes(selectedCategory);\n    const matchesSearchQuery = post.title.toLowerCase().includes(searchQuery.toLowerCase()) ||\n    // 제목에 검색어가 포함되는지 확인\n    post.content.toLowerCase().includes(searchQuery.toLowerCase()); // 내용에 검색어가 포함되는지 확인\n    return hasSelectedTags && hasSelectedCategory && matchesSearchQuery;\n  });\n\n  // const allTags = posts.reduce((acc, post) => [...acc, ...post.tags], []);\n  // const uniqueTags = [...new Set(allTags)];\n\n  const uniqueTags = [...new Set(posts.flatMap(post => post.tags))];\n  const uniqueCategories = [...new Set(posts.map(post => post.categories))];\n  if (loading) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"Loading...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 167,\n    columnNumber: 23\n  }, this);\n  if (error) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [\"Error: \", error]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 168,\n    columnNumber: 21\n  }, this);\n  return /*#__PURE__*/_jsxDEV(Wrapper, {\n    children: [/*#__PURE__*/_jsxDEV(HeaderComponent, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      onClick: resetFilters,\n      style: {\n        cursor: \"pointer\"\n      },\n      children: \"\\uBE14\\uB85C\\uADF8 \\uBA54\\uC778/\\uB9AC\\uC2A4\\uD2B8 \\uD398\\uC774\\uC9C0\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      value: searchQuery,\n      onChange: handleSearchInputChange,\n      placeholder: \"Search...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TagContainer, {\n      children: uniqueTags.map((tag, tagIndex) => /*#__PURE__*/_jsxDEV(Tags, {\n        onClick: () => handleTagChange(tag),\n        style: {\n          marginRight: \"10px\",\n          cursor: \"pointer\",\n          gap: \"10px\"\n        },\n        children: [\"#\", tag, selectedTags.includes(tag) ? \" (Selected)\" : \"\"]\n      }, tagIndex, true, {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CategoryContainer, {\n      children: uniqueCategories.map((category, index) => /*#__PURE__*/_jsxDEV(Tags, {\n        onClick: () => handleCategoryChange(category),\n        style: {\n          marginRight: \"10px\",\n          cursor: \"pointer\",\n          gap: \"10px\"\n        },\n        children: selectedCategory === category ? `${category} (Selected)` : category\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 201,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 199,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: filteredPosts.map((post, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          onClick: () => handlePostClick(post._id),\n          style: {\n            cursor: \"pointer\"\n          },\n          children: post.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 218,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            display: \"flex\",\n            alignItems: \"center\",\n            fontSize: \"16px\",\n            fontWeight: \"bold\",\n            color: \"gray\"\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            children: post.author\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 235,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n            src: post.profileImagePath,\n            alt: \"Author's profile\",\n            style: {\n              width: \"30px\",\n              height: \"30px\",\n              borderRadius: \"50%\"\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 236,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            style: {\n              margin: \"0 10px\",\n              fontWeight: \"bold\",\n              color: \"lightgray\"\n            },\n            children: new Date(post.createdAt).toLocaleDateString()\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 241,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 226,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n          children: post.outline\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 252,\n          columnNumber: 13\n        }, this), post.tags.map((tag, tagIndex) => /*#__PURE__*/_jsxDEV(Tags, {\n          onClick: event => handleTagClick(tag, event),\n          style: {\n            marginRight: \"10px\",\n            cursor: \"pointer\",\n            gap: \"10px\"\n          },\n          children: [\"#\", tag]\n        }, tagIndex, true, {\n          fileName: _jsxFileName,\n          lineNumber: 256,\n          columnNumber: 15\n        }, this))]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 216,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 214,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 171,\n    columnNumber: 5\n  }, this);\n};\n_s(BlogListPage, \"4aD5c60evx5sYq5Gili+9H0bAfg=\", false, function () {\n  return [useSearchParams, useNavigate];\n});\n_c5 = BlogListPage;\nexport default BlogListPage;\nvar _c, _c2, _c3, _c4, _c5;\n$RefreshReg$(_c, \"Wrapper\");\n$RefreshReg$(_c2, \"TagContainer\");\n$RefreshReg$(_c3, \"CategoryContainer\");\n$RefreshReg$(_c4, \"Tags\");\n$RefreshReg$(_c5, \"BlogListPage\");","map":{"version":3,"names":["React","useEffect","useState","useNavigate","useSearchParams","styled","createGlobalStyle","HeaderComponent","jsxDEV","_jsxDEV","Wrapper","div","_c","TagContainer","_c2","CategoryContainer","_c3","Tags","span","_c4","BlogListPage","_s","loading","setLoading","error","setError","posts","setPosts","selectedTags","setSelectedTags","selectedCategory","setSelectedCategory","searchParams","setSearchParams","searchQuery","setSearchQuery","navigate","resetFilters","sortPostsByDate","sort","a","b","Date","createdAt","handleSearchInputChange","event","target","value","fetch","then","response","ok","Error","json","data","sortedPosts","catch","message","finally","tagsFromURL","get","categoryFromURL","tagsArray","split","category","handlePostClick","postId","handleTagClick","tag","stopPropagation","handleTagChange","newSelectedTags","includes","filter","t","tags","join","cat","handleCategoryChange","isDeselecting","newCategory","length","filteredPosts","post","hasSelectedTags","every","hasSelectedCategory","categories","matchesSearchQuery","title","toLowerCase","content","uniqueTags","Set","flatMap","uniqueCategories","map","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","style","cursor","type","onChange","placeholder","tagIndex","marginRight","gap","index","_id","display","alignItems","fontSize","fontWeight","color","author","src","profileImagePath","alt","width","height","borderRadius","margin","toLocaleDateString","outline","_c5","$RefreshReg$"],"sources":["C:/Users/rjalr/OneDrive/바탕 화면/ybigta/ybigta_blog_2/Ybigta-Blog/frontend/src/components/page/BlogListPage.jsx"],"sourcesContent":["import React from \"react\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { useNavigate, useSearchParams } from \"react-router-dom\";\r\nimport styled, { createGlobalStyle } from \"styled-components\";\r\n\r\nimport HeaderComponent from \"../ui/HeaderComponent\";\r\n\r\nconst Wrapper = styled.div`\r\n  padding: 40px;\r\n  display: flex;\r\n  flex-direction: column;\r\n`;\r\n\r\nconst TagContainer = styled.div`\r\n  display: flex;\r\n  flex-direction: row;\r\n  flex-wrap: wrap;\r\n  align-items: center;\r\n  justify-content: center;\r\n  //width: 600px;\r\n  gap: 7px;\r\n`;\r\n\r\nconst CategoryContainer = styled.div`\r\n  display: flex;\r\n  flex-direction: row;\r\n  flex-wrap: wrap;\r\n  align-items: center;\r\n  justify-content: center;\r\n  //width: 600px;\r\n  gap: 7px;\r\n`;\r\n\r\nconst Tags = styled.span`\r\n  padding-top: 3px;\r\n  padding-bottom: 3px;\r\n  padding-right: 8px;\r\n  padding-left: 8px;\r\n  background-color: #ebebeb;\r\n  text-align: center;\r\n  font-size: 13px;\r\n  justify-content: center;\r\n  color: #666666;\r\n  border-radius: 5px;\r\n`;\r\n\r\nconst BlogListPage = () => {\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n  const [posts, setPosts] = useState([]);\r\n  const [selectedTags, setSelectedTags] = useState([]);\r\n  const [selectedCategory, setSelectedCategory] = useState(\"\");\r\n  const [searchParams, setSearchParams] = useSearchParams();\r\n  const [searchQuery, setSearchQuery] = useState(\"\");\r\n\r\n  // 페이지 이동\r\n  const navigate = useNavigate();\r\n\r\n  // 필터링 초기화\r\n  const resetFilters = () => {\r\n    setSelectedTags([]);\r\n    setSelectedCategory(\"\");\r\n    setSearchParams({});\r\n  };\r\n\r\n  // 날짜 정렬\r\n  const sortPostsByDate = (posts) => {\r\n    return posts.sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt));\r\n  };\r\n\r\n  // 검색어 입력 처리 저장\r\n  const handleSearchInputChange = (event) => {\r\n    setSearchQuery(event.target.value); // 입력된 검색어를 상태로 저장\r\n  };\r\n\r\n  // 초기 포스트 페이지 로딩\r\n  useEffect(() => {\r\n    fetch(\"http://localhost:8000/posts/\")\r\n      .then((response) => {\r\n        if (!response.ok) {\r\n          throw new Error(\"Failed to fetch posts\");\r\n        }\r\n        return response.json();\r\n      })\r\n      .then((data) => {\r\n        const sortedPosts = sortPostsByDate(data); // 받아온 데이터를 날짜 순으로 정렬\r\n        setPosts(sortedPosts);\r\n        // setPosts(data);\r\n      })\r\n      .catch((error) => {\r\n        setError(error.message);\r\n      })\r\n      .finally(() => {\r\n        setLoading(false);\r\n      });\r\n  }, []);\r\n\r\n  // URL 쿼리 파라미터 값 변화에 따라 바로 렌더링하기\r\n  useEffect(() => {\r\n    // URL에서 tags와 cat 쿼리 파라미터 값 읽어오기\r\n    const tagsFromURL = searchParams.get(\"tags\");\r\n    const categoryFromURL = searchParams.get(\"cat\");\r\n\r\n    // 쿼리 파라미터가 없는 경우 빈 배열 또는 빈 문자열로 초기화\r\n    const tagsArray = tagsFromURL ? tagsFromURL.split(\"&\") : [];\r\n    const category = categoryFromURL ? categoryFromURL : \"\";\r\n\r\n    // 컴포넌트 상태를 URL의 쿼리 파라미터에 맞게 업데이트\r\n    setSelectedTags(tagsArray);\r\n    setSelectedCategory(category);\r\n  }, [searchParams]); // searchParams 변화 감지\r\n\r\n  // 글 제목 클릭 시 해당 글의 상세 페이지로 이동하는 함수\r\n  const handlePostClick = (postId) => {\r\n    navigate(`/posts/${postId}`);\r\n  };\r\n\r\n  // 태그 단일선택 처리 (공통사용)\r\n  const handleTagClick = (tag, event) => {\r\n    event.stopPropagation();\r\n    navigate(`/?tags=${tag}`);\r\n  };\r\n\r\n  // 태그 다중선택 처리\r\n  const handleTagChange = (tag) => {\r\n    const newSelectedTags = selectedTags.includes(tag)\r\n      ? selectedTags.filter((t) => t !== tag)\r\n      : [...selectedTags, tag];\r\n    setSelectedTags(newSelectedTags);\r\n    setSearchParams({ tags: newSelectedTags.join(\"&\"), cat: selectedCategory });\r\n  };\r\n\r\n  // 카테고리 선택 처리\r\n  const handleCategoryChange = (category) => {\r\n    const isDeselecting = selectedCategory === category || category === \"ALL\";\r\n    const newCategory = isDeselecting ? \"\" : category;\r\n    setSelectedCategory(newCategory);\r\n\r\n    if (newCategory === \"\") {\r\n      setSearchParams(\r\n        selectedTags.length > 0 ? { tags: selectedTags.join(\"&\") } : {}\r\n      );\r\n    } else {\r\n      setSearchParams({ tags: selectedTags.join(\"&\"), cat: newCategory });\r\n    }\r\n  };\r\n\r\n  // posts Data 필터링\r\n  const filteredPosts = posts.filter((post) => {\r\n    const hasSelectedTags =\r\n      selectedTags.length === 0 ||\r\n      selectedTags.every((tag) => post.tags.includes(tag));\r\n    const hasSelectedCategory =\r\n      !selectedCategory || post.categories.includes(selectedCategory);\r\n    const matchesSearchQuery =\r\n      post.title.toLowerCase().includes(searchQuery.toLowerCase()) || // 제목에 검색어가 포함되는지 확인\r\n      post.content.toLowerCase().includes(searchQuery.toLowerCase()); // 내용에 검색어가 포함되는지 확인\r\n    return hasSelectedTags && hasSelectedCategory && matchesSearchQuery;\r\n  });\r\n\r\n  // const allTags = posts.reduce((acc, post) => [...acc, ...post.tags], []);\r\n  // const uniqueTags = [...new Set(allTags)];\r\n\r\n  const uniqueTags = [...new Set(posts.flatMap((post) => post.tags))];\r\n  const uniqueCategories = [...new Set(posts.map((post) => post.categories))];\r\n\r\n  if (loading) return <div>Loading...</div>;\r\n  if (error) return <div>Error: {error}</div>;\r\n\r\n  return (\r\n    <Wrapper>\r\n      <HeaderComponent></HeaderComponent>\r\n      <h1 onClick={resetFilters} style={{ cursor: \"pointer\" }}>\r\n        블로그 메인/리스트 페이지\r\n      </h1>\r\n\r\n      <input\r\n        type=\"text\"\r\n        value={searchQuery}\r\n        onChange={handleSearchInputChange}\r\n        placeholder=\"Search...\"\r\n      />\r\n\r\n      {/* 태그 렌더링 - 다중 선택 */}\r\n      <TagContainer>\r\n        {uniqueTags.map((tag, tagIndex) => (\r\n          <Tags\r\n            key={tagIndex}\r\n            onClick={() => handleTagChange(tag)}\r\n            style={{ marginRight: \"10px\", cursor: \"pointer\", gap: \"10px\" }}\r\n          >\r\n            #{tag}\r\n            {selectedTags.includes(tag) ? \" (Selected)\" : \"\"}\r\n          </Tags>\r\n        ))}\r\n      </TagContainer>\r\n\r\n      {/* 카테고리 버튼 렌더링 */}\r\n      <CategoryContainer>\r\n        {uniqueCategories.map((category, index) => (\r\n          <Tags\r\n            key={index}\r\n            onClick={() => handleCategoryChange(category)}\r\n            style={{ marginRight: \"10px\", cursor: \"pointer\", gap: \"10px\" }}\r\n          >\r\n            {selectedCategory === category\r\n              ? `${category} (Selected)`\r\n              : category}\r\n          </Tags>\r\n        ))}\r\n      </CategoryContainer>\r\n\r\n      {/* 포스트 목록 렌더링 및 각종 click 이동 이벤트 */}\r\n      <div>\r\n        {filteredPosts.map((post, index) => (\r\n          <div key={index}>\r\n            {/* 제목 클릭 시 포스트로 이동 */}\r\n            <h2\r\n              onClick={() => handlePostClick(post._id)}\r\n              style={{ cursor: \"pointer\" }}\r\n            >\r\n              {post.title}\r\n            </h2>\r\n\r\n            {/* 작성자, 프사, 날짜, 아웃라인 */}\r\n            <div\r\n              style={{\r\n                display: \"flex\",\r\n                alignItems: \"center\",\r\n                fontSize: \"16px\",\r\n                fontWeight: \"bold\",\r\n                color: \"gray\",\r\n              }}\r\n            >\r\n              <span>{post.author}</span>\r\n              <img\r\n                src={post.profileImagePath}\r\n                alt=\"Author's profile\"\r\n                style={{ width: \"30px\", height: \"30px\", borderRadius: \"50%\" }}\r\n              />\r\n              <span\r\n                style={{\r\n                  margin: \"0 10px\",\r\n                  fontWeight: \"bold\",\r\n                  color: \"lightgray\",\r\n                }}\r\n              >\r\n                {new Date(post.createdAt).toLocaleDateString()}\r\n              </span>\r\n            </div>\r\n\r\n            <h4>{post.outline}</h4>\r\n\r\n            {/* 태그 및 단일 필터링 */}\r\n            {post.tags.map((tag, tagIndex) => (\r\n              <Tags\r\n                key={tagIndex}\r\n                onClick={(event) => handleTagClick(tag, event)}\r\n                style={{ marginRight: \"10px\", cursor: \"pointer\", gap: \"10px\" }}\r\n              >\r\n                #{tag}\r\n              </Tags>\r\n            ))}\r\n          </div>\r\n        ))}\r\n      </div>\r\n    </Wrapper>\r\n  );\r\n};\r\n\r\nexport default BlogListPage;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}