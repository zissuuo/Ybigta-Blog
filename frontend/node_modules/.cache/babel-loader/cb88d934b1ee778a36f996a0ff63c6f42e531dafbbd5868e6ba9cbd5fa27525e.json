{"ast":null,"code":"/**\r\n * @typedef {import('../types.js').Options} Options\r\n * @typedef {import('../types.js').State} State\r\n */\n\n/**\r\n * @param {State} state\r\n * @returns {Exclude<Options['ruleRepetition'], null | undefined>}\r\n */\nexport function checkRuleRepetition(state) {\n  const repetition = state.options.ruleRepetition || 3;\n  if (repetition < 3) {\n    throw new Error('Cannot serialize rules with repetition `' + repetition + '` for `options.ruleRepetition`, expected `3` or more');\n  }\n  return repetition;\n}","map":{"version":3,"names":["checkRuleRepetition","state","repetition","options","ruleRepetition","Error"],"sources":["E:/Documents/2024-1 YBIGTA/Ybigta_BLOG/Ybigta-Blog/frontend/node_modules/mdast-util-to-markdown/lib/util/check-rule-repetition.js"],"sourcesContent":["/**\r\n * @typedef {import('../types.js').Options} Options\r\n * @typedef {import('../types.js').State} State\r\n */\r\n\r\n/**\r\n * @param {State} state\r\n * @returns {Exclude<Options['ruleRepetition'], null | undefined>}\r\n */\r\nexport function checkRuleRepetition(state) {\r\n  const repetition = state.options.ruleRepetition || 3\r\n\r\n  if (repetition < 3) {\r\n    throw new Error(\r\n      'Cannot serialize rules with repetition `' +\r\n        repetition +\r\n        '` for `options.ruleRepetition`, expected `3` or more'\r\n    )\r\n  }\r\n\r\n  return repetition\r\n}\r\n"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,OAAO,SAASA,mBAAmBA,CAACC,KAAK,EAAE;EACzC,MAAMC,UAAU,GAAGD,KAAK,CAACE,OAAO,CAACC,cAAc,IAAI,CAAC;EAEpD,IAAIF,UAAU,GAAG,CAAC,EAAE;IAClB,MAAM,IAAIG,KAAK,CACb,0CAA0C,GACxCH,UAAU,GACV,sDACJ,CAAC;EACH;EAEA,OAAOA,UAAU;AACnB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}