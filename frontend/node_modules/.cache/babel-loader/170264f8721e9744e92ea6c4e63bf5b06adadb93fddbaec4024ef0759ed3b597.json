{"ast":null,"code":"/**\r\n * @typedef {import('mdast').Parents} Parents\r\n * @typedef {import('mdast').Strong} Strong\r\n * @typedef {import('../types.js').Info} Info\r\n * @typedef {import('../types.js').State} State\r\n */\n\nimport { checkStrong } from '../util/check-strong.js';\nstrong.peek = strongPeek;\n\n// To do: there are cases where emphasis cannot “form” depending on the\n// previous or next character of sequences.\n// There’s no way around that though, except for injecting zero-width stuff.\n// Do we need to safeguard against that?\n/**\r\n * @param {Strong} node\r\n * @param {Parents | undefined} _\r\n * @param {State} state\r\n * @param {Info} info\r\n * @returns {string}\r\n */\nexport function strong(node, _, state, info) {\n  const marker = checkStrong(state);\n  const exit = state.enter('strong');\n  const tracker = state.createTracker(info);\n  let value = tracker.move(marker + marker);\n  value += tracker.move(state.containerPhrasing(node, {\n    before: value,\n    after: marker,\n    ...tracker.current()\n  }));\n  value += tracker.move(marker + marker);\n  exit();\n  return value;\n}\n\n/**\r\n * @param {Strong} _\r\n * @param {Parents | undefined} _1\r\n * @param {State} state\r\n * @returns {string}\r\n */\nfunction strongPeek(_, _1, state) {\n  return state.options.strong || '*';\n}","map":{"version":3,"names":["checkStrong","strong","peek","strongPeek","node","_","state","info","marker","exit","enter","tracker","createTracker","value","move","containerPhrasing","before","after","current","_1","options"],"sources":["E:/Documents/2024-1 YBIGTA/Ybigta_BLOG/Ybigta-Blog/frontend/node_modules/mdast-util-to-markdown/lib/handle/strong.js"],"sourcesContent":["/**\r\n * @typedef {import('mdast').Parents} Parents\r\n * @typedef {import('mdast').Strong} Strong\r\n * @typedef {import('../types.js').Info} Info\r\n * @typedef {import('../types.js').State} State\r\n */\r\n\r\nimport {checkStrong} from '../util/check-strong.js'\r\n\r\nstrong.peek = strongPeek\r\n\r\n// To do: there are cases where emphasis cannot “form” depending on the\r\n// previous or next character of sequences.\r\n// There’s no way around that though, except for injecting zero-width stuff.\r\n// Do we need to safeguard against that?\r\n/**\r\n * @param {Strong} node\r\n * @param {Parents | undefined} _\r\n * @param {State} state\r\n * @param {Info} info\r\n * @returns {string}\r\n */\r\nexport function strong(node, _, state, info) {\r\n  const marker = checkStrong(state)\r\n  const exit = state.enter('strong')\r\n  const tracker = state.createTracker(info)\r\n  let value = tracker.move(marker + marker)\r\n  value += tracker.move(\r\n    state.containerPhrasing(node, {\r\n      before: value,\r\n      after: marker,\r\n      ...tracker.current()\r\n    })\r\n  )\r\n  value += tracker.move(marker + marker)\r\n  exit()\r\n  return value\r\n}\r\n\r\n/**\r\n * @param {Strong} _\r\n * @param {Parents | undefined} _1\r\n * @param {State} state\r\n * @returns {string}\r\n */\r\nfunction strongPeek(_, _1, state) {\r\n  return state.options.strong || '*'\r\n}\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAAQA,WAAW,QAAO,yBAAyB;AAEnDC,MAAM,CAACC,IAAI,GAAGC,UAAU;;AAExB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASF,MAAMA,CAACG,IAAI,EAAEC,CAAC,EAAEC,KAAK,EAAEC,IAAI,EAAE;EAC3C,MAAMC,MAAM,GAAGR,WAAW,CAACM,KAAK,CAAC;EACjC,MAAMG,IAAI,GAAGH,KAAK,CAACI,KAAK,CAAC,QAAQ,CAAC;EAClC,MAAMC,OAAO,GAAGL,KAAK,CAACM,aAAa,CAACL,IAAI,CAAC;EACzC,IAAIM,KAAK,GAAGF,OAAO,CAACG,IAAI,CAACN,MAAM,GAAGA,MAAM,CAAC;EACzCK,KAAK,IAAIF,OAAO,CAACG,IAAI,CACnBR,KAAK,CAACS,iBAAiB,CAACX,IAAI,EAAE;IAC5BY,MAAM,EAAEH,KAAK;IACbI,KAAK,EAAET,MAAM;IACb,GAAGG,OAAO,CAACO,OAAO,CAAC;EACrB,CAAC,CACH,CAAC;EACDL,KAAK,IAAIF,OAAO,CAACG,IAAI,CAACN,MAAM,GAAGA,MAAM,CAAC;EACtCC,IAAI,CAAC,CAAC;EACN,OAAOI,KAAK;AACd;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAASV,UAAUA,CAACE,CAAC,EAAEc,EAAE,EAAEb,KAAK,EAAE;EAChC,OAAOA,KAAK,CAACc,OAAO,CAACnB,MAAM,IAAI,GAAG;AACpC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}