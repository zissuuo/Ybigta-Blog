{"ast":null,"code":"/**\r\n * @typedef {import('hast').ElementContent} ElementContent\r\n *\r\n * @typedef {import('mdast').Nodes} Nodes\r\n * @typedef {import('mdast').Reference} Reference\r\n *\r\n * @typedef {import('./state.js').State} State\r\n */\n\n// Make VS Code show references to the above types.\n'';\n\n/**\r\n * Return the content of a reference without definition as plain text.\r\n *\r\n * @param {State} state\r\n *   Info passed around.\r\n * @param {Extract<Nodes, Reference>} node\r\n *   Reference node (image, link).\r\n * @returns {Array<ElementContent>}\r\n *   hast content.\r\n */\nexport function revert(state, node) {\n  const subtype = node.referenceType;\n  let suffix = ']';\n  if (subtype === 'collapsed') {\n    suffix += '[]';\n  } else if (subtype === 'full') {\n    suffix += '[' + (node.label || node.identifier) + ']';\n  }\n  if (node.type === 'imageReference') {\n    return [{\n      type: 'text',\n      value: '![' + node.alt + suffix\n    }];\n  }\n  const contents = state.all(node);\n  const head = contents[0];\n  if (head && head.type === 'text') {\n    head.value = '[' + head.value;\n  } else {\n    contents.unshift({\n      type: 'text',\n      value: '['\n    });\n  }\n  const tail = contents[contents.length - 1];\n  if (tail && tail.type === 'text') {\n    tail.value += suffix;\n  } else {\n    contents.push({\n      type: 'text',\n      value: suffix\n    });\n  }\n  return contents;\n}","map":{"version":3,"names":["revert","state","node","subtype","referenceType","suffix","label","identifier","type","value","alt","contents","all","head","unshift","tail","length","push"],"sources":["C:/Users/rjalr/OneDrive/바탕 화면/ybigta/ybigta_blog_2/Ybigta-Blog/frontend/node_modules/mdast-util-to-hast/lib/revert.js"],"sourcesContent":["/**\r\n * @typedef {import('hast').ElementContent} ElementContent\r\n *\r\n * @typedef {import('mdast').Nodes} Nodes\r\n * @typedef {import('mdast').Reference} Reference\r\n *\r\n * @typedef {import('./state.js').State} State\r\n */\r\n\r\n// Make VS Code show references to the above types.\r\n''\r\n\r\n/**\r\n * Return the content of a reference without definition as plain text.\r\n *\r\n * @param {State} state\r\n *   Info passed around.\r\n * @param {Extract<Nodes, Reference>} node\r\n *   Reference node (image, link).\r\n * @returns {Array<ElementContent>}\r\n *   hast content.\r\n */\r\nexport function revert(state, node) {\r\n  const subtype = node.referenceType\r\n  let suffix = ']'\r\n\r\n  if (subtype === 'collapsed') {\r\n    suffix += '[]'\r\n  } else if (subtype === 'full') {\r\n    suffix += '[' + (node.label || node.identifier) + ']'\r\n  }\r\n\r\n  if (node.type === 'imageReference') {\r\n    return [{type: 'text', value: '![' + node.alt + suffix}]\r\n  }\r\n\r\n  const contents = state.all(node)\r\n  const head = contents[0]\r\n\r\n  if (head && head.type === 'text') {\r\n    head.value = '[' + head.value\r\n  } else {\r\n    contents.unshift({type: 'text', value: '['})\r\n  }\r\n\r\n  const tail = contents[contents.length - 1]\r\n\r\n  if (tail && tail.type === 'text') {\r\n    tail.value += suffix\r\n  } else {\r\n    contents.push({type: 'text', value: suffix})\r\n  }\r\n\r\n  return contents\r\n}\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,EAAE;;AAEF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASA,MAAMA,CAACC,KAAK,EAAEC,IAAI,EAAE;EAClC,MAAMC,OAAO,GAAGD,IAAI,CAACE,aAAa;EAClC,IAAIC,MAAM,GAAG,GAAG;EAEhB,IAAIF,OAAO,KAAK,WAAW,EAAE;IAC3BE,MAAM,IAAI,IAAI;EAChB,CAAC,MAAM,IAAIF,OAAO,KAAK,MAAM,EAAE;IAC7BE,MAAM,IAAI,GAAG,IAAIH,IAAI,CAACI,KAAK,IAAIJ,IAAI,CAACK,UAAU,CAAC,GAAG,GAAG;EACvD;EAEA,IAAIL,IAAI,CAACM,IAAI,KAAK,gBAAgB,EAAE;IAClC,OAAO,CAAC;MAACA,IAAI,EAAE,MAAM;MAAEC,KAAK,EAAE,IAAI,GAAGP,IAAI,CAACQ,GAAG,GAAGL;IAAM,CAAC,CAAC;EAC1D;EAEA,MAAMM,QAAQ,GAAGV,KAAK,CAACW,GAAG,CAACV,IAAI,CAAC;EAChC,MAAMW,IAAI,GAAGF,QAAQ,CAAC,CAAC,CAAC;EAExB,IAAIE,IAAI,IAAIA,IAAI,CAACL,IAAI,KAAK,MAAM,EAAE;IAChCK,IAAI,CAACJ,KAAK,GAAG,GAAG,GAAGI,IAAI,CAACJ,KAAK;EAC/B,CAAC,MAAM;IACLE,QAAQ,CAACG,OAAO,CAAC;MAACN,IAAI,EAAE,MAAM;MAAEC,KAAK,EAAE;IAAG,CAAC,CAAC;EAC9C;EAEA,MAAMM,IAAI,GAAGJ,QAAQ,CAACA,QAAQ,CAACK,MAAM,GAAG,CAAC,CAAC;EAE1C,IAAID,IAAI,IAAIA,IAAI,CAACP,IAAI,KAAK,MAAM,EAAE;IAChCO,IAAI,CAACN,KAAK,IAAIJ,MAAM;EACtB,CAAC,MAAM;IACLM,QAAQ,CAACM,IAAI,CAAC;MAACT,IAAI,EAAE,MAAM;MAAEC,KAAK,EAAEJ;IAAM,CAAC,CAAC;EAC9C;EAEA,OAAOM,QAAQ;AACjB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}