{"ast":null,"code":"import { dequal } from 'dequal';\n\n/**\r\n * @type {Set<string>}\r\n */\nconst codesWarned = new Set();\nclass AssertionError extends Error {\n  name = ( /** @type {const} */'Assertion');\n  code = ( /** @type {const} */'ERR_ASSERTION');\n\n  /**\r\n   * Create an assertion error.\r\n   *\r\n   * @param {string} message\r\n   *   Message explaining error.\r\n   * @param {unknown} actual\r\n   *   Value.\r\n   * @param {unknown} expected\r\n   *   Baseline.\r\n   * @param {string} operator\r\n   *   Name of equality operation.\r\n   * @param {boolean} generated\r\n   *   Whether `message` is a custom message or not\r\n   * @returns\r\n   *   Instance.\r\n   */\n  // eslint-disable-next-line max-params\n  constructor(message, actual, expected, operator, generated) {\n    super(message);\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, this.constructor);\n    }\n\n    /**\r\n     * @type {unknown}\r\n     */\n    this.actual = actual;\n\n    /**\r\n     * @type {unknown}\r\n     */\n    this.expected = expected;\n\n    /**\r\n     * @type {boolean}\r\n     */\n    this.generated = generated;\n\n    /**\r\n     * @type {string}\r\n     */\n    this.operator = operator;\n  }\n}\nclass DeprecationError extends Error {\n  name = ( /** @type {const} */'DeprecationWarning');\n\n  /**\r\n   * Create a deprecation message.\r\n   *\r\n   * @param {string} message\r\n   *   Message explaining deprecation.\r\n   * @param {string | undefined} code\r\n   *   Deprecation identifier; deprecation messages will be generated only once per code.\r\n   * @returns\r\n   *   Instance.\r\n   */\n  constructor(message, code) {\n    super(message);\n\n    /**\r\n     * @type {string | undefined}\r\n     */\n    this.code = code;\n  }\n}\n\n/**\r\n * Wrap a function or class to show a deprecation message when first called.\r\n *\r\n * > ðŸ‘‰ **Important**: only shows a message when the `development` condition is\r\n * > used, does nothing in production.\r\n *\r\n * When the resulting wrapped `fn` is called, emits a warning once to\r\n * `console.error` (`stderr`).\r\n * If a code is given, one warning message will be emitted in total per code.\r\n *\r\n * @template {Function} T\r\n *   Function or class kind.\r\n * @param {T} fn\r\n *   Function or class.\r\n * @param {string} message\r\n *   Message explaining deprecation.\r\n * @param {string | null | undefined} [code]\r\n *   Deprecation identifier (optional); deprecation messages will be generated\r\n *   only once per code.\r\n * @returns {T}\r\n *   Wrapped `fn`.\r\n */\nexport function deprecate(fn, message, code) {\n  let warned = false;\n\n  // The wrapper will keep the same prototype as fn to maintain prototype chain\n  Object.setPrototypeOf(deprecated, fn);\n\n  // @ts-expect-error: itâ€™s perfect, typescriptâ€¦\n  return deprecated;\n\n  /**\r\n   * @this {unknown}\r\n   * @param  {...Array<unknown>} args\r\n   * @returns {unknown}\r\n   */\n  function deprecated(...args) {\n    if (!warned) {\n      warned = true;\n      if (typeof code === 'string' && codesWarned.has(code)) {\n        // Empty.\n      } else {\n        console.error(new DeprecationError(message, code || undefined));\n        if (typeof code === 'string') codesWarned.add(code);\n      }\n    }\n    return new.target ? Reflect.construct(fn, args, new.target) : Reflect.apply(fn, this, args);\n  }\n}\n\n/**\r\n * Assert deep strict equivalence.\r\n *\r\n * > ðŸ‘‰ **Important**: only asserts when the `development` condition is used,\r\n * > does nothing in production.\r\n *\r\n * @template {unknown} T\r\n *   Expected kind.\r\n * @param {unknown} actual\r\n *   Value.\r\n * @param {T} expected\r\n *   Baseline.\r\n * @param {Error | string | null | undefined} [message]\r\n *   Message for assertion error (default: `'Expected values to be deeply equal'`).\r\n * @returns {asserts actual is T}\r\n *   Nothing; throws when `actual` is not deep strict equal to `expected`.\r\n * @throws {AssertionError}\r\n *   Throws when `actual` is not deep strict equal to `expected`.\r\n */\nexport function equal(actual, expected, message) {\n  assert(dequal(actual, expected), actual, expected, 'equal', 'Expected values to be deeply equal', message);\n}\n\n/**\r\n * Assert if `value` is truthy.\r\n *\r\n * > ðŸ‘‰ **Important**: only asserts when the `development` condition is used,\r\n * > does nothing in production.\r\n *\r\n * @param {unknown} value\r\n *   Value to assert.\r\n * @param {Error | string | null | undefined} [message]\r\n *   Message for assertion error (default: `'Expected value to be truthy'`).\r\n * @returns {asserts value}\r\n *   Nothing; throws when `value` is falsey.\r\n * @throws {AssertionError}\r\n *   Throws when `value` is falsey.\r\n */\nexport function ok(value, message) {\n  assert(Boolean(value), false, true, 'ok', 'Expected value to be truthy', message);\n}\n\n/**\r\n * Assert that a code path never happens.\r\n *\r\n * > ðŸ‘‰ **Important**: only asserts when the `development` condition is used,\r\n * > does nothing in production.\r\n *\r\n * @param {Error | string | null | undefined} [message]\r\n *   Message for assertion error (default: `'Unreachable'`).\r\n * @returns {never}\r\n *   Nothing; always throws.\r\n * @throws {AssertionError}\r\n *   Throws when `value` is falsey.\r\n */\nexport function unreachable(message) {\n  assert(false, false, true, 'ok', 'Unreachable', message);\n}\n\n/**\r\n * @param {boolean} bool\r\n *   Whether to skip this operation.\r\n * @param {unknown} actual\r\n *   Actual value.\r\n * @param {unknown} expected\r\n *   Expected value.\r\n * @param {string} operator\r\n *   Operator.\r\n * @param {string} defaultMessage\r\n *   Default message for operation.\r\n * @param {Error | string | null | undefined} userMessage\r\n *   User-provided message.\r\n * @returns {asserts bool}\r\n *   Nothing; throws when falsey.\r\n */\n// eslint-disable-next-line max-params\nfunction assert(bool, actual, expected, operator, defaultMessage, userMessage) {\n  if (!bool) {\n    throw userMessage instanceof Error ? userMessage : new AssertionError(userMessage || defaultMessage, actual, expected, operator, !userMessage);\n  }\n}","map":{"version":3,"names":["dequal","codesWarned","Set","AssertionError","Error","name","code","constructor","message","actual","expected","operator","generated","captureStackTrace","DeprecationError","deprecate","fn","warned","Object","setPrototypeOf","deprecated","args","has","console","error","undefined","add","new","target","Reflect","construct","apply","equal","assert","ok","value","Boolean","unreachable","bool","defaultMessage","userMessage"],"sources":["E:/Documents/2024-1 YBIGTA/React/blog_git/Ybigta-Blog/frontend/node_modules/devlop/lib/development.js"],"sourcesContent":["import {dequal} from 'dequal'\r\n\r\n/**\r\n * @type {Set<string>}\r\n */\r\nconst codesWarned = new Set()\r\n\r\nclass AssertionError extends Error {\r\n  name = /** @type {const} */ ('Assertion')\r\n  code = /** @type {const} */ ('ERR_ASSERTION')\r\n\r\n  /**\r\n   * Create an assertion error.\r\n   *\r\n   * @param {string} message\r\n   *   Message explaining error.\r\n   * @param {unknown} actual\r\n   *   Value.\r\n   * @param {unknown} expected\r\n   *   Baseline.\r\n   * @param {string} operator\r\n   *   Name of equality operation.\r\n   * @param {boolean} generated\r\n   *   Whether `message` is a custom message or not\r\n   * @returns\r\n   *   Instance.\r\n   */\r\n  // eslint-disable-next-line max-params\r\n  constructor(message, actual, expected, operator, generated) {\r\n    super(message)\r\n\r\n    if (Error.captureStackTrace) {\r\n      Error.captureStackTrace(this, this.constructor)\r\n    }\r\n\r\n    /**\r\n     * @type {unknown}\r\n     */\r\n    this.actual = actual\r\n\r\n    /**\r\n     * @type {unknown}\r\n     */\r\n    this.expected = expected\r\n\r\n    /**\r\n     * @type {boolean}\r\n     */\r\n    this.generated = generated\r\n\r\n    /**\r\n     * @type {string}\r\n     */\r\n    this.operator = operator\r\n  }\r\n}\r\n\r\nclass DeprecationError extends Error {\r\n  name = /** @type {const} */ ('DeprecationWarning')\r\n\r\n  /**\r\n   * Create a deprecation message.\r\n   *\r\n   * @param {string} message\r\n   *   Message explaining deprecation.\r\n   * @param {string | undefined} code\r\n   *   Deprecation identifier; deprecation messages will be generated only once per code.\r\n   * @returns\r\n   *   Instance.\r\n   */\r\n  constructor(message, code) {\r\n    super(message)\r\n\r\n    /**\r\n     * @type {string | undefined}\r\n     */\r\n    this.code = code\r\n  }\r\n}\r\n\r\n/**\r\n * Wrap a function or class to show a deprecation message when first called.\r\n *\r\n * > ðŸ‘‰ **Important**: only shows a message when the `development` condition is\r\n * > used, does nothing in production.\r\n *\r\n * When the resulting wrapped `fn` is called, emits a warning once to\r\n * `console.error` (`stderr`).\r\n * If a code is given, one warning message will be emitted in total per code.\r\n *\r\n * @template {Function} T\r\n *   Function or class kind.\r\n * @param {T} fn\r\n *   Function or class.\r\n * @param {string} message\r\n *   Message explaining deprecation.\r\n * @param {string | null | undefined} [code]\r\n *   Deprecation identifier (optional); deprecation messages will be generated\r\n *   only once per code.\r\n * @returns {T}\r\n *   Wrapped `fn`.\r\n */\r\nexport function deprecate(fn, message, code) {\r\n  let warned = false\r\n\r\n  // The wrapper will keep the same prototype as fn to maintain prototype chain\r\n  Object.setPrototypeOf(deprecated, fn)\r\n\r\n  // @ts-expect-error: itâ€™s perfect, typescriptâ€¦\r\n  return deprecated\r\n\r\n  /**\r\n   * @this {unknown}\r\n   * @param  {...Array<unknown>} args\r\n   * @returns {unknown}\r\n   */\r\n  function deprecated(...args) {\r\n    if (!warned) {\r\n      warned = true\r\n\r\n      if (typeof code === 'string' && codesWarned.has(code)) {\r\n        // Empty.\r\n      } else {\r\n        console.error(new DeprecationError(message, code || undefined))\r\n\r\n        if (typeof code === 'string') codesWarned.add(code)\r\n      }\r\n    }\r\n\r\n    return new.target\r\n      ? Reflect.construct(fn, args, new.target)\r\n      : Reflect.apply(fn, this, args)\r\n  }\r\n}\r\n\r\n/**\r\n * Assert deep strict equivalence.\r\n *\r\n * > ðŸ‘‰ **Important**: only asserts when the `development` condition is used,\r\n * > does nothing in production.\r\n *\r\n * @template {unknown} T\r\n *   Expected kind.\r\n * @param {unknown} actual\r\n *   Value.\r\n * @param {T} expected\r\n *   Baseline.\r\n * @param {Error | string | null | undefined} [message]\r\n *   Message for assertion error (default: `'Expected values to be deeply equal'`).\r\n * @returns {asserts actual is T}\r\n *   Nothing; throws when `actual` is not deep strict equal to `expected`.\r\n * @throws {AssertionError}\r\n *   Throws when `actual` is not deep strict equal to `expected`.\r\n */\r\nexport function equal(actual, expected, message) {\r\n  assert(\r\n    dequal(actual, expected),\r\n    actual,\r\n    expected,\r\n    'equal',\r\n    'Expected values to be deeply equal',\r\n    message\r\n  )\r\n}\r\n\r\n/**\r\n * Assert if `value` is truthy.\r\n *\r\n * > ðŸ‘‰ **Important**: only asserts when the `development` condition is used,\r\n * > does nothing in production.\r\n *\r\n * @param {unknown} value\r\n *   Value to assert.\r\n * @param {Error | string | null | undefined} [message]\r\n *   Message for assertion error (default: `'Expected value to be truthy'`).\r\n * @returns {asserts value}\r\n *   Nothing; throws when `value` is falsey.\r\n * @throws {AssertionError}\r\n *   Throws when `value` is falsey.\r\n */\r\nexport function ok(value, message) {\r\n  assert(\r\n    Boolean(value),\r\n    false,\r\n    true,\r\n    'ok',\r\n    'Expected value to be truthy',\r\n    message\r\n  )\r\n}\r\n\r\n/**\r\n * Assert that a code path never happens.\r\n *\r\n * > ðŸ‘‰ **Important**: only asserts when the `development` condition is used,\r\n * > does nothing in production.\r\n *\r\n * @param {Error | string | null | undefined} [message]\r\n *   Message for assertion error (default: `'Unreachable'`).\r\n * @returns {never}\r\n *   Nothing; always throws.\r\n * @throws {AssertionError}\r\n *   Throws when `value` is falsey.\r\n */\r\nexport function unreachable(message) {\r\n  assert(false, false, true, 'ok', 'Unreachable', message)\r\n}\r\n\r\n/**\r\n * @param {boolean} bool\r\n *   Whether to skip this operation.\r\n * @param {unknown} actual\r\n *   Actual value.\r\n * @param {unknown} expected\r\n *   Expected value.\r\n * @param {string} operator\r\n *   Operator.\r\n * @param {string} defaultMessage\r\n *   Default message for operation.\r\n * @param {Error | string | null | undefined} userMessage\r\n *   User-provided message.\r\n * @returns {asserts bool}\r\n *   Nothing; throws when falsey.\r\n */\r\n// eslint-disable-next-line max-params\r\nfunction assert(bool, actual, expected, operator, defaultMessage, userMessage) {\r\n  if (!bool) {\r\n    throw userMessage instanceof Error\r\n      ? userMessage\r\n      : new AssertionError(\r\n          userMessage || defaultMessage,\r\n          actual,\r\n          expected,\r\n          operator,\r\n          !userMessage\r\n        )\r\n  }\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}