{"ast":null,"code":"/**\r\n * @typedef {import('micromark-util-types').Code} Code\r\n * @typedef {import('micromark-util-types').Construct} Construct\r\n * @typedef {import('micromark-util-types').State} State\r\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\r\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\r\n */\n\nimport { decodeNamedCharacterReference } from 'decode-named-character-reference';\nimport { asciiAlphanumeric, asciiDigit, asciiHexDigit } from 'micromark-util-character';\nimport { codes, constants, types } from 'micromark-util-symbol';\nimport { ok as assert } from 'devlop';\n\n/** @type {Construct} */\nexport const characterReference = {\n  name: 'characterReference',\n  tokenize: tokenizeCharacterReference\n};\n\n/**\r\n * @this {TokenizeContext}\r\n * @type {Tokenizer}\r\n */\nfunction tokenizeCharacterReference(effects, ok, nok) {\n  const self = this;\n  let size = 0;\n  /** @type {number} */\n  let max;\n  /** @type {(code: Code) => boolean} */\n  let test;\n  return start;\n\n  /**\r\n   * Start of character reference.\r\n   *\r\n   * ```markdown\r\n   * > | a&amp;b\r\n   *      ^\r\n   * > | a&#123;b\r\n   *      ^\r\n   * > | a&#x9;b\r\n   *      ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\n  function start(code) {\n    assert(code === codes.ampersand, 'expected `&`');\n    effects.enter(types.characterReference);\n    effects.enter(types.characterReferenceMarker);\n    effects.consume(code);\n    effects.exit(types.characterReferenceMarker);\n    return open;\n  }\n\n  /**\r\n   * After `&`, at `#` for numeric references or alphanumeric for named\r\n   * references.\r\n   *\r\n   * ```markdown\r\n   * > | a&amp;b\r\n   *       ^\r\n   * > | a&#123;b\r\n   *       ^\r\n   * > | a&#x9;b\r\n   *       ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\n  function open(code) {\n    if (code === codes.numberSign) {\n      effects.enter(types.characterReferenceMarkerNumeric);\n      effects.consume(code);\n      effects.exit(types.characterReferenceMarkerNumeric);\n      return numeric;\n    }\n    effects.enter(types.characterReferenceValue);\n    max = constants.characterReferenceNamedSizeMax;\n    test = asciiAlphanumeric;\n    return value(code);\n  }\n\n  /**\r\n   * After `#`, at `x` for hexadecimals or digit for decimals.\r\n   *\r\n   * ```markdown\r\n   * > | a&#123;b\r\n   *        ^\r\n   * > | a&#x9;b\r\n   *        ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\n  function numeric(code) {\n    if (code === codes.uppercaseX || code === codes.lowercaseX) {\n      effects.enter(types.characterReferenceMarkerHexadecimal);\n      effects.consume(code);\n      effects.exit(types.characterReferenceMarkerHexadecimal);\n      effects.enter(types.characterReferenceValue);\n      max = constants.characterReferenceHexadecimalSizeMax;\n      test = asciiHexDigit;\n      return value;\n    }\n    effects.enter(types.characterReferenceValue);\n    max = constants.characterReferenceDecimalSizeMax;\n    test = asciiDigit;\n    return value(code);\n  }\n\n  /**\r\n   * After markers (`&#x`, `&#`, or `&`), in value, before `;`.\r\n   *\r\n   * The character reference kind defines what and how many characters are\r\n   * allowed.\r\n   *\r\n   * ```markdown\r\n   * > | a&amp;b\r\n   *       ^^^\r\n   * > | a&#123;b\r\n   *        ^^^\r\n   * > | a&#x9;b\r\n   *         ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\n  function value(code) {\n    if (code === codes.semicolon && size) {\n      const token = effects.exit(types.characterReferenceValue);\n      if (test === asciiAlphanumeric && !decodeNamedCharacterReference(self.sliceSerialize(token))) {\n        return nok(code);\n      }\n\n      // To do: `markdown-rs` uses a different name:\n      // `CharacterReferenceMarkerSemi`.\n      effects.enter(types.characterReferenceMarker);\n      effects.consume(code);\n      effects.exit(types.characterReferenceMarker);\n      effects.exit(types.characterReference);\n      return ok;\n    }\n    if (test(code) && size++ < max) {\n      effects.consume(code);\n      return value;\n    }\n    return nok(code);\n  }\n}","map":{"version":3,"names":["decodeNamedCharacterReference","asciiAlphanumeric","asciiDigit","asciiHexDigit","codes","constants","types","ok","assert","characterReference","name","tokenize","tokenizeCharacterReference","effects","nok","self","size","max","test","start","code","ampersand","enter","characterReferenceMarker","consume","exit","open","numberSign","characterReferenceMarkerNumeric","numeric","characterReferenceValue","characterReferenceNamedSizeMax","value","uppercaseX","lowercaseX","characterReferenceMarkerHexadecimal","characterReferenceHexadecimalSizeMax","characterReferenceDecimalSizeMax","semicolon","token","sliceSerialize"],"sources":["E:/Documents/2024-1 YBIGTA/Ybigta_BLOG/Ybigta-Blog/frontend/node_modules/micromark-core-commonmark/dev/lib/character-reference.js"],"sourcesContent":["/**\r\n * @typedef {import('micromark-util-types').Code} Code\r\n * @typedef {import('micromark-util-types').Construct} Construct\r\n * @typedef {import('micromark-util-types').State} State\r\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\r\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\r\n */\r\n\r\nimport {decodeNamedCharacterReference} from 'decode-named-character-reference'\r\nimport {\r\n  asciiAlphanumeric,\r\n  asciiDigit,\r\n  asciiHexDigit\r\n} from 'micromark-util-character'\r\nimport {codes, constants, types} from 'micromark-util-symbol'\r\nimport {ok as assert} from 'devlop'\r\n\r\n/** @type {Construct} */\r\nexport const characterReference = {\r\n  name: 'characterReference',\r\n  tokenize: tokenizeCharacterReference\r\n}\r\n\r\n/**\r\n * @this {TokenizeContext}\r\n * @type {Tokenizer}\r\n */\r\nfunction tokenizeCharacterReference(effects, ok, nok) {\r\n  const self = this\r\n  let size = 0\r\n  /** @type {number} */\r\n  let max\r\n  /** @type {(code: Code) => boolean} */\r\n  let test\r\n\r\n  return start\r\n\r\n  /**\r\n   * Start of character reference.\r\n   *\r\n   * ```markdown\r\n   * > | a&amp;b\r\n   *      ^\r\n   * > | a&#123;b\r\n   *      ^\r\n   * > | a&#x9;b\r\n   *      ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function start(code) {\r\n    assert(code === codes.ampersand, 'expected `&`')\r\n    effects.enter(types.characterReference)\r\n    effects.enter(types.characterReferenceMarker)\r\n    effects.consume(code)\r\n    effects.exit(types.characterReferenceMarker)\r\n    return open\r\n  }\r\n\r\n  /**\r\n   * After `&`, at `#` for numeric references or alphanumeric for named\r\n   * references.\r\n   *\r\n   * ```markdown\r\n   * > | a&amp;b\r\n   *       ^\r\n   * > | a&#123;b\r\n   *       ^\r\n   * > | a&#x9;b\r\n   *       ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function open(code) {\r\n    if (code === codes.numberSign) {\r\n      effects.enter(types.characterReferenceMarkerNumeric)\r\n      effects.consume(code)\r\n      effects.exit(types.characterReferenceMarkerNumeric)\r\n      return numeric\r\n    }\r\n\r\n    effects.enter(types.characterReferenceValue)\r\n    max = constants.characterReferenceNamedSizeMax\r\n    test = asciiAlphanumeric\r\n    return value(code)\r\n  }\r\n\r\n  /**\r\n   * After `#`, at `x` for hexadecimals or digit for decimals.\r\n   *\r\n   * ```markdown\r\n   * > | a&#123;b\r\n   *        ^\r\n   * > | a&#x9;b\r\n   *        ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function numeric(code) {\r\n    if (code === codes.uppercaseX || code === codes.lowercaseX) {\r\n      effects.enter(types.characterReferenceMarkerHexadecimal)\r\n      effects.consume(code)\r\n      effects.exit(types.characterReferenceMarkerHexadecimal)\r\n      effects.enter(types.characterReferenceValue)\r\n      max = constants.characterReferenceHexadecimalSizeMax\r\n      test = asciiHexDigit\r\n      return value\r\n    }\r\n\r\n    effects.enter(types.characterReferenceValue)\r\n    max = constants.characterReferenceDecimalSizeMax\r\n    test = asciiDigit\r\n    return value(code)\r\n  }\r\n\r\n  /**\r\n   * After markers (`&#x`, `&#`, or `&`), in value, before `;`.\r\n   *\r\n   * The character reference kind defines what and how many characters are\r\n   * allowed.\r\n   *\r\n   * ```markdown\r\n   * > | a&amp;b\r\n   *       ^^^\r\n   * > | a&#123;b\r\n   *        ^^^\r\n   * > | a&#x9;b\r\n   *         ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function value(code) {\r\n    if (code === codes.semicolon && size) {\r\n      const token = effects.exit(types.characterReferenceValue)\r\n\r\n      if (\r\n        test === asciiAlphanumeric &&\r\n        !decodeNamedCharacterReference(self.sliceSerialize(token))\r\n      ) {\r\n        return nok(code)\r\n      }\r\n\r\n      // To do: `markdown-rs` uses a different name:\r\n      // `CharacterReferenceMarkerSemi`.\r\n      effects.enter(types.characterReferenceMarker)\r\n      effects.consume(code)\r\n      effects.exit(types.characterReferenceMarker)\r\n      effects.exit(types.characterReference)\r\n      return ok\r\n    }\r\n\r\n    if (test(code) && size++ < max) {\r\n      effects.consume(code)\r\n      return value\r\n    }\r\n\r\n    return nok(code)\r\n  }\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}