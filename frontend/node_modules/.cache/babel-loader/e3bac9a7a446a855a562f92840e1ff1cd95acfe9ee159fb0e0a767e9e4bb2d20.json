{"ast":null,"code":"/// <reference lib=\"WebWorker\"/>\n\nvar _self = typeof window !== 'undefined' ? window // if in browser\n: typeof WorkerGlobalScope !== 'undefined' && self instanceof WorkerGlobalScope ? self // if in worker\n: {} // if in node js\n;\n\n/**\r\n * Prism: Lightweight, robust, elegant syntax highlighting\r\n *\r\n * @license MIT <https://opensource.org/licenses/MIT>\r\n * @author Lea Verou <https://lea.verou.me>\r\n * @namespace\r\n * @public\r\n */\nvar Prism = function (_self) {\n  // Private helper vars\n  var lang = /(?:^|\\s)lang(?:uage)?-([\\w-]+)(?=\\s|$)/i;\n  var uniqueId = 0;\n\n  // The grammar object for plaintext\n  var plainTextGrammar = {};\n  var _ = {\n    /**\r\n     * By default, Prism will attempt to highlight all code elements (by calling {@link Prism.highlightAll}) on the\r\n     * current page after the page finished loading. This might be a problem if e.g. you wanted to asynchronously load\r\n     * additional languages or plugins yourself.\r\n     *\r\n     * By setting this value to `true`, Prism will not automatically highlight all code elements on the page.\r\n     *\r\n     * You obviously have to change this value before the automatic highlighting started. To do this, you can add an\r\n     * empty Prism object into the global scope before loading the Prism script like this:\r\n     *\r\n     * ```js\r\n     * window.Prism = window.Prism || {};\r\n     * Prism.manual = true;\r\n     * // add a new <script> to load Prism's script\r\n     * ```\r\n     *\r\n     * @default false\r\n     * @type {boolean}\r\n     * @memberof Prism\r\n     * @public\r\n     */\n    manual: _self.Prism && _self.Prism.manual,\n    /**\r\n     * By default, if Prism is in a web worker, it assumes that it is in a worker it created itself, so it uses\r\n     * `addEventListener` to communicate with its parent instance. However, if you're using Prism manually in your\r\n     * own worker, you don't want it to do this.\r\n     *\r\n     * By setting this value to `true`, Prism will not add its own listeners to the worker.\r\n     *\r\n     * You obviously have to change this value before Prism executes. To do this, you can add an\r\n     * empty Prism object into the global scope before loading the Prism script like this:\r\n     *\r\n     * ```js\r\n     * window.Prism = window.Prism || {};\r\n     * Prism.disableWorkerMessageHandler = true;\r\n     * // Load Prism's script\r\n     * ```\r\n     *\r\n     * @default false\r\n     * @type {boolean}\r\n     * @memberof Prism\r\n     * @public\r\n     */\n    disableWorkerMessageHandler: _self.Prism && _self.Prism.disableWorkerMessageHandler,\n    /**\r\n     * A namespace for utility methods.\r\n     *\r\n     * All function in this namespace that are not explicitly marked as _public_ are for __internal use only__ and may\r\n     * change or disappear at any time.\r\n     *\r\n     * @namespace\r\n     * @memberof Prism\r\n     */\n    util: {\n      encode: function encode(tokens) {\n        if (tokens instanceof Token) {\n          return new Token(tokens.type, encode(tokens.content), tokens.alias);\n        } else if (Array.isArray(tokens)) {\n          return tokens.map(encode);\n        } else {\n          return tokens.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/\\u00a0/g, ' ');\n        }\n      },\n      /**\r\n       * Returns the name of the type of the given value.\r\n       *\r\n       * @param {any} o\r\n       * @returns {string}\r\n       * @example\r\n       * type(null)      === 'Null'\r\n       * type(undefined) === 'Undefined'\r\n       * type(123)       === 'Number'\r\n       * type('foo')     === 'String'\r\n       * type(true)      === 'Boolean'\r\n       * type([1, 2])    === 'Array'\r\n       * type({})        === 'Object'\r\n       * type(String)    === 'Function'\r\n       * type(/abc+/)    === 'RegExp'\r\n       */\n      type: function (o) {\n        return Object.prototype.toString.call(o).slice(8, -1);\n      },\n      /**\r\n       * Returns a unique number for the given object. Later calls will still return the same number.\r\n       *\r\n       * @param {Object} obj\r\n       * @returns {number}\r\n       */\n      objId: function (obj) {\n        if (!obj['__id']) {\n          Object.defineProperty(obj, '__id', {\n            value: ++uniqueId\n          });\n        }\n        return obj['__id'];\n      },\n      /**\r\n       * Creates a deep clone of the given object.\r\n       *\r\n       * The main intended use of this function is to clone language definitions.\r\n       *\r\n       * @param {T} o\r\n       * @param {Record<number, any>} [visited]\r\n       * @returns {T}\r\n       * @template T\r\n       */\n      clone: function deepClone(o, visited) {\n        visited = visited || {};\n        var clone;\n        var id;\n        switch (_.util.type(o)) {\n          case 'Object':\n            id = _.util.objId(o);\n            if (visited[id]) {\n              return visited[id];\n            }\n            clone = /** @type {Record<string, any>} */{};\n            visited[id] = clone;\n            for (var key in o) {\n              if (o.hasOwnProperty(key)) {\n                clone[key] = deepClone(o[key], visited);\n              }\n            }\n            return /** @type {any} */clone;\n          case 'Array':\n            id = _.util.objId(o);\n            if (visited[id]) {\n              return visited[id];\n            }\n            clone = [];\n            visited[id] = clone;\n            ( /** @type {Array} */ /** @type {any} */o).forEach(function (v, i) {\n              clone[i] = deepClone(v, visited);\n            });\n            return /** @type {any} */clone;\n          default:\n            return o;\n        }\n      },\n      /**\r\n       * Returns the Prism language of the given element set by a `language-xxxx` or `lang-xxxx` class.\r\n       *\r\n       * If no language is set for the element or the element is `null` or `undefined`, `none` will be returned.\r\n       *\r\n       * @param {Element} element\r\n       * @returns {string}\r\n       */\n      getLanguage: function (element) {\n        while (element) {\n          var m = lang.exec(element.className);\n          if (m) {\n            return m[1].toLowerCase();\n          }\n          element = element.parentElement;\n        }\n        return 'none';\n      },\n      /**\r\n       * Sets the Prism `language-xxxx` class of the given element.\r\n       *\r\n       * @param {Element} element\r\n       * @param {string} language\r\n       * @returns {void}\r\n       */\n      setLanguage: function (element, language) {\n        // remove all `language-xxxx` classes\n        // (this might leave behind a leading space)\n        element.className = element.className.replace(RegExp(lang, 'gi'), '');\n\n        // add the new `language-xxxx` class\n        // (using `classList` will automatically clean up spaces for us)\n        element.classList.add('language-' + language);\n      },\n      /**\r\n       * Returns the script element that is currently executing.\r\n       *\r\n       * This does __not__ work for line script element.\r\n       *\r\n       * @returns {HTMLScriptElement | null}\r\n       */\n      currentScript: function () {\n        if (typeof document === 'undefined') {\n          return null;\n        }\n        if ('currentScript' in document && 1 < 2 /* hack to trip TS' flow analysis */) {\n          return /** @type {any} */document.currentScript;\n        }\n\n        // IE11 workaround\n        // we'll get the src of the current script by parsing IE11's error stack trace\n        // this will not work for inline scripts\n\n        try {\n          throw new Error();\n        } catch (err) {\n          // Get file src url from stack. Specifically works with the format of stack traces in IE.\n          // A stack will look like this:\n          //\n          // Error\n          //    at _.util.currentScript (http://localhost/components/prism-core.js:119:5)\n          //    at Global code (http://localhost/components/prism-core.js:606:1)\n\n          var src = (/at [^(\\r\\n]*\\((.*):[^:]+:[^:]+\\)$/i.exec(err.stack) || [])[1];\n          if (src) {\n            var scripts = document.getElementsByTagName('script');\n            for (var i in scripts) {\n              if (scripts[i].src == src) {\n                return scripts[i];\n              }\n            }\n          }\n          return null;\n        }\n      },\n      /**\r\n       * Returns whether a given class is active for `element`.\r\n       *\r\n       * The class can be activated if `element` or one of its ancestors has the given class and it can be deactivated\r\n       * if `element` or one of its ancestors has the negated version of the given class. The _negated version_ of the\r\n       * given class is just the given class with a `no-` prefix.\r\n       *\r\n       * Whether the class is active is determined by the closest ancestor of `element` (where `element` itself is\r\n       * closest ancestor) that has the given class or the negated version of it. If neither `element` nor any of its\r\n       * ancestors have the given class or the negated version of it, then the default activation will be returned.\r\n       *\r\n       * In the paradoxical situation where the closest ancestor contains __both__ the given class and the negated\r\n       * version of it, the class is considered active.\r\n       *\r\n       * @param {Element} element\r\n       * @param {string} className\r\n       * @param {boolean} [defaultActivation=false]\r\n       * @returns {boolean}\r\n       */\n      isActive: function (element, className, defaultActivation) {\n        var no = 'no-' + className;\n        while (element) {\n          var classList = element.classList;\n          if (classList.contains(className)) {\n            return true;\n          }\n          if (classList.contains(no)) {\n            return false;\n          }\n          element = element.parentElement;\n        }\n        return !!defaultActivation;\n      }\n    },\n    /**\r\n     * This namespace contains all currently loaded languages and the some helper functions to create and modify languages.\r\n     *\r\n     * @namespace\r\n     * @memberof Prism\r\n     * @public\r\n     */\n    languages: {\n      /**\r\n       * The grammar for plain, unformatted text.\r\n       */\n      plain: plainTextGrammar,\n      plaintext: plainTextGrammar,\n      text: plainTextGrammar,\n      txt: plainTextGrammar,\n      /**\r\n       * Creates a deep copy of the language with the given id and appends the given tokens.\r\n       *\r\n       * If a token in `redef` also appears in the copied language, then the existing token in the copied language\r\n       * will be overwritten at its original position.\r\n       *\r\n       * ## Best practices\r\n       *\r\n       * Since the position of overwriting tokens (token in `redef` that overwrite tokens in the copied language)\r\n       * doesn't matter, they can technically be in any order. However, this can be confusing to others that trying to\r\n       * understand the language definition because, normally, the order of tokens matters in Prism grammars.\r\n       *\r\n       * Therefore, it is encouraged to order overwriting tokens according to the positions of the overwritten tokens.\r\n       * Furthermore, all non-overwriting tokens should be placed after the overwriting ones.\r\n       *\r\n       * @param {string} id The id of the language to extend. This has to be a key in `Prism.languages`.\r\n       * @param {Grammar} redef The new tokens to append.\r\n       * @returns {Grammar} The new language created.\r\n       * @public\r\n       * @example\r\n       * Prism.languages['css-with-colors'] = Prism.languages.extend('css', {\r\n       *     // Prism.languages.css already has a 'comment' token, so this token will overwrite CSS' 'comment' token\r\n       *     // at its original position\r\n       *     'comment': { ... },\r\n       *     // CSS doesn't have a 'color' token, so this token will be appended\r\n       *     'color': /\\b(?:red|green|blue)\\b/\r\n       * });\r\n       */\n      extend: function (id, redef) {\n        var lang = _.util.clone(_.languages[id]);\n        for (var key in redef) {\n          lang[key] = redef[key];\n        }\n        return lang;\n      },\n      /**\r\n       * Inserts tokens _before_ another token in a language definition or any other grammar.\r\n       *\r\n       * ## Usage\r\n       *\r\n       * This helper method makes it easy to modify existing languages. For example, the CSS language definition\r\n       * not only defines CSS highlighting for CSS documents, but also needs to define highlighting for CSS embedded\r\n       * in HTML through `<style>` elements. To do this, it needs to modify `Prism.languages.markup` and add the\r\n       * appropriate tokens. However, `Prism.languages.markup` is a regular JavaScript object literal, so if you do\r\n       * this:\r\n       *\r\n       * ```js\r\n       * Prism.languages.markup.style = {\r\n       *     // token\r\n       * };\r\n       * ```\r\n       *\r\n       * then the `style` token will be added (and processed) at the end. `insertBefore` allows you to insert tokens\r\n       * before existing tokens. For the CSS example above, you would use it like this:\r\n       *\r\n       * ```js\r\n       * Prism.languages.insertBefore('markup', 'cdata', {\r\n       *     'style': {\r\n       *         // token\r\n       *     }\r\n       * });\r\n       * ```\r\n       *\r\n       * ## Special cases\r\n       *\r\n       * If the grammars of `inside` and `insert` have tokens with the same name, the tokens in `inside`'s grammar\r\n       * will be ignored.\r\n       *\r\n       * This behavior can be used to insert tokens after `before`:\r\n       *\r\n       * ```js\r\n       * Prism.languages.insertBefore('markup', 'comment', {\r\n       *     'comment': Prism.languages.markup.comment,\r\n       *     // tokens after 'comment'\r\n       * });\r\n       * ```\r\n       *\r\n       * ## Limitations\r\n       *\r\n       * The main problem `insertBefore` has to solve is iteration order. Since ES2015, the iteration order for object\r\n       * properties is guaranteed to be the insertion order (except for integer keys) but some browsers behave\r\n       * differently when keys are deleted and re-inserted. So `insertBefore` can't be implemented by temporarily\r\n       * deleting properties which is necessary to insert at arbitrary positions.\r\n       *\r\n       * To solve this problem, `insertBefore` doesn't actually insert the given tokens into the target object.\r\n       * Instead, it will create a new object and replace all references to the target object with the new one. This\r\n       * can be done without temporarily deleting properties, so the iteration order is well-defined.\r\n       *\r\n       * However, only references that can be reached from `Prism.languages` or `insert` will be replaced. I.e. if\r\n       * you hold the target object in a variable, then the value of the variable will not change.\r\n       *\r\n       * ```js\r\n       * var oldMarkup = Prism.languages.markup;\r\n       * var newMarkup = Prism.languages.insertBefore('markup', 'comment', { ... });\r\n       *\r\n       * assert(oldMarkup !== Prism.languages.markup);\r\n       * assert(newMarkup === Prism.languages.markup);\r\n       * ```\r\n       *\r\n       * @param {string} inside The property of `root` (e.g. a language id in `Prism.languages`) that contains the\r\n       * object to be modified.\r\n       * @param {string} before The key to insert before.\r\n       * @param {Grammar} insert An object containing the key-value pairs to be inserted.\r\n       * @param {Object<string, any>} [root] The object containing `inside`, i.e. the object that contains the\r\n       * object to be modified.\r\n       *\r\n       * Defaults to `Prism.languages`.\r\n       * @returns {Grammar} The new grammar object.\r\n       * @public\r\n       */\n      insertBefore: function (inside, before, insert, root) {\n        root = root || ( /** @type {any} */_.languages);\n        var grammar = root[inside];\n        /** @type {Grammar} */\n        var ret = {};\n        for (var token in grammar) {\n          if (grammar.hasOwnProperty(token)) {\n            if (token == before) {\n              for (var newToken in insert) {\n                if (insert.hasOwnProperty(newToken)) {\n                  ret[newToken] = insert[newToken];\n                }\n              }\n            }\n\n            // Do not insert token which also occur in insert. See #1525\n            if (!insert.hasOwnProperty(token)) {\n              ret[token] = grammar[token];\n            }\n          }\n        }\n        var old = root[inside];\n        root[inside] = ret;\n\n        // Update references in other language definitions\n        _.languages.DFS(_.languages, function (key, value) {\n          if (value === old && key != inside) {\n            this[key] = ret;\n          }\n        });\n        return ret;\n      },\n      // Traverse a language definition with Depth First Search\n      DFS: function DFS(o, callback, type, visited) {\n        visited = visited || {};\n        var objId = _.util.objId;\n        for (var i in o) {\n          if (o.hasOwnProperty(i)) {\n            callback.call(o, i, o[i], type || i);\n            var property = o[i];\n            var propertyType = _.util.type(property);\n            if (propertyType === 'Object' && !visited[objId(property)]) {\n              visited[objId(property)] = true;\n              DFS(property, callback, null, visited);\n            } else if (propertyType === 'Array' && !visited[objId(property)]) {\n              visited[objId(property)] = true;\n              DFS(property, callback, i, visited);\n            }\n          }\n        }\n      }\n    },\n    plugins: {},\n    /**\r\n     * This is the most high-level function in Prism’s API.\r\n     * It fetches all the elements that have a `.language-xxxx` class and then calls {@link Prism.highlightElement} on\r\n     * each one of them.\r\n     *\r\n     * This is equivalent to `Prism.highlightAllUnder(document, async, callback)`.\r\n     *\r\n     * @param {boolean} [async=false] Same as in {@link Prism.highlightAllUnder}.\r\n     * @param {HighlightCallback} [callback] Same as in {@link Prism.highlightAllUnder}.\r\n     * @memberof Prism\r\n     * @public\r\n     */\n    highlightAll: function (async, callback) {\n      _.highlightAllUnder(document, async, callback);\n    },\n    /**\r\n     * Fetches all the descendants of `container` that have a `.language-xxxx` class and then calls\r\n     * {@link Prism.highlightElement} on each one of them.\r\n     *\r\n     * The following hooks will be run:\r\n     * 1. `before-highlightall`\r\n     * 2. `before-all-elements-highlight`\r\n     * 3. All hooks of {@link Prism.highlightElement} for each element.\r\n     *\r\n     * @param {ParentNode} container The root element, whose descendants that have a `.language-xxxx` class will be highlighted.\r\n     * @param {boolean} [async=false] Whether each element is to be highlighted asynchronously using Web Workers.\r\n     * @param {HighlightCallback} [callback] An optional callback to be invoked on each element after its highlighting is done.\r\n     * @memberof Prism\r\n     * @public\r\n     */\n    highlightAllUnder: function (container, async, callback) {\n      var env = {\n        callback: callback,\n        container: container,\n        selector: 'code[class*=\"language-\"], [class*=\"language-\"] code, code[class*=\"lang-\"], [class*=\"lang-\"] code'\n      };\n      _.hooks.run('before-highlightall', env);\n      env.elements = Array.prototype.slice.apply(env.container.querySelectorAll(env.selector));\n      _.hooks.run('before-all-elements-highlight', env);\n      for (var i = 0, element; element = env.elements[i++];) {\n        _.highlightElement(element, async === true, env.callback);\n      }\n    },\n    /**\r\n     * Highlights the code inside a single element.\r\n     *\r\n     * The following hooks will be run:\r\n     * 1. `before-sanity-check`\r\n     * 2. `before-highlight`\r\n     * 3. All hooks of {@link Prism.highlight}. These hooks will be run by an asynchronous worker if `async` is `true`.\r\n     * 4. `before-insert`\r\n     * 5. `after-highlight`\r\n     * 6. `complete`\r\n     *\r\n     * Some the above hooks will be skipped if the element doesn't contain any text or there is no grammar loaded for\r\n     * the element's language.\r\n     *\r\n     * @param {Element} element The element containing the code.\r\n     * It must have a class of `language-xxxx` to be processed, where `xxxx` is a valid language identifier.\r\n     * @param {boolean} [async=false] Whether the element is to be highlighted asynchronously using Web Workers\r\n     * to improve performance and avoid blocking the UI when highlighting very large chunks of code. This option is\r\n     * [disabled by default](https://prismjs.com/faq.html#why-is-asynchronous-highlighting-disabled-by-default).\r\n     *\r\n     * Note: All language definitions required to highlight the code must be included in the main `prism.js` file for\r\n     * asynchronous highlighting to work. You can build your own bundle on the\r\n     * [Download page](https://prismjs.com/download.html).\r\n     * @param {HighlightCallback} [callback] An optional callback to be invoked after the highlighting is done.\r\n     * Mostly useful when `async` is `true`, since in that case, the highlighting is done asynchronously.\r\n     * @memberof Prism\r\n     * @public\r\n     */\n    highlightElement: function (element, async, callback) {\n      // Find language\n      var language = _.util.getLanguage(element);\n      var grammar = _.languages[language];\n\n      // Set language on the element, if not present\n      _.util.setLanguage(element, language);\n\n      // Set language on the parent, for styling\n      var parent = element.parentElement;\n      if (parent && parent.nodeName.toLowerCase() === 'pre') {\n        _.util.setLanguage(parent, language);\n      }\n      var code = element.textContent;\n      var env = {\n        element: element,\n        language: language,\n        grammar: grammar,\n        code: code\n      };\n      function insertHighlightedCode(highlightedCode) {\n        env.highlightedCode = highlightedCode;\n        _.hooks.run('before-insert', env);\n        env.element.innerHTML = env.highlightedCode;\n        _.hooks.run('after-highlight', env);\n        _.hooks.run('complete', env);\n        callback && callback.call(env.element);\n      }\n      _.hooks.run('before-sanity-check', env);\n\n      // plugins may change/add the parent/element\n      parent = env.element.parentElement;\n      if (parent && parent.nodeName.toLowerCase() === 'pre' && !parent.hasAttribute('tabindex')) {\n        parent.setAttribute('tabindex', '0');\n      }\n      if (!env.code) {\n        _.hooks.run('complete', env);\n        callback && callback.call(env.element);\n        return;\n      }\n      _.hooks.run('before-highlight', env);\n      if (!env.grammar) {\n        insertHighlightedCode(_.util.encode(env.code));\n        return;\n      }\n      if (async && _self.Worker) {\n        var worker = new Worker(_.filename);\n        worker.onmessage = function (evt) {\n          insertHighlightedCode(evt.data);\n        };\n        worker.postMessage(JSON.stringify({\n          language: env.language,\n          code: env.code,\n          immediateClose: true\n        }));\n      } else {\n        insertHighlightedCode(_.highlight(env.code, env.grammar, env.language));\n      }\n    },\n    /**\r\n     * Low-level function, only use if you know what you’re doing. It accepts a string of text as input\r\n     * and the language definitions to use, and returns a string with the HTML produced.\r\n     *\r\n     * The following hooks will be run:\r\n     * 1. `before-tokenize`\r\n     * 2. `after-tokenize`\r\n     * 3. `wrap`: On each {@link Token}.\r\n     *\r\n     * @param {string} text A string with the code to be highlighted.\r\n     * @param {Grammar} grammar An object containing the tokens to use.\r\n     *\r\n     * Usually a language definition like `Prism.languages.markup`.\r\n     * @param {string} language The name of the language definition passed to `grammar`.\r\n     * @returns {string} The highlighted HTML.\r\n     * @memberof Prism\r\n     * @public\r\n     * @example\r\n     * Prism.highlight('var foo = true;', Prism.languages.javascript, 'javascript');\r\n     */\n    highlight: function (text, grammar, language) {\n      var env = {\n        code: text,\n        grammar: grammar,\n        language: language\n      };\n      _.hooks.run('before-tokenize', env);\n      if (!env.grammar) {\n        throw new Error('The language \"' + env.language + '\" has no grammar.');\n      }\n      env.tokens = _.tokenize(env.code, env.grammar);\n      _.hooks.run('after-tokenize', env);\n      return Token.stringify(_.util.encode(env.tokens), env.language);\n    },\n    /**\r\n     * This is the heart of Prism, and the most low-level function you can use. It accepts a string of text as input\r\n     * and the language definitions to use, and returns an array with the tokenized code.\r\n     *\r\n     * When the language definition includes nested tokens, the function is called recursively on each of these tokens.\r\n     *\r\n     * This method could be useful in other contexts as well, as a very crude parser.\r\n     *\r\n     * @param {string} text A string with the code to be highlighted.\r\n     * @param {Grammar} grammar An object containing the tokens to use.\r\n     *\r\n     * Usually a language definition like `Prism.languages.markup`.\r\n     * @returns {TokenStream} An array of strings and tokens, a token stream.\r\n     * @memberof Prism\r\n     * @public\r\n     * @example\r\n     * let code = `var foo = 0;`;\r\n     * let tokens = Prism.tokenize(code, Prism.languages.javascript);\r\n     * tokens.forEach(token => {\r\n     *     if (token instanceof Prism.Token && token.type === 'number') {\r\n     *         console.log(`Found numeric literal: ${token.content}`);\r\n     *     }\r\n     * });\r\n     */\n    tokenize: function (text, grammar) {\n      var rest = grammar.rest;\n      if (rest) {\n        for (var token in rest) {\n          grammar[token] = rest[token];\n        }\n        delete grammar.rest;\n      }\n      var tokenList = new LinkedList();\n      addAfter(tokenList, tokenList.head, text);\n      matchGrammar(text, tokenList, grammar, tokenList.head, 0);\n      return toArray(tokenList);\n    },\n    /**\r\n     * @namespace\r\n     * @memberof Prism\r\n     * @public\r\n     */\n    hooks: {\n      all: {},\n      /**\r\n       * Adds the given callback to the list of callbacks for the given hook.\r\n       *\r\n       * The callback will be invoked when the hook it is registered for is run.\r\n       * Hooks are usually directly run by a highlight function but you can also run hooks yourself.\r\n       *\r\n       * One callback function can be registered to multiple hooks and the same hook multiple times.\r\n       *\r\n       * @param {string} name The name of the hook.\r\n       * @param {HookCallback} callback The callback function which is given environment variables.\r\n       * @public\r\n       */\n      add: function (name, callback) {\n        var hooks = _.hooks.all;\n        hooks[name] = hooks[name] || [];\n        hooks[name].push(callback);\n      },\n      /**\r\n       * Runs a hook invoking all registered callbacks with the given environment variables.\r\n       *\r\n       * Callbacks will be invoked synchronously and in the order in which they were registered.\r\n       *\r\n       * @param {string} name The name of the hook.\r\n       * @param {Object<string, any>} env The environment variables of the hook passed to all callbacks registered.\r\n       * @public\r\n       */\n      run: function (name, env) {\n        var callbacks = _.hooks.all[name];\n        if (!callbacks || !callbacks.length) {\n          return;\n        }\n        for (var i = 0, callback; callback = callbacks[i++];) {\n          callback(env);\n        }\n      }\n    },\n    Token: Token\n  };\n  _self.Prism = _;\n\n  // Typescript note:\n  // The following can be used to import the Token type in JSDoc:\n  //\n  //   @typedef {InstanceType<import(\"./prism-core\")[\"Token\"]>} Token\n\n  /**\r\n   * Creates a new token.\r\n   *\r\n   * @param {string} type See {@link Token#type type}\r\n   * @param {string | TokenStream} content See {@link Token#content content}\r\n   * @param {string|string[]} [alias] The alias(es) of the token.\r\n   * @param {string} [matchedStr=\"\"] A copy of the full string this token was created from.\r\n   * @class\r\n   * @global\r\n   * @public\r\n   */\n  function Token(type, content, alias, matchedStr) {\n    /**\r\n     * The type of the token.\r\n     *\r\n     * This is usually the key of a pattern in a {@link Grammar}.\r\n     *\r\n     * @type {string}\r\n     * @see GrammarToken\r\n     * @public\r\n     */\n    this.type = type;\n    /**\r\n     * The strings or tokens contained by this token.\r\n     *\r\n     * This will be a token stream if the pattern matched also defined an `inside` grammar.\r\n     *\r\n     * @type {string | TokenStream}\r\n     * @public\r\n     */\n    this.content = content;\n    /**\r\n     * The alias(es) of the token.\r\n     *\r\n     * @type {string|string[]}\r\n     * @see GrammarToken\r\n     * @public\r\n     */\n    this.alias = alias;\n    // Copy of the full string this token was created from\n    this.length = (matchedStr || '').length | 0;\n  }\n\n  /**\r\n   * A token stream is an array of strings and {@link Token Token} objects.\r\n   *\r\n   * Token streams have to fulfill a few properties that are assumed by most functions (mostly internal ones) that process\r\n   * them.\r\n   *\r\n   * 1. No adjacent strings.\r\n   * 2. No empty strings.\r\n   *\r\n   *    The only exception here is the token stream that only contains the empty string and nothing else.\r\n   *\r\n   * @typedef {Array<string | Token>} TokenStream\r\n   * @global\r\n   * @public\r\n   */\n\n  /**\r\n   * Converts the given token or token stream to an HTML representation.\r\n   *\r\n   * The following hooks will be run:\r\n   * 1. `wrap`: On each {@link Token}.\r\n   *\r\n   * @param {string | Token | TokenStream} o The token or token stream to be converted.\r\n   * @param {string} language The name of current language.\r\n   * @returns {string} The HTML representation of the token or token stream.\r\n   * @memberof Token\r\n   * @static\r\n   */\n  Token.stringify = function stringify(o, language) {\n    if (typeof o == 'string') {\n      return o;\n    }\n    if (Array.isArray(o)) {\n      var s = '';\n      o.forEach(function (e) {\n        s += stringify(e, language);\n      });\n      return s;\n    }\n    var env = {\n      type: o.type,\n      content: stringify(o.content, language),\n      tag: 'span',\n      classes: ['token', o.type],\n      attributes: {},\n      language: language\n    };\n    var aliases = o.alias;\n    if (aliases) {\n      if (Array.isArray(aliases)) {\n        Array.prototype.push.apply(env.classes, aliases);\n      } else {\n        env.classes.push(aliases);\n      }\n    }\n    _.hooks.run('wrap', env);\n    var attributes = '';\n    for (var name in env.attributes) {\n      attributes += ' ' + name + '=\"' + (env.attributes[name] || '').replace(/\"/g, '&quot;') + '\"';\n    }\n    return '<' + env.tag + ' class=\"' + env.classes.join(' ') + '\"' + attributes + '>' + env.content + '</' + env.tag + '>';\n  };\n\n  /**\r\n   * @param {RegExp} pattern\r\n   * @param {number} pos\r\n   * @param {string} text\r\n   * @param {boolean} lookbehind\r\n   * @returns {RegExpExecArray | null}\r\n   */\n  function matchPattern(pattern, pos, text, lookbehind) {\n    pattern.lastIndex = pos;\n    var match = pattern.exec(text);\n    if (match && lookbehind && match[1]) {\n      // change the match to remove the text matched by the Prism lookbehind group\n      var lookbehindLength = match[1].length;\n      match.index += lookbehindLength;\n      match[0] = match[0].slice(lookbehindLength);\n    }\n    return match;\n  }\n\n  /**\r\n   * @param {string} text\r\n   * @param {LinkedList<string | Token>} tokenList\r\n   * @param {any} grammar\r\n   * @param {LinkedListNode<string | Token>} startNode\r\n   * @param {number} startPos\r\n   * @param {RematchOptions} [rematch]\r\n   * @returns {void}\r\n   * @private\r\n   *\r\n   * @typedef RematchOptions\r\n   * @property {string} cause\r\n   * @property {number} reach\r\n   */\n  function matchGrammar(text, tokenList, grammar, startNode, startPos, rematch) {\n    for (var token in grammar) {\n      if (!grammar.hasOwnProperty(token) || !grammar[token]) {\n        continue;\n      }\n      var patterns = grammar[token];\n      patterns = Array.isArray(patterns) ? patterns : [patterns];\n      for (var j = 0; j < patterns.length; ++j) {\n        if (rematch && rematch.cause == token + ',' + j) {\n          return;\n        }\n        var patternObj = patterns[j];\n        var inside = patternObj.inside;\n        var lookbehind = !!patternObj.lookbehind;\n        var greedy = !!patternObj.greedy;\n        var alias = patternObj.alias;\n        if (greedy && !patternObj.pattern.global) {\n          // Without the global flag, lastIndex won't work\n          var flags = patternObj.pattern.toString().match(/[imsuy]*$/)[0];\n          patternObj.pattern = RegExp(patternObj.pattern.source, flags + 'g');\n        }\n\n        /** @type {RegExp} */\n        var pattern = patternObj.pattern || patternObj;\n        for (\n        // iterate the token list and keep track of the current token/string position\n        var currentNode = startNode.next, pos = startPos; currentNode !== tokenList.tail; pos += currentNode.value.length, currentNode = currentNode.next) {\n          if (rematch && pos >= rematch.reach) {\n            break;\n          }\n          var str = currentNode.value;\n          if (tokenList.length > text.length) {\n            // Something went terribly wrong, ABORT, ABORT!\n            return;\n          }\n          if (str instanceof Token) {\n            continue;\n          }\n          var removeCount = 1; // this is the to parameter of removeBetween\n          var match;\n          if (greedy) {\n            match = matchPattern(pattern, pos, text, lookbehind);\n            if (!match || match.index >= text.length) {\n              break;\n            }\n            var from = match.index;\n            var to = match.index + match[0].length;\n            var p = pos;\n\n            // find the node that contains the match\n            p += currentNode.value.length;\n            while (from >= p) {\n              currentNode = currentNode.next;\n              p += currentNode.value.length;\n            }\n            // adjust pos (and p)\n            p -= currentNode.value.length;\n            pos = p;\n\n            // the current node is a Token, then the match starts inside another Token, which is invalid\n            if (currentNode.value instanceof Token) {\n              continue;\n            }\n\n            // find the last node which is affected by this match\n            for (var k = currentNode; k !== tokenList.tail && (p < to || typeof k.value === 'string'); k = k.next) {\n              removeCount++;\n              p += k.value.length;\n            }\n            removeCount--;\n\n            // replace with the new match\n            str = text.slice(pos, p);\n            match.index -= pos;\n          } else {\n            match = matchPattern(pattern, 0, str, lookbehind);\n            if (!match) {\n              continue;\n            }\n          }\n\n          // eslint-disable-next-line no-redeclare\n          var from = match.index;\n          var matchStr = match[0];\n          var before = str.slice(0, from);\n          var after = str.slice(from + matchStr.length);\n          var reach = pos + str.length;\n          if (rematch && reach > rematch.reach) {\n            rematch.reach = reach;\n          }\n          var removeFrom = currentNode.prev;\n          if (before) {\n            removeFrom = addAfter(tokenList, removeFrom, before);\n            pos += before.length;\n          }\n          removeRange(tokenList, removeFrom, removeCount);\n          var wrapped = new Token(token, inside ? _.tokenize(matchStr, inside) : matchStr, alias, matchStr);\n          currentNode = addAfter(tokenList, removeFrom, wrapped);\n          if (after) {\n            addAfter(tokenList, currentNode, after);\n          }\n          if (removeCount > 1) {\n            // at least one Token object was removed, so we have to do some rematching\n            // this can only happen if the current pattern is greedy\n\n            /** @type {RematchOptions} */\n            var nestedRematch = {\n              cause: token + ',' + j,\n              reach: reach\n            };\n            matchGrammar(text, tokenList, grammar, currentNode.prev, pos, nestedRematch);\n\n            // the reach might have been extended because of the rematching\n            if (rematch && nestedRematch.reach > rematch.reach) {\n              rematch.reach = nestedRematch.reach;\n            }\n          }\n        }\n      }\n    }\n  }\n\n  /**\r\n   * @typedef LinkedListNode\r\n   * @property {T} value\r\n   * @property {LinkedListNode<T> | null} prev The previous node.\r\n   * @property {LinkedListNode<T> | null} next The next node.\r\n   * @template T\r\n   * @private\r\n   */\n\n  /**\r\n   * @template T\r\n   * @private\r\n   */\n  function LinkedList() {\n    /** @type {LinkedListNode<T>} */\n    var head = {\n      value: null,\n      prev: null,\n      next: null\n    };\n    /** @type {LinkedListNode<T>} */\n    var tail = {\n      value: null,\n      prev: head,\n      next: null\n    };\n    head.next = tail;\n\n    /** @type {LinkedListNode<T>} */\n    this.head = head;\n    /** @type {LinkedListNode<T>} */\n    this.tail = tail;\n    this.length = 0;\n  }\n\n  /**\r\n   * Adds a new node with the given value to the list.\r\n   *\r\n   * @param {LinkedList<T>} list\r\n   * @param {LinkedListNode<T>} node\r\n   * @param {T} value\r\n   * @returns {LinkedListNode<T>} The added node.\r\n   * @template T\r\n   */\n  function addAfter(list, node, value) {\n    // assumes that node != list.tail && values.length >= 0\n    var next = node.next;\n    var newNode = {\n      value: value,\n      prev: node,\n      next: next\n    };\n    node.next = newNode;\n    next.prev = newNode;\n    list.length++;\n    return newNode;\n  }\n  /**\r\n   * Removes `count` nodes after the given node. The given node will not be removed.\r\n   *\r\n   * @param {LinkedList<T>} list\r\n   * @param {LinkedListNode<T>} node\r\n   * @param {number} count\r\n   * @template T\r\n   */\n  function removeRange(list, node, count) {\n    var next = node.next;\n    for (var i = 0; i < count && next !== list.tail; i++) {\n      next = next.next;\n    }\n    node.next = next;\n    next.prev = node;\n    list.length -= i;\n  }\n  /**\r\n   * @param {LinkedList<T>} list\r\n   * @returns {T[]}\r\n   * @template T\r\n   */\n  function toArray(list) {\n    var array = [];\n    var node = list.head.next;\n    while (node !== list.tail) {\n      array.push(node.value);\n      node = node.next;\n    }\n    return array;\n  }\n  if (!_self.document) {\n    if (!_self.addEventListener) {\n      // in Node.js\n      return _;\n    }\n    if (!_.disableWorkerMessageHandler) {\n      // In worker\n      _self.addEventListener('message', function (evt) {\n        var message = JSON.parse(evt.data);\n        var lang = message.language;\n        var code = message.code;\n        var immediateClose = message.immediateClose;\n        _self.postMessage(_.highlight(code, _.languages[lang], lang));\n        if (immediateClose) {\n          _self.close();\n        }\n      }, false);\n    }\n    return _;\n  }\n\n  // Get current script and highlight\n  var script = _.util.currentScript();\n  if (script) {\n    _.filename = script.src;\n    if (script.hasAttribute('data-manual')) {\n      _.manual = true;\n    }\n  }\n  function highlightAutomaticallyCallback() {\n    if (!_.manual) {\n      _.highlightAll();\n    }\n  }\n  if (!_.manual) {\n    // If the document state is \"loading\", then we'll use DOMContentLoaded.\n    // If the document state is \"interactive\" and the prism.js script is deferred, then we'll also use the\n    // DOMContentLoaded event because there might be some plugins or languages which have also been deferred and they\n    // might take longer one animation frame to execute which can create a race condition where only some plugins have\n    // been loaded when Prism.highlightAll() is executed, depending on how fast resources are loaded.\n    // See https://github.com/PrismJS/prism/issues/2102\n    var readyState = document.readyState;\n    if (readyState === 'loading' || readyState === 'interactive' && script && script.defer) {\n      document.addEventListener('DOMContentLoaded', highlightAutomaticallyCallback);\n    } else {\n      if (window.requestAnimationFrame) {\n        window.requestAnimationFrame(highlightAutomaticallyCallback);\n      } else {\n        window.setTimeout(highlightAutomaticallyCallback, 16);\n      }\n    }\n  }\n  return _;\n}(_self);\nif (typeof module !== 'undefined' && module.exports) {\n  module.exports = Prism;\n}\n\n// hack for components to work correctly in node.js\nif (typeof global !== 'undefined') {\n  global.Prism = Prism;\n}\n\n// some additional documentation/types\n\n/**\r\n * The expansion of a simple `RegExp` literal to support additional properties.\r\n *\r\n * @typedef GrammarToken\r\n * @property {RegExp} pattern The regular expression of the token.\r\n * @property {boolean} [lookbehind=false] If `true`, then the first capturing group of `pattern` will (effectively)\r\n * behave as a lookbehind group meaning that the captured text will not be part of the matched text of the new token.\r\n * @property {boolean} [greedy=false] Whether the token is greedy.\r\n * @property {string|string[]} [alias] An optional alias or list of aliases.\r\n * @property {Grammar} [inside] The nested grammar of this token.\r\n *\r\n * The `inside` grammar will be used to tokenize the text value of each token of this kind.\r\n *\r\n * This can be used to make nested and even recursive language definitions.\r\n *\r\n * Note: This can cause infinite recursion. Be careful when you embed different languages or even the same language into\r\n * each another.\r\n * @global\r\n * @public\r\n */\n\n/**\r\n * @typedef Grammar\r\n * @type {Object<string, RegExp | GrammarToken | Array<RegExp | GrammarToken>>}\r\n * @property {Grammar} [rest] An optional grammar object that will be appended to this grammar.\r\n * @global\r\n * @public\r\n */\n\n/**\r\n * A function which will invoked after an element was successfully highlighted.\r\n *\r\n * @callback HighlightCallback\r\n * @param {Element} element The element successfully highlighted.\r\n * @returns {void}\r\n * @global\r\n * @public\r\n */\n\n/**\r\n * @callback HookCallback\r\n * @param {Object<string, any>} env The environment variables of the hook.\r\n * @returns {void}\r\n * @global\r\n * @public\r\n */","map":{"version":3,"names":["_self","window","WorkerGlobalScope","self","Prism","lang","uniqueId","plainTextGrammar","_","manual","disableWorkerMessageHandler","util","encode","tokens","Token","type","content","alias","Array","isArray","map","replace","o","Object","prototype","toString","call","slice","objId","obj","defineProperty","value","clone","deepClone","visited","id","key","hasOwnProperty","forEach","v","i","getLanguage","element","m","exec","className","toLowerCase","parentElement","setLanguage","language","RegExp","classList","add","currentScript","document","Error","err","src","stack","scripts","getElementsByTagName","isActive","defaultActivation","no","contains","languages","plain","plaintext","text","txt","extend","redef","insertBefore","inside","before","insert","root","grammar","ret","token","newToken","old","DFS","callback","property","propertyType","plugins","highlightAll","async","highlightAllUnder","container","env","selector","hooks","run","elements","apply","querySelectorAll","highlightElement","parent","nodeName","code","textContent","insertHighlightedCode","highlightedCode","innerHTML","hasAttribute","setAttribute","Worker","worker","filename","onmessage","evt","data","postMessage","JSON","stringify","immediateClose","highlight","tokenize","rest","tokenList","LinkedList","addAfter","head","matchGrammar","toArray","all","name","push","callbacks","length","matchedStr","s","e","tag","classes","attributes","aliases","join","matchPattern","pattern","pos","lookbehind","lastIndex","match","lookbehindLength","index","startNode","startPos","rematch","patterns","j","cause","patternObj","greedy","global","flags","source","currentNode","next","tail","reach","str","removeCount","from","to","p","k","matchStr","after","removeFrom","prev","removeRange","wrapped","nestedRematch","list","node","newNode","count","array","addEventListener","message","parse","close","script","highlightAutomaticallyCallback","readyState","defer","requestAnimationFrame","setTimeout","module","exports"],"sources":["C:/Users/rjalr/OneDrive/바탕 화면/ybigta/ybigta_blog_2/Ybigta-Blog/frontend/node_modules/refractor/node_modules/prismjs/components/prism-core.js"],"sourcesContent":["/// <reference lib=\"WebWorker\"/>\r\n\r\nvar _self = (typeof window !== 'undefined')\r\n\t? window   // if in browser\r\n\t: (\r\n\t\t(typeof WorkerGlobalScope !== 'undefined' && self instanceof WorkerGlobalScope)\r\n\t\t\t? self // if in worker\r\n\t\t\t: {}   // if in node js\r\n\t);\r\n\r\n/**\r\n * Prism: Lightweight, robust, elegant syntax highlighting\r\n *\r\n * @license MIT <https://opensource.org/licenses/MIT>\r\n * @author Lea Verou <https://lea.verou.me>\r\n * @namespace\r\n * @public\r\n */\r\nvar Prism = (function (_self) {\r\n\r\n\t// Private helper vars\r\n\tvar lang = /(?:^|\\s)lang(?:uage)?-([\\w-]+)(?=\\s|$)/i;\r\n\tvar uniqueId = 0;\r\n\r\n\t// The grammar object for plaintext\r\n\tvar plainTextGrammar = {};\r\n\r\n\r\n\tvar _ = {\r\n\t\t/**\r\n\t\t * By default, Prism will attempt to highlight all code elements (by calling {@link Prism.highlightAll}) on the\r\n\t\t * current page after the page finished loading. This might be a problem if e.g. you wanted to asynchronously load\r\n\t\t * additional languages or plugins yourself.\r\n\t\t *\r\n\t\t * By setting this value to `true`, Prism will not automatically highlight all code elements on the page.\r\n\t\t *\r\n\t\t * You obviously have to change this value before the automatic highlighting started. To do this, you can add an\r\n\t\t * empty Prism object into the global scope before loading the Prism script like this:\r\n\t\t *\r\n\t\t * ```js\r\n\t\t * window.Prism = window.Prism || {};\r\n\t\t * Prism.manual = true;\r\n\t\t * // add a new <script> to load Prism's script\r\n\t\t * ```\r\n\t\t *\r\n\t\t * @default false\r\n\t\t * @type {boolean}\r\n\t\t * @memberof Prism\r\n\t\t * @public\r\n\t\t */\r\n\t\tmanual: _self.Prism && _self.Prism.manual,\r\n\t\t/**\r\n\t\t * By default, if Prism is in a web worker, it assumes that it is in a worker it created itself, so it uses\r\n\t\t * `addEventListener` to communicate with its parent instance. However, if you're using Prism manually in your\r\n\t\t * own worker, you don't want it to do this.\r\n\t\t *\r\n\t\t * By setting this value to `true`, Prism will not add its own listeners to the worker.\r\n\t\t *\r\n\t\t * You obviously have to change this value before Prism executes. To do this, you can add an\r\n\t\t * empty Prism object into the global scope before loading the Prism script like this:\r\n\t\t *\r\n\t\t * ```js\r\n\t\t * window.Prism = window.Prism || {};\r\n\t\t * Prism.disableWorkerMessageHandler = true;\r\n\t\t * // Load Prism's script\r\n\t\t * ```\r\n\t\t *\r\n\t\t * @default false\r\n\t\t * @type {boolean}\r\n\t\t * @memberof Prism\r\n\t\t * @public\r\n\t\t */\r\n\t\tdisableWorkerMessageHandler: _self.Prism && _self.Prism.disableWorkerMessageHandler,\r\n\r\n\t\t/**\r\n\t\t * A namespace for utility methods.\r\n\t\t *\r\n\t\t * All function in this namespace that are not explicitly marked as _public_ are for __internal use only__ and may\r\n\t\t * change or disappear at any time.\r\n\t\t *\r\n\t\t * @namespace\r\n\t\t * @memberof Prism\r\n\t\t */\r\n\t\tutil: {\r\n\t\t\tencode: function encode(tokens) {\r\n\t\t\t\tif (tokens instanceof Token) {\r\n\t\t\t\t\treturn new Token(tokens.type, encode(tokens.content), tokens.alias);\r\n\t\t\t\t} else if (Array.isArray(tokens)) {\r\n\t\t\t\t\treturn tokens.map(encode);\r\n\t\t\t\t} else {\r\n\t\t\t\t\treturn tokens.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/\\u00a0/g, ' ');\r\n\t\t\t\t}\r\n\t\t\t},\r\n\r\n\t\t\t/**\r\n\t\t\t * Returns the name of the type of the given value.\r\n\t\t\t *\r\n\t\t\t * @param {any} o\r\n\t\t\t * @returns {string}\r\n\t\t\t * @example\r\n\t\t\t * type(null)      === 'Null'\r\n\t\t\t * type(undefined) === 'Undefined'\r\n\t\t\t * type(123)       === 'Number'\r\n\t\t\t * type('foo')     === 'String'\r\n\t\t\t * type(true)      === 'Boolean'\r\n\t\t\t * type([1, 2])    === 'Array'\r\n\t\t\t * type({})        === 'Object'\r\n\t\t\t * type(String)    === 'Function'\r\n\t\t\t * type(/abc+/)    === 'RegExp'\r\n\t\t\t */\r\n\t\t\ttype: function (o) {\r\n\t\t\t\treturn Object.prototype.toString.call(o).slice(8, -1);\r\n\t\t\t},\r\n\r\n\t\t\t/**\r\n\t\t\t * Returns a unique number for the given object. Later calls will still return the same number.\r\n\t\t\t *\r\n\t\t\t * @param {Object} obj\r\n\t\t\t * @returns {number}\r\n\t\t\t */\r\n\t\t\tobjId: function (obj) {\r\n\t\t\t\tif (!obj['__id']) {\r\n\t\t\t\t\tObject.defineProperty(obj, '__id', { value: ++uniqueId });\r\n\t\t\t\t}\r\n\t\t\t\treturn obj['__id'];\r\n\t\t\t},\r\n\r\n\t\t\t/**\r\n\t\t\t * Creates a deep clone of the given object.\r\n\t\t\t *\r\n\t\t\t * The main intended use of this function is to clone language definitions.\r\n\t\t\t *\r\n\t\t\t * @param {T} o\r\n\t\t\t * @param {Record<number, any>} [visited]\r\n\t\t\t * @returns {T}\r\n\t\t\t * @template T\r\n\t\t\t */\r\n\t\t\tclone: function deepClone(o, visited) {\r\n\t\t\t\tvisited = visited || {};\r\n\r\n\t\t\t\tvar clone; var id;\r\n\t\t\t\tswitch (_.util.type(o)) {\r\n\t\t\t\t\tcase 'Object':\r\n\t\t\t\t\t\tid = _.util.objId(o);\r\n\t\t\t\t\t\tif (visited[id]) {\r\n\t\t\t\t\t\t\treturn visited[id];\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tclone = /** @type {Record<string, any>} */ ({});\r\n\t\t\t\t\t\tvisited[id] = clone;\r\n\r\n\t\t\t\t\t\tfor (var key in o) {\r\n\t\t\t\t\t\t\tif (o.hasOwnProperty(key)) {\r\n\t\t\t\t\t\t\t\tclone[key] = deepClone(o[key], visited);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\treturn /** @type {any} */ (clone);\r\n\r\n\t\t\t\t\tcase 'Array':\r\n\t\t\t\t\t\tid = _.util.objId(o);\r\n\t\t\t\t\t\tif (visited[id]) {\r\n\t\t\t\t\t\t\treturn visited[id];\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tclone = [];\r\n\t\t\t\t\t\tvisited[id] = clone;\r\n\r\n\t\t\t\t\t\t(/** @type {Array} */(/** @type {any} */(o))).forEach(function (v, i) {\r\n\t\t\t\t\t\t\tclone[i] = deepClone(v, visited);\r\n\t\t\t\t\t\t});\r\n\r\n\t\t\t\t\t\treturn /** @type {any} */ (clone);\r\n\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\treturn o;\r\n\t\t\t\t}\r\n\t\t\t},\r\n\r\n\t\t\t/**\r\n\t\t\t * Returns the Prism language of the given element set by a `language-xxxx` or `lang-xxxx` class.\r\n\t\t\t *\r\n\t\t\t * If no language is set for the element or the element is `null` or `undefined`, `none` will be returned.\r\n\t\t\t *\r\n\t\t\t * @param {Element} element\r\n\t\t\t * @returns {string}\r\n\t\t\t */\r\n\t\t\tgetLanguage: function (element) {\r\n\t\t\t\twhile (element) {\r\n\t\t\t\t\tvar m = lang.exec(element.className);\r\n\t\t\t\t\tif (m) {\r\n\t\t\t\t\t\treturn m[1].toLowerCase();\r\n\t\t\t\t\t}\r\n\t\t\t\t\telement = element.parentElement;\r\n\t\t\t\t}\r\n\t\t\t\treturn 'none';\r\n\t\t\t},\r\n\r\n\t\t\t/**\r\n\t\t\t * Sets the Prism `language-xxxx` class of the given element.\r\n\t\t\t *\r\n\t\t\t * @param {Element} element\r\n\t\t\t * @param {string} language\r\n\t\t\t * @returns {void}\r\n\t\t\t */\r\n\t\t\tsetLanguage: function (element, language) {\r\n\t\t\t\t// remove all `language-xxxx` classes\r\n\t\t\t\t// (this might leave behind a leading space)\r\n\t\t\t\telement.className = element.className.replace(RegExp(lang, 'gi'), '');\r\n\r\n\t\t\t\t// add the new `language-xxxx` class\r\n\t\t\t\t// (using `classList` will automatically clean up spaces for us)\r\n\t\t\t\telement.classList.add('language-' + language);\r\n\t\t\t},\r\n\r\n\t\t\t/**\r\n\t\t\t * Returns the script element that is currently executing.\r\n\t\t\t *\r\n\t\t\t * This does __not__ work for line script element.\r\n\t\t\t *\r\n\t\t\t * @returns {HTMLScriptElement | null}\r\n\t\t\t */\r\n\t\t\tcurrentScript: function () {\r\n\t\t\t\tif (typeof document === 'undefined') {\r\n\t\t\t\t\treturn null;\r\n\t\t\t\t}\r\n\t\t\t\tif ('currentScript' in document && 1 < 2 /* hack to trip TS' flow analysis */) {\r\n\t\t\t\t\treturn /** @type {any} */ (document.currentScript);\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// IE11 workaround\r\n\t\t\t\t// we'll get the src of the current script by parsing IE11's error stack trace\r\n\t\t\t\t// this will not work for inline scripts\r\n\r\n\t\t\t\ttry {\r\n\t\t\t\t\tthrow new Error();\r\n\t\t\t\t} catch (err) {\r\n\t\t\t\t\t// Get file src url from stack. Specifically works with the format of stack traces in IE.\r\n\t\t\t\t\t// A stack will look like this:\r\n\t\t\t\t\t//\r\n\t\t\t\t\t// Error\r\n\t\t\t\t\t//    at _.util.currentScript (http://localhost/components/prism-core.js:119:5)\r\n\t\t\t\t\t//    at Global code (http://localhost/components/prism-core.js:606:1)\r\n\r\n\t\t\t\t\tvar src = (/at [^(\\r\\n]*\\((.*):[^:]+:[^:]+\\)$/i.exec(err.stack) || [])[1];\r\n\t\t\t\t\tif (src) {\r\n\t\t\t\t\t\tvar scripts = document.getElementsByTagName('script');\r\n\t\t\t\t\t\tfor (var i in scripts) {\r\n\t\t\t\t\t\t\tif (scripts[i].src == src) {\r\n\t\t\t\t\t\t\t\treturn scripts[i];\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn null;\r\n\t\t\t\t}\r\n\t\t\t},\r\n\r\n\t\t\t/**\r\n\t\t\t * Returns whether a given class is active for `element`.\r\n\t\t\t *\r\n\t\t\t * The class can be activated if `element` or one of its ancestors has the given class and it can be deactivated\r\n\t\t\t * if `element` or one of its ancestors has the negated version of the given class. The _negated version_ of the\r\n\t\t\t * given class is just the given class with a `no-` prefix.\r\n\t\t\t *\r\n\t\t\t * Whether the class is active is determined by the closest ancestor of `element` (where `element` itself is\r\n\t\t\t * closest ancestor) that has the given class or the negated version of it. If neither `element` nor any of its\r\n\t\t\t * ancestors have the given class or the negated version of it, then the default activation will be returned.\r\n\t\t\t *\r\n\t\t\t * In the paradoxical situation where the closest ancestor contains __both__ the given class and the negated\r\n\t\t\t * version of it, the class is considered active.\r\n\t\t\t *\r\n\t\t\t * @param {Element} element\r\n\t\t\t * @param {string} className\r\n\t\t\t * @param {boolean} [defaultActivation=false]\r\n\t\t\t * @returns {boolean}\r\n\t\t\t */\r\n\t\t\tisActive: function (element, className, defaultActivation) {\r\n\t\t\t\tvar no = 'no-' + className;\r\n\r\n\t\t\t\twhile (element) {\r\n\t\t\t\t\tvar classList = element.classList;\r\n\t\t\t\t\tif (classList.contains(className)) {\r\n\t\t\t\t\t\treturn true;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (classList.contains(no)) {\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telement = element.parentElement;\r\n\t\t\t\t}\r\n\t\t\t\treturn !!defaultActivation;\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * This namespace contains all currently loaded languages and the some helper functions to create and modify languages.\r\n\t\t *\r\n\t\t * @namespace\r\n\t\t * @memberof Prism\r\n\t\t * @public\r\n\t\t */\r\n\t\tlanguages: {\r\n\t\t\t/**\r\n\t\t\t * The grammar for plain, unformatted text.\r\n\t\t\t */\r\n\t\t\tplain: plainTextGrammar,\r\n\t\t\tplaintext: plainTextGrammar,\r\n\t\t\ttext: plainTextGrammar,\r\n\t\t\ttxt: plainTextGrammar,\r\n\r\n\t\t\t/**\r\n\t\t\t * Creates a deep copy of the language with the given id and appends the given tokens.\r\n\t\t\t *\r\n\t\t\t * If a token in `redef` also appears in the copied language, then the existing token in the copied language\r\n\t\t\t * will be overwritten at its original position.\r\n\t\t\t *\r\n\t\t\t * ## Best practices\r\n\t\t\t *\r\n\t\t\t * Since the position of overwriting tokens (token in `redef` that overwrite tokens in the copied language)\r\n\t\t\t * doesn't matter, they can technically be in any order. However, this can be confusing to others that trying to\r\n\t\t\t * understand the language definition because, normally, the order of tokens matters in Prism grammars.\r\n\t\t\t *\r\n\t\t\t * Therefore, it is encouraged to order overwriting tokens according to the positions of the overwritten tokens.\r\n\t\t\t * Furthermore, all non-overwriting tokens should be placed after the overwriting ones.\r\n\t\t\t *\r\n\t\t\t * @param {string} id The id of the language to extend. This has to be a key in `Prism.languages`.\r\n\t\t\t * @param {Grammar} redef The new tokens to append.\r\n\t\t\t * @returns {Grammar} The new language created.\r\n\t\t\t * @public\r\n\t\t\t * @example\r\n\t\t\t * Prism.languages['css-with-colors'] = Prism.languages.extend('css', {\r\n\t\t\t *     // Prism.languages.css already has a 'comment' token, so this token will overwrite CSS' 'comment' token\r\n\t\t\t *     // at its original position\r\n\t\t\t *     'comment': { ... },\r\n\t\t\t *     // CSS doesn't have a 'color' token, so this token will be appended\r\n\t\t\t *     'color': /\\b(?:red|green|blue)\\b/\r\n\t\t\t * });\r\n\t\t\t */\r\n\t\t\textend: function (id, redef) {\r\n\t\t\t\tvar lang = _.util.clone(_.languages[id]);\r\n\r\n\t\t\t\tfor (var key in redef) {\r\n\t\t\t\t\tlang[key] = redef[key];\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn lang;\r\n\t\t\t},\r\n\r\n\t\t\t/**\r\n\t\t\t * Inserts tokens _before_ another token in a language definition or any other grammar.\r\n\t\t\t *\r\n\t\t\t * ## Usage\r\n\t\t\t *\r\n\t\t\t * This helper method makes it easy to modify existing languages. For example, the CSS language definition\r\n\t\t\t * not only defines CSS highlighting for CSS documents, but also needs to define highlighting for CSS embedded\r\n\t\t\t * in HTML through `<style>` elements. To do this, it needs to modify `Prism.languages.markup` and add the\r\n\t\t\t * appropriate tokens. However, `Prism.languages.markup` is a regular JavaScript object literal, so if you do\r\n\t\t\t * this:\r\n\t\t\t *\r\n\t\t\t * ```js\r\n\t\t\t * Prism.languages.markup.style = {\r\n\t\t\t *     // token\r\n\t\t\t * };\r\n\t\t\t * ```\r\n\t\t\t *\r\n\t\t\t * then the `style` token will be added (and processed) at the end. `insertBefore` allows you to insert tokens\r\n\t\t\t * before existing tokens. For the CSS example above, you would use it like this:\r\n\t\t\t *\r\n\t\t\t * ```js\r\n\t\t\t * Prism.languages.insertBefore('markup', 'cdata', {\r\n\t\t\t *     'style': {\r\n\t\t\t *         // token\r\n\t\t\t *     }\r\n\t\t\t * });\r\n\t\t\t * ```\r\n\t\t\t *\r\n\t\t\t * ## Special cases\r\n\t\t\t *\r\n\t\t\t * If the grammars of `inside` and `insert` have tokens with the same name, the tokens in `inside`'s grammar\r\n\t\t\t * will be ignored.\r\n\t\t\t *\r\n\t\t\t * This behavior can be used to insert tokens after `before`:\r\n\t\t\t *\r\n\t\t\t * ```js\r\n\t\t\t * Prism.languages.insertBefore('markup', 'comment', {\r\n\t\t\t *     'comment': Prism.languages.markup.comment,\r\n\t\t\t *     // tokens after 'comment'\r\n\t\t\t * });\r\n\t\t\t * ```\r\n\t\t\t *\r\n\t\t\t * ## Limitations\r\n\t\t\t *\r\n\t\t\t * The main problem `insertBefore` has to solve is iteration order. Since ES2015, the iteration order for object\r\n\t\t\t * properties is guaranteed to be the insertion order (except for integer keys) but some browsers behave\r\n\t\t\t * differently when keys are deleted and re-inserted. So `insertBefore` can't be implemented by temporarily\r\n\t\t\t * deleting properties which is necessary to insert at arbitrary positions.\r\n\t\t\t *\r\n\t\t\t * To solve this problem, `insertBefore` doesn't actually insert the given tokens into the target object.\r\n\t\t\t * Instead, it will create a new object and replace all references to the target object with the new one. This\r\n\t\t\t * can be done without temporarily deleting properties, so the iteration order is well-defined.\r\n\t\t\t *\r\n\t\t\t * However, only references that can be reached from `Prism.languages` or `insert` will be replaced. I.e. if\r\n\t\t\t * you hold the target object in a variable, then the value of the variable will not change.\r\n\t\t\t *\r\n\t\t\t * ```js\r\n\t\t\t * var oldMarkup = Prism.languages.markup;\r\n\t\t\t * var newMarkup = Prism.languages.insertBefore('markup', 'comment', { ... });\r\n\t\t\t *\r\n\t\t\t * assert(oldMarkup !== Prism.languages.markup);\r\n\t\t\t * assert(newMarkup === Prism.languages.markup);\r\n\t\t\t * ```\r\n\t\t\t *\r\n\t\t\t * @param {string} inside The property of `root` (e.g. a language id in `Prism.languages`) that contains the\r\n\t\t\t * object to be modified.\r\n\t\t\t * @param {string} before The key to insert before.\r\n\t\t\t * @param {Grammar} insert An object containing the key-value pairs to be inserted.\r\n\t\t\t * @param {Object<string, any>} [root] The object containing `inside`, i.e. the object that contains the\r\n\t\t\t * object to be modified.\r\n\t\t\t *\r\n\t\t\t * Defaults to `Prism.languages`.\r\n\t\t\t * @returns {Grammar} The new grammar object.\r\n\t\t\t * @public\r\n\t\t\t */\r\n\t\t\tinsertBefore: function (inside, before, insert, root) {\r\n\t\t\t\troot = root || /** @type {any} */ (_.languages);\r\n\t\t\t\tvar grammar = root[inside];\r\n\t\t\t\t/** @type {Grammar} */\r\n\t\t\t\tvar ret = {};\r\n\r\n\t\t\t\tfor (var token in grammar) {\r\n\t\t\t\t\tif (grammar.hasOwnProperty(token)) {\r\n\r\n\t\t\t\t\t\tif (token == before) {\r\n\t\t\t\t\t\t\tfor (var newToken in insert) {\r\n\t\t\t\t\t\t\t\tif (insert.hasOwnProperty(newToken)) {\r\n\t\t\t\t\t\t\t\t\tret[newToken] = insert[newToken];\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t// Do not insert token which also occur in insert. See #1525\r\n\t\t\t\t\t\tif (!insert.hasOwnProperty(token)) {\r\n\t\t\t\t\t\t\tret[token] = grammar[token];\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tvar old = root[inside];\r\n\t\t\t\troot[inside] = ret;\r\n\r\n\t\t\t\t// Update references in other language definitions\r\n\t\t\t\t_.languages.DFS(_.languages, function (key, value) {\r\n\t\t\t\t\tif (value === old && key != inside) {\r\n\t\t\t\t\t\tthis[key] = ret;\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\r\n\t\t\t\treturn ret;\r\n\t\t\t},\r\n\r\n\t\t\t// Traverse a language definition with Depth First Search\r\n\t\t\tDFS: function DFS(o, callback, type, visited) {\r\n\t\t\t\tvisited = visited || {};\r\n\r\n\t\t\t\tvar objId = _.util.objId;\r\n\r\n\t\t\t\tfor (var i in o) {\r\n\t\t\t\t\tif (o.hasOwnProperty(i)) {\r\n\t\t\t\t\t\tcallback.call(o, i, o[i], type || i);\r\n\r\n\t\t\t\t\t\tvar property = o[i];\r\n\t\t\t\t\t\tvar propertyType = _.util.type(property);\r\n\r\n\t\t\t\t\t\tif (propertyType === 'Object' && !visited[objId(property)]) {\r\n\t\t\t\t\t\t\tvisited[objId(property)] = true;\r\n\t\t\t\t\t\t\tDFS(property, callback, null, visited);\r\n\t\t\t\t\t\t} else if (propertyType === 'Array' && !visited[objId(property)]) {\r\n\t\t\t\t\t\t\tvisited[objId(property)] = true;\r\n\t\t\t\t\t\t\tDFS(property, callback, i, visited);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\tplugins: {},\r\n\r\n\t\t/**\r\n\t\t * This is the most high-level function in Prism’s API.\r\n\t\t * It fetches all the elements that have a `.language-xxxx` class and then calls {@link Prism.highlightElement} on\r\n\t\t * each one of them.\r\n\t\t *\r\n\t\t * This is equivalent to `Prism.highlightAllUnder(document, async, callback)`.\r\n\t\t *\r\n\t\t * @param {boolean} [async=false] Same as in {@link Prism.highlightAllUnder}.\r\n\t\t * @param {HighlightCallback} [callback] Same as in {@link Prism.highlightAllUnder}.\r\n\t\t * @memberof Prism\r\n\t\t * @public\r\n\t\t */\r\n\t\thighlightAll: function (async, callback) {\r\n\t\t\t_.highlightAllUnder(document, async, callback);\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Fetches all the descendants of `container` that have a `.language-xxxx` class and then calls\r\n\t\t * {@link Prism.highlightElement} on each one of them.\r\n\t\t *\r\n\t\t * The following hooks will be run:\r\n\t\t * 1. `before-highlightall`\r\n\t\t * 2. `before-all-elements-highlight`\r\n\t\t * 3. All hooks of {@link Prism.highlightElement} for each element.\r\n\t\t *\r\n\t\t * @param {ParentNode} container The root element, whose descendants that have a `.language-xxxx` class will be highlighted.\r\n\t\t * @param {boolean} [async=false] Whether each element is to be highlighted asynchronously using Web Workers.\r\n\t\t * @param {HighlightCallback} [callback] An optional callback to be invoked on each element after its highlighting is done.\r\n\t\t * @memberof Prism\r\n\t\t * @public\r\n\t\t */\r\n\t\thighlightAllUnder: function (container, async, callback) {\r\n\t\t\tvar env = {\r\n\t\t\t\tcallback: callback,\r\n\t\t\t\tcontainer: container,\r\n\t\t\t\tselector: 'code[class*=\"language-\"], [class*=\"language-\"] code, code[class*=\"lang-\"], [class*=\"lang-\"] code'\r\n\t\t\t};\r\n\r\n\t\t\t_.hooks.run('before-highlightall', env);\r\n\r\n\t\t\tenv.elements = Array.prototype.slice.apply(env.container.querySelectorAll(env.selector));\r\n\r\n\t\t\t_.hooks.run('before-all-elements-highlight', env);\r\n\r\n\t\t\tfor (var i = 0, element; (element = env.elements[i++]);) {\r\n\t\t\t\t_.highlightElement(element, async === true, env.callback);\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Highlights the code inside a single element.\r\n\t\t *\r\n\t\t * The following hooks will be run:\r\n\t\t * 1. `before-sanity-check`\r\n\t\t * 2. `before-highlight`\r\n\t\t * 3. All hooks of {@link Prism.highlight}. These hooks will be run by an asynchronous worker if `async` is `true`.\r\n\t\t * 4. `before-insert`\r\n\t\t * 5. `after-highlight`\r\n\t\t * 6. `complete`\r\n\t\t *\r\n\t\t * Some the above hooks will be skipped if the element doesn't contain any text or there is no grammar loaded for\r\n\t\t * the element's language.\r\n\t\t *\r\n\t\t * @param {Element} element The element containing the code.\r\n\t\t * It must have a class of `language-xxxx` to be processed, where `xxxx` is a valid language identifier.\r\n\t\t * @param {boolean} [async=false] Whether the element is to be highlighted asynchronously using Web Workers\r\n\t\t * to improve performance and avoid blocking the UI when highlighting very large chunks of code. This option is\r\n\t\t * [disabled by default](https://prismjs.com/faq.html#why-is-asynchronous-highlighting-disabled-by-default).\r\n\t\t *\r\n\t\t * Note: All language definitions required to highlight the code must be included in the main `prism.js` file for\r\n\t\t * asynchronous highlighting to work. You can build your own bundle on the\r\n\t\t * [Download page](https://prismjs.com/download.html).\r\n\t\t * @param {HighlightCallback} [callback] An optional callback to be invoked after the highlighting is done.\r\n\t\t * Mostly useful when `async` is `true`, since in that case, the highlighting is done asynchronously.\r\n\t\t * @memberof Prism\r\n\t\t * @public\r\n\t\t */\r\n\t\thighlightElement: function (element, async, callback) {\r\n\t\t\t// Find language\r\n\t\t\tvar language = _.util.getLanguage(element);\r\n\t\t\tvar grammar = _.languages[language];\r\n\r\n\t\t\t// Set language on the element, if not present\r\n\t\t\t_.util.setLanguage(element, language);\r\n\r\n\t\t\t// Set language on the parent, for styling\r\n\t\t\tvar parent = element.parentElement;\r\n\t\t\tif (parent && parent.nodeName.toLowerCase() === 'pre') {\r\n\t\t\t\t_.util.setLanguage(parent, language);\r\n\t\t\t}\r\n\r\n\t\t\tvar code = element.textContent;\r\n\r\n\t\t\tvar env = {\r\n\t\t\t\telement: element,\r\n\t\t\t\tlanguage: language,\r\n\t\t\t\tgrammar: grammar,\r\n\t\t\t\tcode: code\r\n\t\t\t};\r\n\r\n\t\t\tfunction insertHighlightedCode(highlightedCode) {\r\n\t\t\t\tenv.highlightedCode = highlightedCode;\r\n\r\n\t\t\t\t_.hooks.run('before-insert', env);\r\n\r\n\t\t\t\tenv.element.innerHTML = env.highlightedCode;\r\n\r\n\t\t\t\t_.hooks.run('after-highlight', env);\r\n\t\t\t\t_.hooks.run('complete', env);\r\n\t\t\t\tcallback && callback.call(env.element);\r\n\t\t\t}\r\n\r\n\t\t\t_.hooks.run('before-sanity-check', env);\r\n\r\n\t\t\t// plugins may change/add the parent/element\r\n\t\t\tparent = env.element.parentElement;\r\n\t\t\tif (parent && parent.nodeName.toLowerCase() === 'pre' && !parent.hasAttribute('tabindex')) {\r\n\t\t\t\tparent.setAttribute('tabindex', '0');\r\n\t\t\t}\r\n\r\n\t\t\tif (!env.code) {\r\n\t\t\t\t_.hooks.run('complete', env);\r\n\t\t\t\tcallback && callback.call(env.element);\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\t_.hooks.run('before-highlight', env);\r\n\r\n\t\t\tif (!env.grammar) {\r\n\t\t\t\tinsertHighlightedCode(_.util.encode(env.code));\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tif (async && _self.Worker) {\r\n\t\t\t\tvar worker = new Worker(_.filename);\r\n\r\n\t\t\t\tworker.onmessage = function (evt) {\r\n\t\t\t\t\tinsertHighlightedCode(evt.data);\r\n\t\t\t\t};\r\n\r\n\t\t\t\tworker.postMessage(JSON.stringify({\r\n\t\t\t\t\tlanguage: env.language,\r\n\t\t\t\t\tcode: env.code,\r\n\t\t\t\t\timmediateClose: true\r\n\t\t\t\t}));\r\n\t\t\t} else {\r\n\t\t\t\tinsertHighlightedCode(_.highlight(env.code, env.grammar, env.language));\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Low-level function, only use if you know what you’re doing. It accepts a string of text as input\r\n\t\t * and the language definitions to use, and returns a string with the HTML produced.\r\n\t\t *\r\n\t\t * The following hooks will be run:\r\n\t\t * 1. `before-tokenize`\r\n\t\t * 2. `after-tokenize`\r\n\t\t * 3. `wrap`: On each {@link Token}.\r\n\t\t *\r\n\t\t * @param {string} text A string with the code to be highlighted.\r\n\t\t * @param {Grammar} grammar An object containing the tokens to use.\r\n\t\t *\r\n\t\t * Usually a language definition like `Prism.languages.markup`.\r\n\t\t * @param {string} language The name of the language definition passed to `grammar`.\r\n\t\t * @returns {string} The highlighted HTML.\r\n\t\t * @memberof Prism\r\n\t\t * @public\r\n\t\t * @example\r\n\t\t * Prism.highlight('var foo = true;', Prism.languages.javascript, 'javascript');\r\n\t\t */\r\n\t\thighlight: function (text, grammar, language) {\r\n\t\t\tvar env = {\r\n\t\t\t\tcode: text,\r\n\t\t\t\tgrammar: grammar,\r\n\t\t\t\tlanguage: language\r\n\t\t\t};\r\n\t\t\t_.hooks.run('before-tokenize', env);\r\n\t\t\tif (!env.grammar) {\r\n\t\t\t\tthrow new Error('The language \"' + env.language + '\" has no grammar.');\r\n\t\t\t}\r\n\t\t\tenv.tokens = _.tokenize(env.code, env.grammar);\r\n\t\t\t_.hooks.run('after-tokenize', env);\r\n\t\t\treturn Token.stringify(_.util.encode(env.tokens), env.language);\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * This is the heart of Prism, and the most low-level function you can use. It accepts a string of text as input\r\n\t\t * and the language definitions to use, and returns an array with the tokenized code.\r\n\t\t *\r\n\t\t * When the language definition includes nested tokens, the function is called recursively on each of these tokens.\r\n\t\t *\r\n\t\t * This method could be useful in other contexts as well, as a very crude parser.\r\n\t\t *\r\n\t\t * @param {string} text A string with the code to be highlighted.\r\n\t\t * @param {Grammar} grammar An object containing the tokens to use.\r\n\t\t *\r\n\t\t * Usually a language definition like `Prism.languages.markup`.\r\n\t\t * @returns {TokenStream} An array of strings and tokens, a token stream.\r\n\t\t * @memberof Prism\r\n\t\t * @public\r\n\t\t * @example\r\n\t\t * let code = `var foo = 0;`;\r\n\t\t * let tokens = Prism.tokenize(code, Prism.languages.javascript);\r\n\t\t * tokens.forEach(token => {\r\n\t\t *     if (token instanceof Prism.Token && token.type === 'number') {\r\n\t\t *         console.log(`Found numeric literal: ${token.content}`);\r\n\t\t *     }\r\n\t\t * });\r\n\t\t */\r\n\t\ttokenize: function (text, grammar) {\r\n\t\t\tvar rest = grammar.rest;\r\n\t\t\tif (rest) {\r\n\t\t\t\tfor (var token in rest) {\r\n\t\t\t\t\tgrammar[token] = rest[token];\r\n\t\t\t\t}\r\n\r\n\t\t\t\tdelete grammar.rest;\r\n\t\t\t}\r\n\r\n\t\t\tvar tokenList = new LinkedList();\r\n\t\t\taddAfter(tokenList, tokenList.head, text);\r\n\r\n\t\t\tmatchGrammar(text, tokenList, grammar, tokenList.head, 0);\r\n\r\n\t\t\treturn toArray(tokenList);\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * @namespace\r\n\t\t * @memberof Prism\r\n\t\t * @public\r\n\t\t */\r\n\t\thooks: {\r\n\t\t\tall: {},\r\n\r\n\t\t\t/**\r\n\t\t\t * Adds the given callback to the list of callbacks for the given hook.\r\n\t\t\t *\r\n\t\t\t * The callback will be invoked when the hook it is registered for is run.\r\n\t\t\t * Hooks are usually directly run by a highlight function but you can also run hooks yourself.\r\n\t\t\t *\r\n\t\t\t * One callback function can be registered to multiple hooks and the same hook multiple times.\r\n\t\t\t *\r\n\t\t\t * @param {string} name The name of the hook.\r\n\t\t\t * @param {HookCallback} callback The callback function which is given environment variables.\r\n\t\t\t * @public\r\n\t\t\t */\r\n\t\t\tadd: function (name, callback) {\r\n\t\t\t\tvar hooks = _.hooks.all;\r\n\r\n\t\t\t\thooks[name] = hooks[name] || [];\r\n\r\n\t\t\t\thooks[name].push(callback);\r\n\t\t\t},\r\n\r\n\t\t\t/**\r\n\t\t\t * Runs a hook invoking all registered callbacks with the given environment variables.\r\n\t\t\t *\r\n\t\t\t * Callbacks will be invoked synchronously and in the order in which they were registered.\r\n\t\t\t *\r\n\t\t\t * @param {string} name The name of the hook.\r\n\t\t\t * @param {Object<string, any>} env The environment variables of the hook passed to all callbacks registered.\r\n\t\t\t * @public\r\n\t\t\t */\r\n\t\t\trun: function (name, env) {\r\n\t\t\t\tvar callbacks = _.hooks.all[name];\r\n\r\n\t\t\t\tif (!callbacks || !callbacks.length) {\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tfor (var i = 0, callback; (callback = callbacks[i++]);) {\r\n\t\t\t\t\tcallback(env);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\tToken: Token\r\n\t};\r\n\t_self.Prism = _;\r\n\r\n\r\n\t// Typescript note:\r\n\t// The following can be used to import the Token type in JSDoc:\r\n\t//\r\n\t//   @typedef {InstanceType<import(\"./prism-core\")[\"Token\"]>} Token\r\n\r\n\t/**\r\n\t * Creates a new token.\r\n\t *\r\n\t * @param {string} type See {@link Token#type type}\r\n\t * @param {string | TokenStream} content See {@link Token#content content}\r\n\t * @param {string|string[]} [alias] The alias(es) of the token.\r\n\t * @param {string} [matchedStr=\"\"] A copy of the full string this token was created from.\r\n\t * @class\r\n\t * @global\r\n\t * @public\r\n\t */\r\n\tfunction Token(type, content, alias, matchedStr) {\r\n\t\t/**\r\n\t\t * The type of the token.\r\n\t\t *\r\n\t\t * This is usually the key of a pattern in a {@link Grammar}.\r\n\t\t *\r\n\t\t * @type {string}\r\n\t\t * @see GrammarToken\r\n\t\t * @public\r\n\t\t */\r\n\t\tthis.type = type;\r\n\t\t/**\r\n\t\t * The strings or tokens contained by this token.\r\n\t\t *\r\n\t\t * This will be a token stream if the pattern matched also defined an `inside` grammar.\r\n\t\t *\r\n\t\t * @type {string | TokenStream}\r\n\t\t * @public\r\n\t\t */\r\n\t\tthis.content = content;\r\n\t\t/**\r\n\t\t * The alias(es) of the token.\r\n\t\t *\r\n\t\t * @type {string|string[]}\r\n\t\t * @see GrammarToken\r\n\t\t * @public\r\n\t\t */\r\n\t\tthis.alias = alias;\r\n\t\t// Copy of the full string this token was created from\r\n\t\tthis.length = (matchedStr || '').length | 0;\r\n\t}\r\n\r\n\t/**\r\n\t * A token stream is an array of strings and {@link Token Token} objects.\r\n\t *\r\n\t * Token streams have to fulfill a few properties that are assumed by most functions (mostly internal ones) that process\r\n\t * them.\r\n\t *\r\n\t * 1. No adjacent strings.\r\n\t * 2. No empty strings.\r\n\t *\r\n\t *    The only exception here is the token stream that only contains the empty string and nothing else.\r\n\t *\r\n\t * @typedef {Array<string | Token>} TokenStream\r\n\t * @global\r\n\t * @public\r\n\t */\r\n\r\n\t/**\r\n\t * Converts the given token or token stream to an HTML representation.\r\n\t *\r\n\t * The following hooks will be run:\r\n\t * 1. `wrap`: On each {@link Token}.\r\n\t *\r\n\t * @param {string | Token | TokenStream} o The token or token stream to be converted.\r\n\t * @param {string} language The name of current language.\r\n\t * @returns {string} The HTML representation of the token or token stream.\r\n\t * @memberof Token\r\n\t * @static\r\n\t */\r\n\tToken.stringify = function stringify(o, language) {\r\n\t\tif (typeof o == 'string') {\r\n\t\t\treturn o;\r\n\t\t}\r\n\t\tif (Array.isArray(o)) {\r\n\t\t\tvar s = '';\r\n\t\t\to.forEach(function (e) {\r\n\t\t\t\ts += stringify(e, language);\r\n\t\t\t});\r\n\t\t\treturn s;\r\n\t\t}\r\n\r\n\t\tvar env = {\r\n\t\t\ttype: o.type,\r\n\t\t\tcontent: stringify(o.content, language),\r\n\t\t\ttag: 'span',\r\n\t\t\tclasses: ['token', o.type],\r\n\t\t\tattributes: {},\r\n\t\t\tlanguage: language\r\n\t\t};\r\n\r\n\t\tvar aliases = o.alias;\r\n\t\tif (aliases) {\r\n\t\t\tif (Array.isArray(aliases)) {\r\n\t\t\t\tArray.prototype.push.apply(env.classes, aliases);\r\n\t\t\t} else {\r\n\t\t\t\tenv.classes.push(aliases);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t_.hooks.run('wrap', env);\r\n\r\n\t\tvar attributes = '';\r\n\t\tfor (var name in env.attributes) {\r\n\t\t\tattributes += ' ' + name + '=\"' + (env.attributes[name] || '').replace(/\"/g, '&quot;') + '\"';\r\n\t\t}\r\n\r\n\t\treturn '<' + env.tag + ' class=\"' + env.classes.join(' ') + '\"' + attributes + '>' + env.content + '</' + env.tag + '>';\r\n\t};\r\n\r\n\t/**\r\n\t * @param {RegExp} pattern\r\n\t * @param {number} pos\r\n\t * @param {string} text\r\n\t * @param {boolean} lookbehind\r\n\t * @returns {RegExpExecArray | null}\r\n\t */\r\n\tfunction matchPattern(pattern, pos, text, lookbehind) {\r\n\t\tpattern.lastIndex = pos;\r\n\t\tvar match = pattern.exec(text);\r\n\t\tif (match && lookbehind && match[1]) {\r\n\t\t\t// change the match to remove the text matched by the Prism lookbehind group\r\n\t\t\tvar lookbehindLength = match[1].length;\r\n\t\t\tmatch.index += lookbehindLength;\r\n\t\t\tmatch[0] = match[0].slice(lookbehindLength);\r\n\t\t}\r\n\t\treturn match;\r\n\t}\r\n\r\n\t/**\r\n\t * @param {string} text\r\n\t * @param {LinkedList<string | Token>} tokenList\r\n\t * @param {any} grammar\r\n\t * @param {LinkedListNode<string | Token>} startNode\r\n\t * @param {number} startPos\r\n\t * @param {RematchOptions} [rematch]\r\n\t * @returns {void}\r\n\t * @private\r\n\t *\r\n\t * @typedef RematchOptions\r\n\t * @property {string} cause\r\n\t * @property {number} reach\r\n\t */\r\n\tfunction matchGrammar(text, tokenList, grammar, startNode, startPos, rematch) {\r\n\t\tfor (var token in grammar) {\r\n\t\t\tif (!grammar.hasOwnProperty(token) || !grammar[token]) {\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\r\n\t\t\tvar patterns = grammar[token];\r\n\t\t\tpatterns = Array.isArray(patterns) ? patterns : [patterns];\r\n\r\n\t\t\tfor (var j = 0; j < patterns.length; ++j) {\r\n\t\t\t\tif (rematch && rematch.cause == token + ',' + j) {\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tvar patternObj = patterns[j];\r\n\t\t\t\tvar inside = patternObj.inside;\r\n\t\t\t\tvar lookbehind = !!patternObj.lookbehind;\r\n\t\t\t\tvar greedy = !!patternObj.greedy;\r\n\t\t\t\tvar alias = patternObj.alias;\r\n\r\n\t\t\t\tif (greedy && !patternObj.pattern.global) {\r\n\t\t\t\t\t// Without the global flag, lastIndex won't work\r\n\t\t\t\t\tvar flags = patternObj.pattern.toString().match(/[imsuy]*$/)[0];\r\n\t\t\t\t\tpatternObj.pattern = RegExp(patternObj.pattern.source, flags + 'g');\r\n\t\t\t\t}\r\n\r\n\t\t\t\t/** @type {RegExp} */\r\n\t\t\t\tvar pattern = patternObj.pattern || patternObj;\r\n\r\n\t\t\t\tfor ( // iterate the token list and keep track of the current token/string position\r\n\t\t\t\t\tvar currentNode = startNode.next, pos = startPos;\r\n\t\t\t\t\tcurrentNode !== tokenList.tail;\r\n\t\t\t\t\tpos += currentNode.value.length, currentNode = currentNode.next\r\n\t\t\t\t) {\r\n\r\n\t\t\t\t\tif (rematch && pos >= rematch.reach) {\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tvar str = currentNode.value;\r\n\r\n\t\t\t\t\tif (tokenList.length > text.length) {\r\n\t\t\t\t\t\t// Something went terribly wrong, ABORT, ABORT!\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif (str instanceof Token) {\r\n\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tvar removeCount = 1; // this is the to parameter of removeBetween\r\n\t\t\t\t\tvar match;\r\n\r\n\t\t\t\t\tif (greedy) {\r\n\t\t\t\t\t\tmatch = matchPattern(pattern, pos, text, lookbehind);\r\n\t\t\t\t\t\tif (!match || match.index >= text.length) {\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tvar from = match.index;\r\n\t\t\t\t\t\tvar to = match.index + match[0].length;\r\n\t\t\t\t\t\tvar p = pos;\r\n\r\n\t\t\t\t\t\t// find the node that contains the match\r\n\t\t\t\t\t\tp += currentNode.value.length;\r\n\t\t\t\t\t\twhile (from >= p) {\r\n\t\t\t\t\t\t\tcurrentNode = currentNode.next;\r\n\t\t\t\t\t\t\tp += currentNode.value.length;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t// adjust pos (and p)\r\n\t\t\t\t\t\tp -= currentNode.value.length;\r\n\t\t\t\t\t\tpos = p;\r\n\r\n\t\t\t\t\t\t// the current node is a Token, then the match starts inside another Token, which is invalid\r\n\t\t\t\t\t\tif (currentNode.value instanceof Token) {\r\n\t\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t// find the last node which is affected by this match\r\n\t\t\t\t\t\tfor (\r\n\t\t\t\t\t\t\tvar k = currentNode;\r\n\t\t\t\t\t\t\tk !== tokenList.tail && (p < to || typeof k.value === 'string');\r\n\t\t\t\t\t\t\tk = k.next\r\n\t\t\t\t\t\t) {\r\n\t\t\t\t\t\t\tremoveCount++;\r\n\t\t\t\t\t\t\tp += k.value.length;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tremoveCount--;\r\n\r\n\t\t\t\t\t\t// replace with the new match\r\n\t\t\t\t\t\tstr = text.slice(pos, p);\r\n\t\t\t\t\t\tmatch.index -= pos;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tmatch = matchPattern(pattern, 0, str, lookbehind);\r\n\t\t\t\t\t\tif (!match) {\r\n\t\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// eslint-disable-next-line no-redeclare\r\n\t\t\t\t\tvar from = match.index;\r\n\t\t\t\t\tvar matchStr = match[0];\r\n\t\t\t\t\tvar before = str.slice(0, from);\r\n\t\t\t\t\tvar after = str.slice(from + matchStr.length);\r\n\r\n\t\t\t\t\tvar reach = pos + str.length;\r\n\t\t\t\t\tif (rematch && reach > rematch.reach) {\r\n\t\t\t\t\t\trematch.reach = reach;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tvar removeFrom = currentNode.prev;\r\n\r\n\t\t\t\t\tif (before) {\r\n\t\t\t\t\t\tremoveFrom = addAfter(tokenList, removeFrom, before);\r\n\t\t\t\t\t\tpos += before.length;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tremoveRange(tokenList, removeFrom, removeCount);\r\n\r\n\t\t\t\t\tvar wrapped = new Token(token, inside ? _.tokenize(matchStr, inside) : matchStr, alias, matchStr);\r\n\t\t\t\t\tcurrentNode = addAfter(tokenList, removeFrom, wrapped);\r\n\r\n\t\t\t\t\tif (after) {\r\n\t\t\t\t\t\taddAfter(tokenList, currentNode, after);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif (removeCount > 1) {\r\n\t\t\t\t\t\t// at least one Token object was removed, so we have to do some rematching\r\n\t\t\t\t\t\t// this can only happen if the current pattern is greedy\r\n\r\n\t\t\t\t\t\t/** @type {RematchOptions} */\r\n\t\t\t\t\t\tvar nestedRematch = {\r\n\t\t\t\t\t\t\tcause: token + ',' + j,\r\n\t\t\t\t\t\t\treach: reach\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t\tmatchGrammar(text, tokenList, grammar, currentNode.prev, pos, nestedRematch);\r\n\r\n\t\t\t\t\t\t// the reach might have been extended because of the rematching\r\n\t\t\t\t\t\tif (rematch && nestedRematch.reach > rematch.reach) {\r\n\t\t\t\t\t\t\trematch.reach = nestedRematch.reach;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @typedef LinkedListNode\r\n\t * @property {T} value\r\n\t * @property {LinkedListNode<T> | null} prev The previous node.\r\n\t * @property {LinkedListNode<T> | null} next The next node.\r\n\t * @template T\r\n\t * @private\r\n\t */\r\n\r\n\t/**\r\n\t * @template T\r\n\t * @private\r\n\t */\r\n\tfunction LinkedList() {\r\n\t\t/** @type {LinkedListNode<T>} */\r\n\t\tvar head = { value: null, prev: null, next: null };\r\n\t\t/** @type {LinkedListNode<T>} */\r\n\t\tvar tail = { value: null, prev: head, next: null };\r\n\t\thead.next = tail;\r\n\r\n\t\t/** @type {LinkedListNode<T>} */\r\n\t\tthis.head = head;\r\n\t\t/** @type {LinkedListNode<T>} */\r\n\t\tthis.tail = tail;\r\n\t\tthis.length = 0;\r\n\t}\r\n\r\n\t/**\r\n\t * Adds a new node with the given value to the list.\r\n\t *\r\n\t * @param {LinkedList<T>} list\r\n\t * @param {LinkedListNode<T>} node\r\n\t * @param {T} value\r\n\t * @returns {LinkedListNode<T>} The added node.\r\n\t * @template T\r\n\t */\r\n\tfunction addAfter(list, node, value) {\r\n\t\t// assumes that node != list.tail && values.length >= 0\r\n\t\tvar next = node.next;\r\n\r\n\t\tvar newNode = { value: value, prev: node, next: next };\r\n\t\tnode.next = newNode;\r\n\t\tnext.prev = newNode;\r\n\t\tlist.length++;\r\n\r\n\t\treturn newNode;\r\n\t}\r\n\t/**\r\n\t * Removes `count` nodes after the given node. The given node will not be removed.\r\n\t *\r\n\t * @param {LinkedList<T>} list\r\n\t * @param {LinkedListNode<T>} node\r\n\t * @param {number} count\r\n\t * @template T\r\n\t */\r\n\tfunction removeRange(list, node, count) {\r\n\t\tvar next = node.next;\r\n\t\tfor (var i = 0; i < count && next !== list.tail; i++) {\r\n\t\t\tnext = next.next;\r\n\t\t}\r\n\t\tnode.next = next;\r\n\t\tnext.prev = node;\r\n\t\tlist.length -= i;\r\n\t}\r\n\t/**\r\n\t * @param {LinkedList<T>} list\r\n\t * @returns {T[]}\r\n\t * @template T\r\n\t */\r\n\tfunction toArray(list) {\r\n\t\tvar array = [];\r\n\t\tvar node = list.head.next;\r\n\t\twhile (node !== list.tail) {\r\n\t\t\tarray.push(node.value);\r\n\t\t\tnode = node.next;\r\n\t\t}\r\n\t\treturn array;\r\n\t}\r\n\r\n\r\n\tif (!_self.document) {\r\n\t\tif (!_self.addEventListener) {\r\n\t\t\t// in Node.js\r\n\t\t\treturn _;\r\n\t\t}\r\n\r\n\t\tif (!_.disableWorkerMessageHandler) {\r\n\t\t\t// In worker\r\n\t\t\t_self.addEventListener('message', function (evt) {\r\n\t\t\t\tvar message = JSON.parse(evt.data);\r\n\t\t\t\tvar lang = message.language;\r\n\t\t\t\tvar code = message.code;\r\n\t\t\t\tvar immediateClose = message.immediateClose;\r\n\r\n\t\t\t\t_self.postMessage(_.highlight(code, _.languages[lang], lang));\r\n\t\t\t\tif (immediateClose) {\r\n\t\t\t\t\t_self.close();\r\n\t\t\t\t}\r\n\t\t\t}, false);\r\n\t\t}\r\n\r\n\t\treturn _;\r\n\t}\r\n\r\n\t// Get current script and highlight\r\n\tvar script = _.util.currentScript();\r\n\r\n\tif (script) {\r\n\t\t_.filename = script.src;\r\n\r\n\t\tif (script.hasAttribute('data-manual')) {\r\n\t\t\t_.manual = true;\r\n\t\t}\r\n\t}\r\n\r\n\tfunction highlightAutomaticallyCallback() {\r\n\t\tif (!_.manual) {\r\n\t\t\t_.highlightAll();\r\n\t\t}\r\n\t}\r\n\r\n\tif (!_.manual) {\r\n\t\t// If the document state is \"loading\", then we'll use DOMContentLoaded.\r\n\t\t// If the document state is \"interactive\" and the prism.js script is deferred, then we'll also use the\r\n\t\t// DOMContentLoaded event because there might be some plugins or languages which have also been deferred and they\r\n\t\t// might take longer one animation frame to execute which can create a race condition where only some plugins have\r\n\t\t// been loaded when Prism.highlightAll() is executed, depending on how fast resources are loaded.\r\n\t\t// See https://github.com/PrismJS/prism/issues/2102\r\n\t\tvar readyState = document.readyState;\r\n\t\tif (readyState === 'loading' || readyState === 'interactive' && script && script.defer) {\r\n\t\t\tdocument.addEventListener('DOMContentLoaded', highlightAutomaticallyCallback);\r\n\t\t} else {\r\n\t\t\tif (window.requestAnimationFrame) {\r\n\t\t\t\twindow.requestAnimationFrame(highlightAutomaticallyCallback);\r\n\t\t\t} else {\r\n\t\t\t\twindow.setTimeout(highlightAutomaticallyCallback, 16);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\treturn _;\r\n\r\n}(_self));\r\n\r\nif (typeof module !== 'undefined' && module.exports) {\r\n\tmodule.exports = Prism;\r\n}\r\n\r\n// hack for components to work correctly in node.js\r\nif (typeof global !== 'undefined') {\r\n\tglobal.Prism = Prism;\r\n}\r\n\r\n// some additional documentation/types\r\n\r\n/**\r\n * The expansion of a simple `RegExp` literal to support additional properties.\r\n *\r\n * @typedef GrammarToken\r\n * @property {RegExp} pattern The regular expression of the token.\r\n * @property {boolean} [lookbehind=false] If `true`, then the first capturing group of `pattern` will (effectively)\r\n * behave as a lookbehind group meaning that the captured text will not be part of the matched text of the new token.\r\n * @property {boolean} [greedy=false] Whether the token is greedy.\r\n * @property {string|string[]} [alias] An optional alias or list of aliases.\r\n * @property {Grammar} [inside] The nested grammar of this token.\r\n *\r\n * The `inside` grammar will be used to tokenize the text value of each token of this kind.\r\n *\r\n * This can be used to make nested and even recursive language definitions.\r\n *\r\n * Note: This can cause infinite recursion. Be careful when you embed different languages or even the same language into\r\n * each another.\r\n * @global\r\n * @public\r\n */\r\n\r\n/**\r\n * @typedef Grammar\r\n * @type {Object<string, RegExp | GrammarToken | Array<RegExp | GrammarToken>>}\r\n * @property {Grammar} [rest] An optional grammar object that will be appended to this grammar.\r\n * @global\r\n * @public\r\n */\r\n\r\n/**\r\n * A function which will invoked after an element was successfully highlighted.\r\n *\r\n * @callback HighlightCallback\r\n * @param {Element} element The element successfully highlighted.\r\n * @returns {void}\r\n * @global\r\n * @public\r\n */\r\n\r\n/**\r\n * @callback HookCallback\r\n * @param {Object<string, any>} env The environment variables of the hook.\r\n * @returns {void}\r\n * @global\r\n * @public\r\n */\r\n"],"mappings":"AAAA;;AAEA,IAAIA,KAAK,GAAI,OAAOC,MAAM,KAAK,WAAW,GACvCA,MAAM,CAAG;AAAA,EAET,OAAOC,iBAAiB,KAAK,WAAW,IAAIC,IAAI,YAAYD,iBAAiB,GAC3EC,IAAI,CAAC;AAAA,EACL,CAAC,CAAC,CAAG;AACR;;AAEF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIC,KAAK,GAAI,UAAUJ,KAAK,EAAE;EAE7B;EACA,IAAIK,IAAI,GAAG,yCAAyC;EACpD,IAAIC,QAAQ,GAAG,CAAC;;EAEhB;EACA,IAAIC,gBAAgB,GAAG,CAAC,CAAC;EAGzB,IAAIC,CAAC,GAAG;IACP;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACEC,MAAM,EAAET,KAAK,CAACI,KAAK,IAAIJ,KAAK,CAACI,KAAK,CAACK,MAAM;IACzC;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACEC,2BAA2B,EAAEV,KAAK,CAACI,KAAK,IAAIJ,KAAK,CAACI,KAAK,CAACM,2BAA2B;IAEnF;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACEC,IAAI,EAAE;MACLC,MAAM,EAAE,SAASA,MAAMA,CAACC,MAAM,EAAE;QAC/B,IAAIA,MAAM,YAAYC,KAAK,EAAE;UAC5B,OAAO,IAAIA,KAAK,CAACD,MAAM,CAACE,IAAI,EAAEH,MAAM,CAACC,MAAM,CAACG,OAAO,CAAC,EAAEH,MAAM,CAACI,KAAK,CAAC;QACpE,CAAC,MAAM,IAAIC,KAAK,CAACC,OAAO,CAACN,MAAM,CAAC,EAAE;UACjC,OAAOA,MAAM,CAACO,GAAG,CAACR,MAAM,CAAC;QAC1B,CAAC,MAAM;UACN,OAAOC,MAAM,CAACQ,OAAO,CAAC,IAAI,EAAE,OAAO,CAAC,CAACA,OAAO,CAAC,IAAI,EAAE,MAAM,CAAC,CAACA,OAAO,CAAC,SAAS,EAAE,GAAG,CAAC;QACnF;MACD,CAAC;MAED;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACGN,IAAI,EAAE,SAAAA,CAAUO,CAAC,EAAE;QAClB,OAAOC,MAAM,CAACC,SAAS,CAACC,QAAQ,CAACC,IAAI,CAACJ,CAAC,CAAC,CAACK,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;MACtD,CAAC;MAED;AACH;AACA;AACA;AACA;AACA;MACGC,KAAK,EAAE,SAAAA,CAAUC,GAAG,EAAE;QACrB,IAAI,CAACA,GAAG,CAAC,MAAM,CAAC,EAAE;UACjBN,MAAM,CAACO,cAAc,CAACD,GAAG,EAAE,MAAM,EAAE;YAAEE,KAAK,EAAE,EAAEzB;UAAS,CAAC,CAAC;QAC1D;QACA,OAAOuB,GAAG,CAAC,MAAM,CAAC;MACnB,CAAC;MAED;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACGG,KAAK,EAAE,SAASC,SAASA,CAACX,CAAC,EAAEY,OAAO,EAAE;QACrCA,OAAO,GAAGA,OAAO,IAAI,CAAC,CAAC;QAEvB,IAAIF,KAAK;QAAE,IAAIG,EAAE;QACjB,QAAQ3B,CAAC,CAACG,IAAI,CAACI,IAAI,CAACO,CAAC,CAAC;UACrB,KAAK,QAAQ;YACZa,EAAE,GAAG3B,CAAC,CAACG,IAAI,CAACiB,KAAK,CAACN,CAAC,CAAC;YACpB,IAAIY,OAAO,CAACC,EAAE,CAAC,EAAE;cAChB,OAAOD,OAAO,CAACC,EAAE,CAAC;YACnB;YACAH,KAAK,GAAG,kCAAoC,CAAC,CAAE;YAC/CE,OAAO,CAACC,EAAE,CAAC,GAAGH,KAAK;YAEnB,KAAK,IAAII,GAAG,IAAId,CAAC,EAAE;cAClB,IAAIA,CAAC,CAACe,cAAc,CAACD,GAAG,CAAC,EAAE;gBAC1BJ,KAAK,CAACI,GAAG,CAAC,GAAGH,SAAS,CAACX,CAAC,CAACc,GAAG,CAAC,EAAEF,OAAO,CAAC;cACxC;YACD;YAEA,OAAO,kBAAoBF,KAAK;UAEjC,KAAK,OAAO;YACXG,EAAE,GAAG3B,CAAC,CAACG,IAAI,CAACiB,KAAK,CAACN,CAAC,CAAC;YACpB,IAAIY,OAAO,CAACC,EAAE,CAAC,EAAE;cAChB,OAAOD,OAAO,CAACC,EAAE,CAAC;YACnB;YACAH,KAAK,GAAG,EAAE;YACVE,OAAO,CAACC,EAAE,CAAC,GAAGH,KAAK;YAEnB,EAAC,qBAAqB,kBAAmBV,CAAC,EAAIgB,OAAO,CAAC,UAAUC,CAAC,EAAEC,CAAC,EAAE;cACrER,KAAK,CAACQ,CAAC,CAAC,GAAGP,SAAS,CAACM,CAAC,EAAEL,OAAO,CAAC;YACjC,CAAC,CAAC;YAEF,OAAO,kBAAoBF,KAAK;UAEjC;YACC,OAAOV,CAAC;QACV;MACD,CAAC;MAED;AACH;AACA;AACA;AACA;AACA;AACA;AACA;MACGmB,WAAW,EAAE,SAAAA,CAAUC,OAAO,EAAE;QAC/B,OAAOA,OAAO,EAAE;UACf,IAAIC,CAAC,GAAGtC,IAAI,CAACuC,IAAI,CAACF,OAAO,CAACG,SAAS,CAAC;UACpC,IAAIF,CAAC,EAAE;YACN,OAAOA,CAAC,CAAC,CAAC,CAAC,CAACG,WAAW,CAAC,CAAC;UAC1B;UACAJ,OAAO,GAAGA,OAAO,CAACK,aAAa;QAChC;QACA,OAAO,MAAM;MACd,CAAC;MAED;AACH;AACA;AACA;AACA;AACA;AACA;MACGC,WAAW,EAAE,SAAAA,CAAUN,OAAO,EAAEO,QAAQ,EAAE;QACzC;QACA;QACAP,OAAO,CAACG,SAAS,GAAGH,OAAO,CAACG,SAAS,CAACxB,OAAO,CAAC6B,MAAM,CAAC7C,IAAI,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC;;QAErE;QACA;QACAqC,OAAO,CAACS,SAAS,CAACC,GAAG,CAAC,WAAW,GAAGH,QAAQ,CAAC;MAC9C,CAAC;MAED;AACH;AACA;AACA;AACA;AACA;AACA;MACGI,aAAa,EAAE,SAAAA,CAAA,EAAY;QAC1B,IAAI,OAAOC,QAAQ,KAAK,WAAW,EAAE;UACpC,OAAO,IAAI;QACZ;QACA,IAAI,eAAe,IAAIA,QAAQ,IAAI,CAAC,GAAG,CAAC,CAAC,sCAAsC;UAC9E,OAAO,kBAAoBA,QAAQ,CAACD,aAAa;QAClD;;QAEA;QACA;QACA;;QAEA,IAAI;UACH,MAAM,IAAIE,KAAK,CAAC,CAAC;QAClB,CAAC,CAAC,OAAOC,GAAG,EAAE;UACb;UACA;UACA;UACA;UACA;UACA;;UAEA,IAAIC,GAAG,GAAG,CAAC,oCAAoC,CAACb,IAAI,CAACY,GAAG,CAACE,KAAK,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC;UACzE,IAAID,GAAG,EAAE;YACR,IAAIE,OAAO,GAAGL,QAAQ,CAACM,oBAAoB,CAAC,QAAQ,CAAC;YACrD,KAAK,IAAIpB,CAAC,IAAImB,OAAO,EAAE;cACtB,IAAIA,OAAO,CAACnB,CAAC,CAAC,CAACiB,GAAG,IAAIA,GAAG,EAAE;gBAC1B,OAAOE,OAAO,CAACnB,CAAC,CAAC;cAClB;YACD;UACD;UACA,OAAO,IAAI;QACZ;MACD,CAAC;MAED;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACGqB,QAAQ,EAAE,SAAAA,CAAUnB,OAAO,EAAEG,SAAS,EAAEiB,iBAAiB,EAAE;QAC1D,IAAIC,EAAE,GAAG,KAAK,GAAGlB,SAAS;QAE1B,OAAOH,OAAO,EAAE;UACf,IAAIS,SAAS,GAAGT,OAAO,CAACS,SAAS;UACjC,IAAIA,SAAS,CAACa,QAAQ,CAACnB,SAAS,CAAC,EAAE;YAClC,OAAO,IAAI;UACZ;UACA,IAAIM,SAAS,CAACa,QAAQ,CAACD,EAAE,CAAC,EAAE;YAC3B,OAAO,KAAK;UACb;UACArB,OAAO,GAAGA,OAAO,CAACK,aAAa;QAChC;QACA,OAAO,CAAC,CAACe,iBAAiB;MAC3B;IACD,CAAC;IAED;AACF;AACA;AACA;AACA;AACA;AACA;IACEG,SAAS,EAAE;MACV;AACH;AACA;MACGC,KAAK,EAAE3D,gBAAgB;MACvB4D,SAAS,EAAE5D,gBAAgB;MAC3B6D,IAAI,EAAE7D,gBAAgB;MACtB8D,GAAG,EAAE9D,gBAAgB;MAErB;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACG+D,MAAM,EAAE,SAAAA,CAAUnC,EAAE,EAAEoC,KAAK,EAAE;QAC5B,IAAIlE,IAAI,GAAGG,CAAC,CAACG,IAAI,CAACqB,KAAK,CAACxB,CAAC,CAACyD,SAAS,CAAC9B,EAAE,CAAC,CAAC;QAExC,KAAK,IAAIC,GAAG,IAAImC,KAAK,EAAE;UACtBlE,IAAI,CAAC+B,GAAG,CAAC,GAAGmC,KAAK,CAACnC,GAAG,CAAC;QACvB;QAEA,OAAO/B,IAAI;MACZ,CAAC;MAED;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACGmE,YAAY,EAAE,SAAAA,CAAUC,MAAM,EAAEC,MAAM,EAAEC,MAAM,EAAEC,IAAI,EAAE;QACrDA,IAAI,GAAGA,IAAI,MAAI,kBAAoBpE,CAAC,CAACyD,SAAS,CAAC;QAC/C,IAAIY,OAAO,GAAGD,IAAI,CAACH,MAAM,CAAC;QAC1B;QACA,IAAIK,GAAG,GAAG,CAAC,CAAC;QAEZ,KAAK,IAAIC,KAAK,IAAIF,OAAO,EAAE;UAC1B,IAAIA,OAAO,CAACxC,cAAc,CAAC0C,KAAK,CAAC,EAAE;YAElC,IAAIA,KAAK,IAAIL,MAAM,EAAE;cACpB,KAAK,IAAIM,QAAQ,IAAIL,MAAM,EAAE;gBAC5B,IAAIA,MAAM,CAACtC,cAAc,CAAC2C,QAAQ,CAAC,EAAE;kBACpCF,GAAG,CAACE,QAAQ,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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}