{"ast":null,"code":"/**\r\n * @typedef {import('micromark-util-types').Code} Code\r\n */\n\nimport { markdownLineEndingOrSpace, unicodePunctuation, unicodeWhitespace } from 'micromark-util-character';\nimport { codes, constants } from 'micromark-util-symbol';\n\n/**\r\n * Classify whether a code represents whitespace, punctuation, or something\r\n * else.\r\n *\r\n * Used for attention (emphasis, strong), whose sequences can open or close\r\n * based on the class of surrounding characters.\r\n *\r\n * > ðŸ‘‰ **Note**: eof (`null`) is seen as whitespace.\r\n *\r\n * @param {Code} code\r\n *   Code.\r\n * @returns {typeof constants.characterGroupWhitespace | typeof constants.characterGroupPunctuation | undefined}\r\n *   Group.\r\n */\nexport function classifyCharacter(code) {\n  if (code === codes.eof || markdownLineEndingOrSpace(code) || unicodeWhitespace(code)) {\n    return constants.characterGroupWhitespace;\n  }\n  if (unicodePunctuation(code)) {\n    return constants.characterGroupPunctuation;\n  }\n}","map":{"version":3,"names":["markdownLineEndingOrSpace","unicodePunctuation","unicodeWhitespace","codes","constants","classifyCharacter","code","eof","characterGroupWhitespace","characterGroupPunctuation"],"sources":["C:/Users/rjalr/OneDrive/ë°”íƒ• í™”ë©´/ybigta/ybigta_blog_2/Ybigta-Blog/frontend/node_modules/micromark-util-classify-character/dev/index.js"],"sourcesContent":["/**\r\n * @typedef {import('micromark-util-types').Code} Code\r\n */\r\n\r\nimport {\r\n  markdownLineEndingOrSpace,\r\n  unicodePunctuation,\r\n  unicodeWhitespace\r\n} from 'micromark-util-character'\r\nimport {codes, constants} from 'micromark-util-symbol'\r\n\r\n/**\r\n * Classify whether a code represents whitespace, punctuation, or something\r\n * else.\r\n *\r\n * Used for attention (emphasis, strong), whose sequences can open or close\r\n * based on the class of surrounding characters.\r\n *\r\n * > ðŸ‘‰ **Note**: eof (`null`) is seen as whitespace.\r\n *\r\n * @param {Code} code\r\n *   Code.\r\n * @returns {typeof constants.characterGroupWhitespace | typeof constants.characterGroupPunctuation | undefined}\r\n *   Group.\r\n */\r\nexport function classifyCharacter(code) {\r\n  if (\r\n    code === codes.eof ||\r\n    markdownLineEndingOrSpace(code) ||\r\n    unicodeWhitespace(code)\r\n  ) {\r\n    return constants.characterGroupWhitespace\r\n  }\r\n\r\n  if (unicodePunctuation(code)) {\r\n    return constants.characterGroupPunctuation\r\n  }\r\n}\r\n"],"mappings":"AAAA;AACA;AACA;;AAEA,SACEA,yBAAyB,EACzBC,kBAAkB,EAClBC,iBAAiB,QACZ,0BAA0B;AACjC,SAAQC,KAAK,EAAEC,SAAS,QAAO,uBAAuB;;AAEtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,iBAAiBA,CAACC,IAAI,EAAE;EACtC,IACEA,IAAI,KAAKH,KAAK,CAACI,GAAG,IAClBP,yBAAyB,CAACM,IAAI,CAAC,IAC/BJ,iBAAiB,CAACI,IAAI,CAAC,EACvB;IACA,OAAOF,SAAS,CAACI,wBAAwB;EAC3C;EAEA,IAAIP,kBAAkB,CAACK,IAAI,CAAC,EAAE;IAC5B,OAAOF,SAAS,CAACK,yBAAyB;EAC5C;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}