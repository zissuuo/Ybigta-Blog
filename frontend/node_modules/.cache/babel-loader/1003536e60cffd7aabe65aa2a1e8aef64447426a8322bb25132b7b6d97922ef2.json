{"ast":null,"code":"/**\r\n * @typedef {import('mdast').FootnoteDefinition} FootnoteDefinition\r\n * @typedef {import('mdast').FootnoteReference} FootnoteReference\r\n * @typedef {import('mdast-util-from-markdown').CompileContext} CompileContext\r\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\r\n * @typedef {import('mdast-util-from-markdown').Handle} FromMarkdownHandle\r\n * @typedef {import('mdast-util-to-markdown').Handle} ToMarkdownHandle\r\n * @typedef {import('mdast-util-to-markdown').Map} Map\r\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\r\n */\n\nimport { ok as assert } from 'devlop';\nimport { normalizeIdentifier } from 'micromark-util-normalize-identifier';\nfootnoteReference.peek = footnoteReferencePeek;\n\n/**\r\n * Create an extension for `mdast-util-from-markdown` to enable GFM footnotes\r\n * in markdown.\r\n *\r\n * @returns {FromMarkdownExtension}\r\n *   Extension for `mdast-util-from-markdown`.\r\n */\nexport function gfmFootnoteFromMarkdown() {\n  return {\n    enter: {\n      gfmFootnoteDefinition: enterFootnoteDefinition,\n      gfmFootnoteDefinitionLabelString: enterFootnoteDefinitionLabelString,\n      gfmFootnoteCall: enterFootnoteCall,\n      gfmFootnoteCallString: enterFootnoteCallString\n    },\n    exit: {\n      gfmFootnoteDefinition: exitFootnoteDefinition,\n      gfmFootnoteDefinitionLabelString: exitFootnoteDefinitionLabelString,\n      gfmFootnoteCall: exitFootnoteCall,\n      gfmFootnoteCallString: exitFootnoteCallString\n    }\n  };\n}\n\n/**\r\n * Create an extension for `mdast-util-to-markdown` to enable GFM footnotes\r\n * in markdown.\r\n *\r\n * @returns {ToMarkdownExtension}\r\n *   Extension for `mdast-util-to-markdown`.\r\n */\nexport function gfmFootnoteToMarkdown() {\n  return {\n    // This is on by default already.\n    unsafe: [{\n      character: '[',\n      inConstruct: ['phrasing', 'label', 'reference']\n    }],\n    handlers: {\n      footnoteDefinition,\n      footnoteReference\n    }\n  };\n}\n\n/**\r\n * @this {CompileContext}\r\n * @type {FromMarkdownHandle}\r\n */\nfunction enterFootnoteDefinition(token) {\n  this.enter({\n    type: 'footnoteDefinition',\n    identifier: '',\n    label: '',\n    children: []\n  }, token);\n}\n\n/**\r\n * @this {CompileContext}\r\n * @type {FromMarkdownHandle}\r\n */\nfunction enterFootnoteDefinitionLabelString() {\n  this.buffer();\n}\n\n/**\r\n * @this {CompileContext}\r\n * @type {FromMarkdownHandle}\r\n */\nfunction exitFootnoteDefinitionLabelString(token) {\n  const label = this.resume();\n  const node = this.stack[this.stack.length - 1];\n  assert(node.type === 'footnoteDefinition');\n  node.label = label;\n  node.identifier = normalizeIdentifier(this.sliceSerialize(token)).toLowerCase();\n}\n\n/**\r\n * @this {CompileContext}\r\n * @type {FromMarkdownHandle}\r\n */\nfunction exitFootnoteDefinition(token) {\n  this.exit(token);\n}\n\n/**\r\n * @this {CompileContext}\r\n * @type {FromMarkdownHandle}\r\n */\nfunction enterFootnoteCall(token) {\n  this.enter({\n    type: 'footnoteReference',\n    identifier: '',\n    label: ''\n  }, token);\n}\n\n/**\r\n * @this {CompileContext}\r\n * @type {FromMarkdownHandle}\r\n */\nfunction enterFootnoteCallString() {\n  this.buffer();\n}\n\n/**\r\n * @this {CompileContext}\r\n * @type {FromMarkdownHandle}\r\n */\nfunction exitFootnoteCallString(token) {\n  const label = this.resume();\n  const node = this.stack[this.stack.length - 1];\n  assert(node.type === 'footnoteReference');\n  node.label = label;\n  node.identifier = normalizeIdentifier(this.sliceSerialize(token)).toLowerCase();\n}\n\n/**\r\n * @this {CompileContext}\r\n * @type {FromMarkdownHandle}\r\n */\nfunction exitFootnoteCall(token) {\n  this.exit(token);\n}\n\n/**\r\n * @type {ToMarkdownHandle}\r\n * @param {FootnoteReference} node\r\n */\nfunction footnoteReference(node, _, state, info) {\n  const tracker = state.createTracker(info);\n  let value = tracker.move('[^');\n  const exit = state.enter('footnoteReference');\n  const subexit = state.enter('reference');\n  value += tracker.move(state.safe(state.associationId(node), {\n    ...tracker.current(),\n    before: value,\n    after: ']'\n  }));\n  subexit();\n  exit();\n  value += tracker.move(']');\n  return value;\n}\n\n/** @type {ToMarkdownHandle} */\nfunction footnoteReferencePeek() {\n  return '[';\n}\n\n/**\r\n * @type {ToMarkdownHandle}\r\n * @param {FootnoteDefinition} node\r\n */\nfunction footnoteDefinition(node, _, state, info) {\n  const tracker = state.createTracker(info);\n  let value = tracker.move('[^');\n  const exit = state.enter('footnoteDefinition');\n  const subexit = state.enter('label');\n  value += tracker.move(state.safe(state.associationId(node), {\n    ...tracker.current(),\n    before: value,\n    after: ']'\n  }));\n  subexit();\n  value += tracker.move(']:' + (node.children && node.children.length > 0 ? ' ' : ''));\n  tracker.shift(4);\n  value += tracker.move(state.indentLines(state.containerFlow(node, tracker.current()), map));\n  exit();\n  return value;\n}\n\n/** @type {Map} */\nfunction map(line, index, blank) {\n  if (index === 0) {\n    return line;\n  }\n  return (blank ? '' : '    ') + line;\n}","map":{"version":3,"names":["ok","assert","normalizeIdentifier","footnoteReference","peek","footnoteReferencePeek","gfmFootnoteFromMarkdown","enter","gfmFootnoteDefinition","enterFootnoteDefinition","gfmFootnoteDefinitionLabelString","enterFootnoteDefinitionLabelString","gfmFootnoteCall","enterFootnoteCall","gfmFootnoteCallString","enterFootnoteCallString","exit","exitFootnoteDefinition","exitFootnoteDefinitionLabelString","exitFootnoteCall","exitFootnoteCallString","gfmFootnoteToMarkdown","unsafe","character","inConstruct","handlers","footnoteDefinition","token","type","identifier","label","children","buffer","resume","node","stack","length","sliceSerialize","toLowerCase","_","state","info","tracker","createTracker","value","move","subexit","safe","associationId","current","before","after","shift","indentLines","containerFlow","map","line","index","blank"],"sources":["E:/Documents/2024-1 YBIGTA/React/blog_git/Ybigta-Blog/frontend/node_modules/mdast-util-gfm-footnote/lib/index.js"],"sourcesContent":["/**\r\n * @typedef {import('mdast').FootnoteDefinition} FootnoteDefinition\r\n * @typedef {import('mdast').FootnoteReference} FootnoteReference\r\n * @typedef {import('mdast-util-from-markdown').CompileContext} CompileContext\r\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\r\n * @typedef {import('mdast-util-from-markdown').Handle} FromMarkdownHandle\r\n * @typedef {import('mdast-util-to-markdown').Handle} ToMarkdownHandle\r\n * @typedef {import('mdast-util-to-markdown').Map} Map\r\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\r\n */\r\n\r\nimport {ok as assert} from 'devlop'\r\nimport {normalizeIdentifier} from 'micromark-util-normalize-identifier'\r\n\r\nfootnoteReference.peek = footnoteReferencePeek\r\n\r\n/**\r\n * Create an extension for `mdast-util-from-markdown` to enable GFM footnotes\r\n * in markdown.\r\n *\r\n * @returns {FromMarkdownExtension}\r\n *   Extension for `mdast-util-from-markdown`.\r\n */\r\nexport function gfmFootnoteFromMarkdown() {\r\n  return {\r\n    enter: {\r\n      gfmFootnoteDefinition: enterFootnoteDefinition,\r\n      gfmFootnoteDefinitionLabelString: enterFootnoteDefinitionLabelString,\r\n      gfmFootnoteCall: enterFootnoteCall,\r\n      gfmFootnoteCallString: enterFootnoteCallString\r\n    },\r\n    exit: {\r\n      gfmFootnoteDefinition: exitFootnoteDefinition,\r\n      gfmFootnoteDefinitionLabelString: exitFootnoteDefinitionLabelString,\r\n      gfmFootnoteCall: exitFootnoteCall,\r\n      gfmFootnoteCallString: exitFootnoteCallString\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Create an extension for `mdast-util-to-markdown` to enable GFM footnotes\r\n * in markdown.\r\n *\r\n * @returns {ToMarkdownExtension}\r\n *   Extension for `mdast-util-to-markdown`.\r\n */\r\nexport function gfmFootnoteToMarkdown() {\r\n  return {\r\n    // This is on by default already.\r\n    unsafe: [{character: '[', inConstruct: ['phrasing', 'label', 'reference']}],\r\n    handlers: {footnoteDefinition, footnoteReference}\r\n  }\r\n}\r\n\r\n/**\r\n * @this {CompileContext}\r\n * @type {FromMarkdownHandle}\r\n */\r\nfunction enterFootnoteDefinition(token) {\r\n  this.enter(\r\n    {type: 'footnoteDefinition', identifier: '', label: '', children: []},\r\n    token\r\n  )\r\n}\r\n\r\n/**\r\n * @this {CompileContext}\r\n * @type {FromMarkdownHandle}\r\n */\r\nfunction enterFootnoteDefinitionLabelString() {\r\n  this.buffer()\r\n}\r\n\r\n/**\r\n * @this {CompileContext}\r\n * @type {FromMarkdownHandle}\r\n */\r\nfunction exitFootnoteDefinitionLabelString(token) {\r\n  const label = this.resume()\r\n  const node = this.stack[this.stack.length - 1]\r\n  assert(node.type === 'footnoteDefinition')\r\n  node.label = label\r\n  node.identifier = normalizeIdentifier(\r\n    this.sliceSerialize(token)\r\n  ).toLowerCase()\r\n}\r\n\r\n/**\r\n * @this {CompileContext}\r\n * @type {FromMarkdownHandle}\r\n */\r\nfunction exitFootnoteDefinition(token) {\r\n  this.exit(token)\r\n}\r\n\r\n/**\r\n * @this {CompileContext}\r\n * @type {FromMarkdownHandle}\r\n */\r\nfunction enterFootnoteCall(token) {\r\n  this.enter({type: 'footnoteReference', identifier: '', label: ''}, token)\r\n}\r\n\r\n/**\r\n * @this {CompileContext}\r\n * @type {FromMarkdownHandle}\r\n */\r\nfunction enterFootnoteCallString() {\r\n  this.buffer()\r\n}\r\n\r\n/**\r\n * @this {CompileContext}\r\n * @type {FromMarkdownHandle}\r\n */\r\nfunction exitFootnoteCallString(token) {\r\n  const label = this.resume()\r\n  const node = this.stack[this.stack.length - 1]\r\n  assert(node.type === 'footnoteReference')\r\n  node.label = label\r\n  node.identifier = normalizeIdentifier(\r\n    this.sliceSerialize(token)\r\n  ).toLowerCase()\r\n}\r\n\r\n/**\r\n * @this {CompileContext}\r\n * @type {FromMarkdownHandle}\r\n */\r\nfunction exitFootnoteCall(token) {\r\n  this.exit(token)\r\n}\r\n\r\n/**\r\n * @type {ToMarkdownHandle}\r\n * @param {FootnoteReference} node\r\n */\r\nfunction footnoteReference(node, _, state, info) {\r\n  const tracker = state.createTracker(info)\r\n  let value = tracker.move('[^')\r\n  const exit = state.enter('footnoteReference')\r\n  const subexit = state.enter('reference')\r\n  value += tracker.move(\r\n    state.safe(state.associationId(node), {\r\n      ...tracker.current(),\r\n      before: value,\r\n      after: ']'\r\n    })\r\n  )\r\n  subexit()\r\n  exit()\r\n  value += tracker.move(']')\r\n  return value\r\n}\r\n\r\n/** @type {ToMarkdownHandle} */\r\nfunction footnoteReferencePeek() {\r\n  return '['\r\n}\r\n\r\n/**\r\n * @type {ToMarkdownHandle}\r\n * @param {FootnoteDefinition} node\r\n */\r\nfunction footnoteDefinition(node, _, state, info) {\r\n  const tracker = state.createTracker(info)\r\n  let value = tracker.move('[^')\r\n  const exit = state.enter('footnoteDefinition')\r\n  const subexit = state.enter('label')\r\n  value += tracker.move(\r\n    state.safe(state.associationId(node), {\r\n      ...tracker.current(),\r\n      before: value,\r\n      after: ']'\r\n    })\r\n  )\r\n  subexit()\r\n  value += tracker.move(\r\n    ']:' + (node.children && node.children.length > 0 ? ' ' : '')\r\n  )\r\n  tracker.shift(4)\r\n  value += tracker.move(\r\n    state.indentLines(state.containerFlow(node, tracker.current()), map)\r\n  )\r\n  exit()\r\n\r\n  return value\r\n}\r\n\r\n/** @type {Map} */\r\nfunction map(line, index, blank) {\r\n  if (index === 0) {\r\n    return line\r\n  }\r\n\r\n  return (blank ? '' : '    ') + line\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}