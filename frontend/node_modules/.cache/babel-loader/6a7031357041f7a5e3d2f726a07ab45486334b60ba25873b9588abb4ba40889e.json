{"ast":null,"code":"/**\r\n * @typedef {import('../types.js').AssociationId} AssociationId\r\n */\n\nimport { decodeString } from 'micromark-util-decode-string';\n\n/**\r\n * Get an identifier from an association to match it to others.\r\n *\r\n * Associations are nodes that match to something else through an ID:\r\n * <https://github.com/syntax-tree/mdast#association>.\r\n *\r\n * The `label` of an association is the string value: character escapes and\r\n * references work, and casing is intact.\r\n * The `identifier` is used to match one association to another:\r\n * controversially, character escapes and references don’t work in this\r\n * matching: `&copy;` does not match `©`, and `\\+` does not match `+`.\r\n *\r\n * But casing is ignored (and whitespace) is trimmed and collapsed: ` A\\nb`\r\n * matches `a b`.\r\n * So, we do prefer the label when figuring out how we’re going to serialize:\r\n * it has whitespace, casing, and we can ignore most useless character\r\n * escapes and all character references.\r\n *\r\n * @type {AssociationId}\r\n */\nexport function association(node) {\n  if (node.label || !node.identifier) {\n    return node.label || '';\n  }\n  return decodeString(node.identifier);\n}","map":{"version":3,"names":["decodeString","association","node","label","identifier"],"sources":["E:/Documents/2024-1 YBIGTA/Ybigta_BLOG/Ybigta-Blog/frontend/node_modules/mdast-util-to-markdown/lib/util/association.js"],"sourcesContent":["/**\r\n * @typedef {import('../types.js').AssociationId} AssociationId\r\n */\r\n\r\nimport {decodeString} from 'micromark-util-decode-string'\r\n\r\n/**\r\n * Get an identifier from an association to match it to others.\r\n *\r\n * Associations are nodes that match to something else through an ID:\r\n * <https://github.com/syntax-tree/mdast#association>.\r\n *\r\n * The `label` of an association is the string value: character escapes and\r\n * references work, and casing is intact.\r\n * The `identifier` is used to match one association to another:\r\n * controversially, character escapes and references don’t work in this\r\n * matching: `&copy;` does not match `©`, and `\\+` does not match `+`.\r\n *\r\n * But casing is ignored (and whitespace) is trimmed and collapsed: ` A\\nb`\r\n * matches `a b`.\r\n * So, we do prefer the label when figuring out how we’re going to serialize:\r\n * it has whitespace, casing, and we can ignore most useless character\r\n * escapes and all character references.\r\n *\r\n * @type {AssociationId}\r\n */\r\nexport function association(node) {\r\n  if (node.label || !node.identifier) {\r\n    return node.label || ''\r\n  }\r\n\r\n  return decodeString(node.identifier)\r\n}\r\n"],"mappings":"AAAA;AACA;AACA;;AAEA,SAAQA,YAAY,QAAO,8BAA8B;;AAEzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,WAAWA,CAACC,IAAI,EAAE;EAChC,IAAIA,IAAI,CAACC,KAAK,IAAI,CAACD,IAAI,CAACE,UAAU,EAAE;IAClC,OAAOF,IAAI,CAACC,KAAK,IAAI,EAAE;EACzB;EAEA,OAAOH,YAAY,CAACE,IAAI,CAACE,UAAU,CAAC;AACtC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}