{"ast":null,"code":"/**\r\n * @typedef {import('micromark-util-types').Effects} Effects\r\n * @typedef {import('micromark-util-types').State} State\r\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\r\n * @typedef {import('micromark-util-types').TokenType} TokenType\r\n */\n\nimport { markdownLineEnding, markdownSpace } from 'micromark-util-character';\nimport { codes, constants, types } from 'micromark-util-symbol';\nimport { ok as assert } from 'devlop';\n\n/**\r\n * Parse labels.\r\n *\r\n * > ðŸ‘‰ **Note**: labels in markdown are capped at 999 characters in the string.\r\n *\r\n * ###### Examples\r\n *\r\n * ```markdown\r\n * [a]\r\n * [a\r\n * b]\r\n * [a\\]b]\r\n * ```\r\n *\r\n * @this {TokenizeContext}\r\n *   Tokenize context.\r\n * @param {Effects} effects\r\n *   Context.\r\n * @param {State} ok\r\n *   State switched to when successful.\r\n * @param {State} nok\r\n *   State switched to when unsuccessful.\r\n * @param {TokenType} type\r\n *   Type of the whole label (`[a]`).\r\n * @param {TokenType} markerType\r\n *   Type for the markers (`[` and `]`).\r\n * @param {TokenType} stringType\r\n *   Type for the identifier (`a`).\r\n * @returns {State}\r\n *   Start state.\r\n */\n// eslint-disable-next-line max-params\nexport function factoryLabel(effects, ok, nok, type, markerType, stringType) {\n  const self = this;\n  let size = 0;\n  /** @type {boolean} */\n  let seen;\n  return start;\n\n  /**\r\n   * Start of label.\r\n   *\r\n   * ```markdown\r\n   * > | [a]\r\n   *     ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\n  function start(code) {\n    assert(code === codes.leftSquareBracket, 'expected `[`');\n    effects.enter(type);\n    effects.enter(markerType);\n    effects.consume(code);\n    effects.exit(markerType);\n    effects.enter(stringType);\n    return atBreak;\n  }\n\n  /**\r\n   * In label, at something, before something else.\r\n   *\r\n   * ```markdown\r\n   * > | [a]\r\n   *      ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\n  function atBreak(code) {\n    if (size > constants.linkReferenceSizeMax || code === codes.eof || code === codes.leftSquareBracket || code === codes.rightSquareBracket && !seen ||\n    // To do: remove in the future once weâ€™ve switched from\n    // `micromark-extension-footnote` to `micromark-extension-gfm-footnote`,\n    // which doesnâ€™t need this.\n    // Hidden footnotes hook.\n    /* c8 ignore next 3 */\n    code === codes.caret && !size && '_hiddenFootnoteSupport' in self.parser.constructs) {\n      return nok(code);\n    }\n    if (code === codes.rightSquareBracket) {\n      effects.exit(stringType);\n      effects.enter(markerType);\n      effects.consume(code);\n      effects.exit(markerType);\n      effects.exit(type);\n      return ok;\n    }\n\n    // To do: indent? Link chunks and EOLs together?\n    if (markdownLineEnding(code)) {\n      effects.enter(types.lineEnding);\n      effects.consume(code);\n      effects.exit(types.lineEnding);\n      return atBreak;\n    }\n    effects.enter(types.chunkString, {\n      contentType: constants.contentTypeString\n    });\n    return labelInside(code);\n  }\n\n  /**\r\n   * In label, in text.\r\n   *\r\n   * ```markdown\r\n   * > | [a]\r\n   *      ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\n  function labelInside(code) {\n    if (code === codes.eof || code === codes.leftSquareBracket || code === codes.rightSquareBracket || markdownLineEnding(code) || size++ > constants.linkReferenceSizeMax) {\n      effects.exit(types.chunkString);\n      return atBreak(code);\n    }\n    effects.consume(code);\n    if (!seen) seen = !markdownSpace(code);\n    return code === codes.backslash ? labelEscape : labelInside;\n  }\n\n  /**\r\n   * After `\\`, at a special character.\r\n   *\r\n   * ```markdown\r\n   * > | [a\\*a]\r\n   *        ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\n  function labelEscape(code) {\n    if (code === codes.leftSquareBracket || code === codes.backslash || code === codes.rightSquareBracket) {\n      effects.consume(code);\n      size++;\n      return labelInside;\n    }\n    return labelInside(code);\n  }\n}","map":{"version":3,"names":["markdownLineEnding","markdownSpace","codes","constants","types","ok","assert","factoryLabel","effects","nok","type","markerType","stringType","self","size","seen","start","code","leftSquareBracket","enter","consume","exit","atBreak","linkReferenceSizeMax","eof","rightSquareBracket","caret","parser","constructs","lineEnding","chunkString","contentType","contentTypeString","labelInside","backslash","labelEscape"],"sources":["E:/Documents/2024-1 YBIGTA/React/blog_git/Ybigta-Blog/frontend/node_modules/micromark-factory-label/dev/index.js"],"sourcesContent":["/**\r\n * @typedef {import('micromark-util-types').Effects} Effects\r\n * @typedef {import('micromark-util-types').State} State\r\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\r\n * @typedef {import('micromark-util-types').TokenType} TokenType\r\n */\r\n\r\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\r\nimport {codes, constants, types} from 'micromark-util-symbol'\r\nimport {ok as assert} from 'devlop'\r\n\r\n/**\r\n * Parse labels.\r\n *\r\n * > ðŸ‘‰ **Note**: labels in markdown are capped at 999 characters in the string.\r\n *\r\n * ###### Examples\r\n *\r\n * ```markdown\r\n * [a]\r\n * [a\r\n * b]\r\n * [a\\]b]\r\n * ```\r\n *\r\n * @this {TokenizeContext}\r\n *   Tokenize context.\r\n * @param {Effects} effects\r\n *   Context.\r\n * @param {State} ok\r\n *   State switched to when successful.\r\n * @param {State} nok\r\n *   State switched to when unsuccessful.\r\n * @param {TokenType} type\r\n *   Type of the whole label (`[a]`).\r\n * @param {TokenType} markerType\r\n *   Type for the markers (`[` and `]`).\r\n * @param {TokenType} stringType\r\n *   Type for the identifier (`a`).\r\n * @returns {State}\r\n *   Start state.\r\n */\r\n// eslint-disable-next-line max-params\r\nexport function factoryLabel(effects, ok, nok, type, markerType, stringType) {\r\n  const self = this\r\n  let size = 0\r\n  /** @type {boolean} */\r\n  let seen\r\n\r\n  return start\r\n\r\n  /**\r\n   * Start of label.\r\n   *\r\n   * ```markdown\r\n   * > | [a]\r\n   *     ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function start(code) {\r\n    assert(code === codes.leftSquareBracket, 'expected `[`')\r\n    effects.enter(type)\r\n    effects.enter(markerType)\r\n    effects.consume(code)\r\n    effects.exit(markerType)\r\n    effects.enter(stringType)\r\n    return atBreak\r\n  }\r\n\r\n  /**\r\n   * In label, at something, before something else.\r\n   *\r\n   * ```markdown\r\n   * > | [a]\r\n   *      ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function atBreak(code) {\r\n    if (\r\n      size > constants.linkReferenceSizeMax ||\r\n      code === codes.eof ||\r\n      code === codes.leftSquareBracket ||\r\n      (code === codes.rightSquareBracket && !seen) ||\r\n      // To do: remove in the future once weâ€™ve switched from\r\n      // `micromark-extension-footnote` to `micromark-extension-gfm-footnote`,\r\n      // which doesnâ€™t need this.\r\n      // Hidden footnotes hook.\r\n      /* c8 ignore next 3 */\r\n      (code === codes.caret &&\r\n        !size &&\r\n        '_hiddenFootnoteSupport' in self.parser.constructs)\r\n    ) {\r\n      return nok(code)\r\n    }\r\n\r\n    if (code === codes.rightSquareBracket) {\r\n      effects.exit(stringType)\r\n      effects.enter(markerType)\r\n      effects.consume(code)\r\n      effects.exit(markerType)\r\n      effects.exit(type)\r\n      return ok\r\n    }\r\n\r\n    // To do: indent? Link chunks and EOLs together?\r\n    if (markdownLineEnding(code)) {\r\n      effects.enter(types.lineEnding)\r\n      effects.consume(code)\r\n      effects.exit(types.lineEnding)\r\n      return atBreak\r\n    }\r\n\r\n    effects.enter(types.chunkString, {contentType: constants.contentTypeString})\r\n    return labelInside(code)\r\n  }\r\n\r\n  /**\r\n   * In label, in text.\r\n   *\r\n   * ```markdown\r\n   * > | [a]\r\n   *      ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function labelInside(code) {\r\n    if (\r\n      code === codes.eof ||\r\n      code === codes.leftSquareBracket ||\r\n      code === codes.rightSquareBracket ||\r\n      markdownLineEnding(code) ||\r\n      size++ > constants.linkReferenceSizeMax\r\n    ) {\r\n      effects.exit(types.chunkString)\r\n      return atBreak(code)\r\n    }\r\n\r\n    effects.consume(code)\r\n    if (!seen) seen = !markdownSpace(code)\r\n    return code === codes.backslash ? labelEscape : labelInside\r\n  }\r\n\r\n  /**\r\n   * After `\\`, at a special character.\r\n   *\r\n   * ```markdown\r\n   * > | [a\\*a]\r\n   *        ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function labelEscape(code) {\r\n    if (\r\n      code === codes.leftSquareBracket ||\r\n      code === codes.backslash ||\r\n      code === codes.rightSquareBracket\r\n    ) {\r\n      effects.consume(code)\r\n      size++\r\n      return labelInside\r\n    }\r\n\r\n    return labelInside(code)\r\n  }\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}