{"ast":null,"code":"/**\r\n * @typedef {import('mdast').Link} Link\r\n * @typedef {import('mdast').Parents} Parents\r\n * @typedef {import('../types.js').Exit} Exit\r\n * @typedef {import('../types.js').Info} Info\r\n * @typedef {import('../types.js').State} State\r\n */\n\nimport { checkQuote } from '../util/check-quote.js';\nimport { formatLinkAsAutolink } from '../util/format-link-as-autolink.js';\nlink.peek = linkPeek;\n\n/**\r\n * @param {Link} node\r\n * @param {Parents | undefined} _\r\n * @param {State} state\r\n * @param {Info} info\r\n * @returns {string}\r\n */\nexport function link(node, _, state, info) {\n  const quote = checkQuote(state);\n  const suffix = quote === '\"' ? 'Quote' : 'Apostrophe';\n  const tracker = state.createTracker(info);\n  /** @type {Exit} */\n  let exit;\n  /** @type {Exit} */\n  let subexit;\n  if (formatLinkAsAutolink(node, state)) {\n    // Hide the fact that we’re in phrasing, because escapes don’t work.\n    const stack = state.stack;\n    state.stack = [];\n    exit = state.enter('autolink');\n    let value = tracker.move('<');\n    value += tracker.move(state.containerPhrasing(node, {\n      before: value,\n      after: '>',\n      ...tracker.current()\n    }));\n    value += tracker.move('>');\n    exit();\n    state.stack = stack;\n    return value;\n  }\n  exit = state.enter('link');\n  subexit = state.enter('label');\n  let value = tracker.move('[');\n  value += tracker.move(state.containerPhrasing(node, {\n    before: value,\n    after: '](',\n    ...tracker.current()\n  }));\n  value += tracker.move('](');\n  subexit();\n  if (\n  // If there’s no url but there is a title…\n  !node.url && node.title ||\n  // If there are control characters or whitespace.\n  /[\\0- \\u007F]/.test(node.url)) {\n    subexit = state.enter('destinationLiteral');\n    value += tracker.move('<');\n    value += tracker.move(state.safe(node.url, {\n      before: value,\n      after: '>',\n      ...tracker.current()\n    }));\n    value += tracker.move('>');\n  } else {\n    // No whitespace, raw is prettier.\n    subexit = state.enter('destinationRaw');\n    value += tracker.move(state.safe(node.url, {\n      before: value,\n      after: node.title ? ' ' : ')',\n      ...tracker.current()\n    }));\n  }\n  subexit();\n  if (node.title) {\n    subexit = state.enter(`title${suffix}`);\n    value += tracker.move(' ' + quote);\n    value += tracker.move(state.safe(node.title, {\n      before: value,\n      after: quote,\n      ...tracker.current()\n    }));\n    value += tracker.move(quote);\n    subexit();\n  }\n  value += tracker.move(')');\n  exit();\n  return value;\n}\n\n/**\r\n * @param {Link} node\r\n * @param {Parents | undefined} _\r\n * @param {State} state\r\n * @returns {string}\r\n */\nfunction linkPeek(node, _, state) {\n  return formatLinkAsAutolink(node, state) ? '<' : '[';\n}","map":{"version":3,"names":["checkQuote","formatLinkAsAutolink","link","peek","linkPeek","node","_","state","info","quote","suffix","tracker","createTracker","exit","subexit","stack","enter","value","move","containerPhrasing","before","after","current","url","title","test","safe"],"sources":["E:/Documents/2024-1 YBIGTA/React/blog_git/Ybigta-Blog/frontend/node_modules/mdast-util-to-markdown/lib/handle/link.js"],"sourcesContent":["/**\r\n * @typedef {import('mdast').Link} Link\r\n * @typedef {import('mdast').Parents} Parents\r\n * @typedef {import('../types.js').Exit} Exit\r\n * @typedef {import('../types.js').Info} Info\r\n * @typedef {import('../types.js').State} State\r\n */\r\n\r\nimport {checkQuote} from '../util/check-quote.js'\r\nimport {formatLinkAsAutolink} from '../util/format-link-as-autolink.js'\r\n\r\nlink.peek = linkPeek\r\n\r\n/**\r\n * @param {Link} node\r\n * @param {Parents | undefined} _\r\n * @param {State} state\r\n * @param {Info} info\r\n * @returns {string}\r\n */\r\nexport function link(node, _, state, info) {\r\n  const quote = checkQuote(state)\r\n  const suffix = quote === '\"' ? 'Quote' : 'Apostrophe'\r\n  const tracker = state.createTracker(info)\r\n  /** @type {Exit} */\r\n  let exit\r\n  /** @type {Exit} */\r\n  let subexit\r\n\r\n  if (formatLinkAsAutolink(node, state)) {\r\n    // Hide the fact that we’re in phrasing, because escapes don’t work.\r\n    const stack = state.stack\r\n    state.stack = []\r\n    exit = state.enter('autolink')\r\n    let value = tracker.move('<')\r\n    value += tracker.move(\r\n      state.containerPhrasing(node, {\r\n        before: value,\r\n        after: '>',\r\n        ...tracker.current()\r\n      })\r\n    )\r\n    value += tracker.move('>')\r\n    exit()\r\n    state.stack = stack\r\n    return value\r\n  }\r\n\r\n  exit = state.enter('link')\r\n  subexit = state.enter('label')\r\n  let value = tracker.move('[')\r\n  value += tracker.move(\r\n    state.containerPhrasing(node, {\r\n      before: value,\r\n      after: '](',\r\n      ...tracker.current()\r\n    })\r\n  )\r\n  value += tracker.move('](')\r\n  subexit()\r\n\r\n  if (\r\n    // If there’s no url but there is a title…\r\n    (!node.url && node.title) ||\r\n    // If there are control characters or whitespace.\r\n    /[\\0- \\u007F]/.test(node.url)\r\n  ) {\r\n    subexit = state.enter('destinationLiteral')\r\n    value += tracker.move('<')\r\n    value += tracker.move(\r\n      state.safe(node.url, {before: value, after: '>', ...tracker.current()})\r\n    )\r\n    value += tracker.move('>')\r\n  } else {\r\n    // No whitespace, raw is prettier.\r\n    subexit = state.enter('destinationRaw')\r\n    value += tracker.move(\r\n      state.safe(node.url, {\r\n        before: value,\r\n        after: node.title ? ' ' : ')',\r\n        ...tracker.current()\r\n      })\r\n    )\r\n  }\r\n\r\n  subexit()\r\n\r\n  if (node.title) {\r\n    subexit = state.enter(`title${suffix}`)\r\n    value += tracker.move(' ' + quote)\r\n    value += tracker.move(\r\n      state.safe(node.title, {\r\n        before: value,\r\n        after: quote,\r\n        ...tracker.current()\r\n      })\r\n    )\r\n    value += tracker.move(quote)\r\n    subexit()\r\n  }\r\n\r\n  value += tracker.move(')')\r\n\r\n  exit()\r\n  return value\r\n}\r\n\r\n/**\r\n * @param {Link} node\r\n * @param {Parents | undefined} _\r\n * @param {State} state\r\n * @returns {string}\r\n */\r\nfunction linkPeek(node, _, state) {\r\n  return formatLinkAsAutolink(node, state) ? '<' : '['\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}