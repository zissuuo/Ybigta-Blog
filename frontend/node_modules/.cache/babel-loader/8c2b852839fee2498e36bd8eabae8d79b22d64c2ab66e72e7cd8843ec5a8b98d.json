{"ast":null,"code":"/**\r\n * @typedef {import('hast').Nodes} Nodes\r\n */\n\n// HTML whitespace expression.\n// See <https://infra.spec.whatwg.org/#ascii-whitespace>.\nconst re = /[ \\t\\n\\f\\r]/g;\n\n/**\r\n * Check if the given value is *inter-element whitespace*.\r\n *\r\n * @param {Nodes | string} thing\r\n *   Thing to check (`Node` or `string`).\r\n * @returns {boolean}\r\n *   Whether the `value` is inter-element whitespace (`boolean`): consisting of\r\n *   zero or more of space, tab (`\\t`), line feed (`\\n`), carriage return\r\n *   (`\\r`), or form feed (`\\f`); if a node is passed it must be a `Text` node,\r\n *   whose `value` field is checked.\r\n */\nexport function whitespace(thing) {\n  return typeof thing === 'object' ? thing.type === 'text' ? empty(thing.value) : false : empty(thing);\n}\n\n/**\r\n * @param {string} value\r\n * @returns {boolean}\r\n */\nfunction empty(value) {\n  return value.replace(re, '') === '';\n}","map":{"version":3,"names":["re","whitespace","thing","type","empty","value","replace"],"sources":["E:/Documents/2024-1 YBIGTA/Ybigta_BLOG/blog_git/Ybigta-Blog/frontend/node_modules/hast-util-whitespace/lib/index.js"],"sourcesContent":["/**\r\n * @typedef {import('hast').Nodes} Nodes\r\n */\r\n\r\n// HTML whitespace expression.\r\n// See <https://infra.spec.whatwg.org/#ascii-whitespace>.\r\nconst re = /[ \\t\\n\\f\\r]/g\r\n\r\n/**\r\n * Check if the given value is *inter-element whitespace*.\r\n *\r\n * @param {Nodes | string} thing\r\n *   Thing to check (`Node` or `string`).\r\n * @returns {boolean}\r\n *   Whether the `value` is inter-element whitespace (`boolean`): consisting of\r\n *   zero or more of space, tab (`\\t`), line feed (`\\n`), carriage return\r\n *   (`\\r`), or form feed (`\\f`); if a node is passed it must be a `Text` node,\r\n *   whose `value` field is checked.\r\n */\r\nexport function whitespace(thing) {\r\n  return typeof thing === 'object'\r\n    ? thing.type === 'text'\r\n      ? empty(thing.value)\r\n      : false\r\n    : empty(thing)\r\n}\r\n\r\n/**\r\n * @param {string} value\r\n * @returns {boolean}\r\n */\r\nfunction empty(value) {\r\n  return value.replace(re, '') === ''\r\n}\r\n"],"mappings":"AAAA;AACA;AACA;;AAEA;AACA;AACA,MAAMA,EAAE,GAAG,cAAc;;AAEzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,UAAUA,CAACC,KAAK,EAAE;EAChC,OAAO,OAAOA,KAAK,KAAK,QAAQ,GAC5BA,KAAK,CAACC,IAAI,KAAK,MAAM,GACnBC,KAAK,CAACF,KAAK,CAACG,KAAK,CAAC,GAClB,KAAK,GACPD,KAAK,CAACF,KAAK,CAAC;AAClB;;AAEA;AACA;AACA;AACA;AACA,SAASE,KAAKA,CAACC,KAAK,EAAE;EACpB,OAAOA,KAAK,CAACC,OAAO,CAACN,EAAE,EAAE,EAAE,CAAC,KAAK,EAAE;AACrC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}