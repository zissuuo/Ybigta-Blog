{"ast":null,"code":"/**\r\n * @typedef {import('unist').Node} Node\r\n * @typedef {import('unist').Point} Point\r\n * @typedef {import('unist').Position} Position\r\n * @typedef {import('vfile-message').Options} MessageOptions\r\n * @typedef {import('../index.js').Data} Data\r\n * @typedef {import('../index.js').Value} Value\r\n */\n\n/**\r\n * @typedef {object & {type: string, position?: Position | undefined}} NodeLike\r\n *\r\n * @typedef {Options | URL | VFile | Value} Compatible\r\n *   Things that can be passed to the constructor.\r\n *\r\n * @typedef VFileCoreOptions\r\n *   Set multiple values.\r\n * @property {string | null | undefined} [basename]\r\n *   Set `basename` (name).\r\n * @property {string | null | undefined} [cwd]\r\n *   Set `cwd` (working directory).\r\n * @property {Data | null | undefined} [data]\r\n *   Set `data` (associated info).\r\n * @property {string | null | undefined} [dirname]\r\n *   Set `dirname` (path w/o basename).\r\n * @property {string | null | undefined} [extname]\r\n *   Set `extname` (extension with dot).\r\n * @property {Array<string> | null | undefined} [history]\r\n *   Set `history` (paths the file moved between).\r\n * @property {URL | string | null | undefined} [path]\r\n *   Set `path` (current path).\r\n * @property {string | null | undefined} [stem]\r\n *   Set `stem` (name without extension).\r\n * @property {Value | null | undefined} [value]\r\n *   Set `value` (the contents of the file).\r\n *\r\n * @typedef Map\r\n *   Raw source map.\r\n *\r\n *   See:\r\n *   <https://github.com/mozilla/source-map/blob/60adcb0/source-map.d.ts#L15-L23>.\r\n * @property {number} version\r\n *   Which version of the source map spec this map is following.\r\n * @property {Array<string>} sources\r\n *   An array of URLs to the original source files.\r\n * @property {Array<string>} names\r\n *   An array of identifiers which can be referenced by individual mappings.\r\n * @property {string | undefined} [sourceRoot]\r\n *   The URL root from which all sources are relative.\r\n * @property {Array<string> | undefined} [sourcesContent]\r\n *   An array of contents of the original source files.\r\n * @property {string} mappings\r\n *   A string of base64 VLQs which contain the actual mappings.\r\n * @property {string} file\r\n *   The generated file this source map is associated with.\r\n *\r\n * @typedef {Record<string, unknown> & VFileCoreOptions} Options\r\n *   Configuration.\r\n *\r\n *   A bunch of keys that will be shallow copied over to the new file.\r\n *\r\n * @typedef {Record<string, unknown>} ReporterSettings\r\n *   Configuration for reporters.\r\n */\n\n/**\r\n * @template [Settings=ReporterSettings]\r\n *   Options type.\r\n * @callback Reporter\r\n *   Type for a reporter.\r\n * @param {Array<VFile>} files\r\n *   Files to report.\r\n * @param {Settings} options\r\n *   Configuration.\r\n * @returns {string}\r\n *   Report.\r\n */\n\nimport { VFileMessage } from 'vfile-message';\nimport { path } from 'vfile/do-not-use-conditional-minpath';\nimport { proc } from 'vfile/do-not-use-conditional-minproc';\nimport { urlToPath, isUrl } from 'vfile/do-not-use-conditional-minurl';\n\n/**\r\n * Order of setting (least specific to most), we need this because otherwise\r\n * `{stem: 'a', path: '~/b.js'}` would throw, as a path is needed before a\r\n * stem can be set.\r\n */\nconst order = /** @type {const} */['history', 'path', 'basename', 'stem', 'extname', 'dirname'];\nexport class VFile {\n  /**\r\n   * Create a new virtual file.\r\n   *\r\n   * `options` is treated as:\r\n   *\r\n   * *   `string` or `Uint8Array` — `{value: options}`\r\n   * *   `URL` — `{path: options}`\r\n   * *   `VFile` — shallow copies its data over to the new file\r\n   * *   `object` — all fields are shallow copied over to the new file\r\n   *\r\n   * Path related fields are set in the following order (least specific to\r\n   * most specific): `history`, `path`, `basename`, `stem`, `extname`,\r\n   * `dirname`.\r\n   *\r\n   * You cannot set `dirname` or `extname` without setting either `history`,\r\n   * `path`, `basename`, or `stem` too.\r\n   *\r\n   * @param {Compatible | null | undefined} [value]\r\n   *   File value.\r\n   * @returns\r\n   *   New instance.\r\n   */\n  constructor(value) {\n    /** @type {Options | VFile} */\n    let options;\n    if (!value) {\n      options = {};\n    } else if (isUrl(value)) {\n      options = {\n        path: value\n      };\n    } else if (typeof value === 'string' || isUint8Array(value)) {\n      options = {\n        value\n      };\n    } else {\n      options = value;\n    }\n\n    /* eslint-disable no-unused-expressions */\n\n    /**\r\n     * Base of `path` (default: `process.cwd()` or `'/'` in browsers).\r\n     *\r\n     * @type {string}\r\n     */\n    this.cwd = proc.cwd();\n\n    /**\r\n     * Place to store custom info (default: `{}`).\r\n     *\r\n     * It’s OK to store custom data directly on the file but moving it to\r\n     * `data` is recommended.\r\n     *\r\n     * @type {Data}\r\n     */\n    this.data = {};\n\n    /**\r\n     * List of file paths the file moved between.\r\n     *\r\n     * The first is the original path and the last is the current path.\r\n     *\r\n     * @type {Array<string>}\r\n     */\n    this.history = [];\n\n    /**\r\n     * List of messages associated with the file.\r\n     *\r\n     * @type {Array<VFileMessage>}\r\n     */\n    this.messages = [];\n\n    /**\r\n     * Raw value.\r\n     *\r\n     * @type {Value}\r\n     */\n    this.value;\n\n    // The below are non-standard, they are “well-known”.\n    // As in, used in several tools.\n    /**\r\n     * Source map.\r\n     *\r\n     * This type is equivalent to the `RawSourceMap` type from the `source-map`\r\n     * module.\r\n     *\r\n     * @type {Map | null | undefined}\r\n     */\n    this.map;\n\n    /**\r\n     * Custom, non-string, compiled, representation.\r\n     *\r\n     * This is used by unified to store non-string results.\r\n     * One example is when turning markdown into React nodes.\r\n     *\r\n     * @type {unknown}\r\n     */\n    this.result;\n\n    /**\r\n     * Whether a file was saved to disk.\r\n     *\r\n     * This is used by vfile reporters.\r\n     *\r\n     * @type {boolean}\r\n     */\n    this.stored;\n    /* eslint-enable no-unused-expressions */\n\n    // Set path related properties in the correct order.\n    let index = -1;\n    while (++index < order.length) {\n      const prop = order[index];\n\n      // Note: we specifically use `in` instead of `hasOwnProperty` to accept\n      // `vfile`s too.\n      if (prop in options && options[prop] !== undefined && options[prop] !== null) {\n        // @ts-expect-error: TS doesn’t understand basic reality.\n        this[prop] = prop === 'history' ? [...options[prop]] : options[prop];\n      }\n    }\n\n    /** @type {string} */\n    let prop;\n\n    // Set non-path related properties.\n    for (prop in options) {\n      // @ts-expect-error: fine to set other things.\n      if (!order.includes(prop)) {\n        // @ts-expect-error: fine to set other things.\n        this[prop] = options[prop];\n      }\n    }\n  }\n\n  /**\r\n   * Get the basename (including extname) (example: `'index.min.js'`).\r\n   *\r\n   * @returns {string | undefined}\r\n   *   Basename.\r\n   */\n  get basename() {\n    return typeof this.path === 'string' ? path.basename(this.path) : undefined;\n  }\n\n  /**\r\n   * Set basename (including extname) (`'index.min.js'`).\r\n   *\r\n   * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\\'`\r\n   * on windows).\r\n   * Cannot be nullified (use `file.path = file.dirname` instead).\r\n   *\r\n   * @param {string} basename\r\n   *   Basename.\r\n   * @returns {undefined}\r\n   *   Nothing.\r\n   */\n  set basename(basename) {\n    assertNonEmpty(basename, 'basename');\n    assertPart(basename, 'basename');\n    this.path = path.join(this.dirname || '', basename);\n  }\n\n  /**\r\n   * Get the parent path (example: `'~'`).\r\n   *\r\n   * @returns {string | undefined}\r\n   *   Dirname.\r\n   */\n  get dirname() {\n    return typeof this.path === 'string' ? path.dirname(this.path) : undefined;\n  }\n\n  /**\r\n   * Set the parent path (example: `'~'`).\r\n   *\r\n   * Cannot be set if there’s no `path` yet.\r\n   *\r\n   * @param {string | undefined} dirname\r\n   *   Dirname.\r\n   * @returns {undefined}\r\n   *   Nothing.\r\n   */\n  set dirname(dirname) {\n    assertPath(this.basename, 'dirname');\n    this.path = path.join(dirname || '', this.basename);\n  }\n\n  /**\r\n   * Get the extname (including dot) (example: `'.js'`).\r\n   *\r\n   * @returns {string | undefined}\r\n   *   Extname.\r\n   */\n  get extname() {\n    return typeof this.path === 'string' ? path.extname(this.path) : undefined;\n  }\n\n  /**\r\n   * Set the extname (including dot) (example: `'.js'`).\r\n   *\r\n   * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\\'`\r\n   * on windows).\r\n   * Cannot be set if there’s no `path` yet.\r\n   *\r\n   * @param {string | undefined} extname\r\n   *   Extname.\r\n   * @returns {undefined}\r\n   *   Nothing.\r\n   */\n  set extname(extname) {\n    assertPart(extname, 'extname');\n    assertPath(this.dirname, 'extname');\n    if (extname) {\n      if (extname.codePointAt(0) !== 46 /* `.` */) {\n        throw new Error('`extname` must start with `.`');\n      }\n      if (extname.includes('.', 1)) {\n        throw new Error('`extname` cannot contain multiple dots');\n      }\n    }\n    this.path = path.join(this.dirname, this.stem + (extname || ''));\n  }\n\n  /**\r\n   * Get the full path (example: `'~/index.min.js'`).\r\n   *\r\n   * @returns {string}\r\n   *   Path.\r\n   */\n  get path() {\n    return this.history[this.history.length - 1];\n  }\n\n  /**\r\n   * Set the full path (example: `'~/index.min.js'`).\r\n   *\r\n   * Cannot be nullified.\r\n   * You can set a file URL (a `URL` object with a `file:` protocol) which will\r\n   * be turned into a path with `url.fileURLToPath`.\r\n   *\r\n   * @param {URL | string} path\r\n   *   Path.\r\n   * @returns {undefined}\r\n   *   Nothing.\r\n   */\n  set path(path) {\n    if (isUrl(path)) {\n      path = urlToPath(path);\n    }\n    assertNonEmpty(path, 'path');\n    if (this.path !== path) {\n      this.history.push(path);\n    }\n  }\n\n  /**\r\n   * Get the stem (basename w/o extname) (example: `'index.min'`).\r\n   *\r\n   * @returns {string | undefined}\r\n   *   Stem.\r\n   */\n  get stem() {\n    return typeof this.path === 'string' ? path.basename(this.path, this.extname) : undefined;\n  }\n\n  /**\r\n   * Set the stem (basename w/o extname) (example: `'index.min'`).\r\n   *\r\n   * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\\'`\r\n   * on windows).\r\n   * Cannot be nullified (use `file.path = file.dirname` instead).\r\n   *\r\n   * @param {string} stem\r\n   *   Stem.\r\n   * @returns {undefined}\r\n   *   Nothing.\r\n   */\n  set stem(stem) {\n    assertNonEmpty(stem, 'stem');\n    assertPart(stem, 'stem');\n    this.path = path.join(this.dirname || '', stem + (this.extname || ''));\n  }\n\n  // Normal prototypal methods.\n  /**\r\n   * Create a fatal message for `reason` associated with the file.\r\n   *\r\n   * The `fatal` field of the message is set to `true` (error; file not usable)\r\n   * and the `file` field is set to the current file path.\r\n   * The message is added to the `messages` field on `file`.\r\n   *\r\n   * > 🪦 **Note**: also has obsolete signatures.\r\n   *\r\n   * @overload\r\n   * @param {string} reason\r\n   * @param {MessageOptions | null | undefined} [options]\r\n   * @returns {never}\r\n   *\r\n   * @overload\r\n   * @param {string} reason\r\n   * @param {Node | NodeLike | null | undefined} parent\r\n   * @param {string | null | undefined} [origin]\r\n   * @returns {never}\r\n   *\r\n   * @overload\r\n   * @param {string} reason\r\n   * @param {Point | Position | null | undefined} place\r\n   * @param {string | null | undefined} [origin]\r\n   * @returns {never}\r\n   *\r\n   * @overload\r\n   * @param {string} reason\r\n   * @param {string | null | undefined} [origin]\r\n   * @returns {never}\r\n   *\r\n   * @overload\r\n   * @param {Error | VFileMessage} cause\r\n   * @param {Node | NodeLike | null | undefined} parent\r\n   * @param {string | null | undefined} [origin]\r\n   * @returns {never}\r\n   *\r\n   * @overload\r\n   * @param {Error | VFileMessage} cause\r\n   * @param {Point | Position | null | undefined} place\r\n   * @param {string | null | undefined} [origin]\r\n   * @returns {never}\r\n   *\r\n   * @overload\r\n   * @param {Error | VFileMessage} cause\r\n   * @param {string | null | undefined} [origin]\r\n   * @returns {never}\r\n   *\r\n   * @param {Error | VFileMessage | string} causeOrReason\r\n   *   Reason for message, should use markdown.\r\n   * @param {Node | NodeLike | MessageOptions | Point | Position | string | null | undefined} [optionsOrParentOrPlace]\r\n   *   Configuration (optional).\r\n   * @param {string | null | undefined} [origin]\r\n   *   Place in code where the message originates (example:\r\n   *   `'my-package:my-rule'` or `'my-rule'`).\r\n   * @returns {never}\r\n   *   Never.\r\n   * @throws {VFileMessage}\r\n   *   Message.\r\n   */\n  fail(causeOrReason, optionsOrParentOrPlace, origin) {\n    // @ts-expect-error: the overloads are fine.\n    const message = this.message(causeOrReason, optionsOrParentOrPlace, origin);\n    message.fatal = true;\n    throw message;\n  }\n\n  /**\r\n   * Create an info message for `reason` associated with the file.\r\n   *\r\n   * The `fatal` field of the message is set to `undefined` (info; change\r\n   * likely not needed) and the `file` field is set to the current file path.\r\n   * The message is added to the `messages` field on `file`.\r\n   *\r\n   * > 🪦 **Note**: also has obsolete signatures.\r\n   *\r\n   * @overload\r\n   * @param {string} reason\r\n   * @param {MessageOptions | null | undefined} [options]\r\n   * @returns {VFileMessage}\r\n   *\r\n   * @overload\r\n   * @param {string} reason\r\n   * @param {Node | NodeLike | null | undefined} parent\r\n   * @param {string | null | undefined} [origin]\r\n   * @returns {VFileMessage}\r\n   *\r\n   * @overload\r\n   * @param {string} reason\r\n   * @param {Point | Position | null | undefined} place\r\n   * @param {string | null | undefined} [origin]\r\n   * @returns {VFileMessage}\r\n   *\r\n   * @overload\r\n   * @param {string} reason\r\n   * @param {string | null | undefined} [origin]\r\n   * @returns {VFileMessage}\r\n   *\r\n   * @overload\r\n   * @param {Error | VFileMessage} cause\r\n   * @param {Node | NodeLike | null | undefined} parent\r\n   * @param {string | null | undefined} [origin]\r\n   * @returns {VFileMessage}\r\n   *\r\n   * @overload\r\n   * @param {Error | VFileMessage} cause\r\n   * @param {Point | Position | null | undefined} place\r\n   * @param {string | null | undefined} [origin]\r\n   * @returns {VFileMessage}\r\n   *\r\n   * @overload\r\n   * @param {Error | VFileMessage} cause\r\n   * @param {string | null | undefined} [origin]\r\n   * @returns {VFileMessage}\r\n   *\r\n   * @param {Error | VFileMessage | string} causeOrReason\r\n   *   Reason for message, should use markdown.\r\n   * @param {Node | NodeLike | MessageOptions | Point | Position | string | null | undefined} [optionsOrParentOrPlace]\r\n   *   Configuration (optional).\r\n   * @param {string | null | undefined} [origin]\r\n   *   Place in code where the message originates (example:\r\n   *   `'my-package:my-rule'` or `'my-rule'`).\r\n   * @returns {VFileMessage}\r\n   *   Message.\r\n   */\n  info(causeOrReason, optionsOrParentOrPlace, origin) {\n    // @ts-expect-error: the overloads are fine.\n    const message = this.message(causeOrReason, optionsOrParentOrPlace, origin);\n    message.fatal = undefined;\n    return message;\n  }\n\n  /**\r\n   * Create a message for `reason` associated with the file.\r\n   *\r\n   * The `fatal` field of the message is set to `false` (warning; change may be\r\n   * needed) and the `file` field is set to the current file path.\r\n   * The message is added to the `messages` field on `file`.\r\n   *\r\n   * > 🪦 **Note**: also has obsolete signatures.\r\n   *\r\n   * @overload\r\n   * @param {string} reason\r\n   * @param {MessageOptions | null | undefined} [options]\r\n   * @returns {VFileMessage}\r\n   *\r\n   * @overload\r\n   * @param {string} reason\r\n   * @param {Node | NodeLike | null | undefined} parent\r\n   * @param {string | null | undefined} [origin]\r\n   * @returns {VFileMessage}\r\n   *\r\n   * @overload\r\n   * @param {string} reason\r\n   * @param {Point | Position | null | undefined} place\r\n   * @param {string | null | undefined} [origin]\r\n   * @returns {VFileMessage}\r\n   *\r\n   * @overload\r\n   * @param {string} reason\r\n   * @param {string | null | undefined} [origin]\r\n   * @returns {VFileMessage}\r\n   *\r\n   * @overload\r\n   * @param {Error | VFileMessage} cause\r\n   * @param {Node | NodeLike | null | undefined} parent\r\n   * @param {string | null | undefined} [origin]\r\n   * @returns {VFileMessage}\r\n   *\r\n   * @overload\r\n   * @param {Error | VFileMessage} cause\r\n   * @param {Point | Position | null | undefined} place\r\n   * @param {string | null | undefined} [origin]\r\n   * @returns {VFileMessage}\r\n   *\r\n   * @overload\r\n   * @param {Error | VFileMessage} cause\r\n   * @param {string | null | undefined} [origin]\r\n   * @returns {VFileMessage}\r\n   *\r\n   * @param {Error | VFileMessage | string} causeOrReason\r\n   *   Reason for message, should use markdown.\r\n   * @param {Node | NodeLike | MessageOptions | Point | Position | string | null | undefined} [optionsOrParentOrPlace]\r\n   *   Configuration (optional).\r\n   * @param {string | null | undefined} [origin]\r\n   *   Place in code where the message originates (example:\r\n   *   `'my-package:my-rule'` or `'my-rule'`).\r\n   * @returns {VFileMessage}\r\n   *   Message.\r\n   */\n  message(causeOrReason, optionsOrParentOrPlace, origin) {\n    const message = new VFileMessage(\n    // @ts-expect-error: the overloads are fine.\n    causeOrReason, optionsOrParentOrPlace, origin);\n    if (this.path) {\n      message.name = this.path + ':' + message.name;\n      message.file = this.path;\n    }\n    message.fatal = false;\n    this.messages.push(message);\n    return message;\n  }\n\n  /**\r\n   * Serialize the file.\r\n   *\r\n   * > **Note**: which encodings are supported depends on the engine.\r\n   * > For info on Node.js, see:\r\n   * > <https://nodejs.org/api/util.html#whatwg-supported-encodings>.\r\n   *\r\n   * @param {string | null | undefined} [encoding='utf8']\r\n   *   Character encoding to understand `value` as when it’s a `Uint8Array`\r\n   *   (default: `'utf-8'`).\r\n   * @returns {string}\r\n   *   Serialized file.\r\n   */\n  toString(encoding) {\n    if (this.value === undefined) {\n      return '';\n    }\n    if (typeof this.value === 'string') {\n      return this.value;\n    }\n    const decoder = new TextDecoder(encoding || undefined);\n    return decoder.decode(this.value);\n  }\n}\n\n/**\r\n * Assert that `part` is not a path (as in, does not contain `path.sep`).\r\n *\r\n * @param {string | null | undefined} part\r\n *   File path part.\r\n * @param {string} name\r\n *   Part name.\r\n * @returns {undefined}\r\n *   Nothing.\r\n */\nfunction assertPart(part, name) {\n  if (part && part.includes(path.sep)) {\n    throw new Error('`' + name + '` cannot be a path: did not expect `' + path.sep + '`');\n  }\n}\n\n/**\r\n * Assert that `part` is not empty.\r\n *\r\n * @param {string | undefined} part\r\n *   Thing.\r\n * @param {string} name\r\n *   Part name.\r\n * @returns {asserts part is string}\r\n *   Nothing.\r\n */\nfunction assertNonEmpty(part, name) {\n  if (!part) {\n    throw new Error('`' + name + '` cannot be empty');\n  }\n}\n\n/**\r\n * Assert `path` exists.\r\n *\r\n * @param {string | undefined} path\r\n *   Path.\r\n * @param {string} name\r\n *   Dependency name.\r\n * @returns {asserts path is string}\r\n *   Nothing.\r\n */\nfunction assertPath(path, name) {\n  if (!path) {\n    throw new Error('Setting `' + name + '` requires `path` to be set too');\n  }\n}\n\n/**\r\n * Assert `value` is an `Uint8Array`.\r\n *\r\n * @param {unknown} value\r\n *   thing.\r\n * @returns {value is Uint8Array}\r\n *   Whether `value` is an `Uint8Array`.\r\n */\nfunction isUint8Array(value) {\n  return Boolean(value && typeof value === 'object' && 'byteLength' in value && 'byteOffset' in value);\n}","map":{"version":3,"names":["VFileMessage","path","proc","urlToPath","isUrl","order","VFile","constructor","value","options","isUint8Array","cwd","data","history","messages","map","result","stored","index","length","prop","undefined","includes","basename","assertNonEmpty","assertPart","join","dirname","assertPath","extname","codePointAt","Error","stem","push","fail","causeOrReason","optionsOrParentOrPlace","origin","message","fatal","info","name","file","toString","encoding","decoder","TextDecoder","decode","part","sep","Boolean"],"sources":["E:/Documents/2024-1 YBIGTA/Ybigta_BLOG/blog_git/Ybigta-Blog/frontend/node_modules/vfile/lib/index.js"],"sourcesContent":["/**\r\n * @typedef {import('unist').Node} Node\r\n * @typedef {import('unist').Point} Point\r\n * @typedef {import('unist').Position} Position\r\n * @typedef {import('vfile-message').Options} MessageOptions\r\n * @typedef {import('../index.js').Data} Data\r\n * @typedef {import('../index.js').Value} Value\r\n */\r\n\r\n/**\r\n * @typedef {object & {type: string, position?: Position | undefined}} NodeLike\r\n *\r\n * @typedef {Options | URL | VFile | Value} Compatible\r\n *   Things that can be passed to the constructor.\r\n *\r\n * @typedef VFileCoreOptions\r\n *   Set multiple values.\r\n * @property {string | null | undefined} [basename]\r\n *   Set `basename` (name).\r\n * @property {string | null | undefined} [cwd]\r\n *   Set `cwd` (working directory).\r\n * @property {Data | null | undefined} [data]\r\n *   Set `data` (associated info).\r\n * @property {string | null | undefined} [dirname]\r\n *   Set `dirname` (path w/o basename).\r\n * @property {string | null | undefined} [extname]\r\n *   Set `extname` (extension with dot).\r\n * @property {Array<string> | null | undefined} [history]\r\n *   Set `history` (paths the file moved between).\r\n * @property {URL | string | null | undefined} [path]\r\n *   Set `path` (current path).\r\n * @property {string | null | undefined} [stem]\r\n *   Set `stem` (name without extension).\r\n * @property {Value | null | undefined} [value]\r\n *   Set `value` (the contents of the file).\r\n *\r\n * @typedef Map\r\n *   Raw source map.\r\n *\r\n *   See:\r\n *   <https://github.com/mozilla/source-map/blob/60adcb0/source-map.d.ts#L15-L23>.\r\n * @property {number} version\r\n *   Which version of the source map spec this map is following.\r\n * @property {Array<string>} sources\r\n *   An array of URLs to the original source files.\r\n * @property {Array<string>} names\r\n *   An array of identifiers which can be referenced by individual mappings.\r\n * @property {string | undefined} [sourceRoot]\r\n *   The URL root from which all sources are relative.\r\n * @property {Array<string> | undefined} [sourcesContent]\r\n *   An array of contents of the original source files.\r\n * @property {string} mappings\r\n *   A string of base64 VLQs which contain the actual mappings.\r\n * @property {string} file\r\n *   The generated file this source map is associated with.\r\n *\r\n * @typedef {Record<string, unknown> & VFileCoreOptions} Options\r\n *   Configuration.\r\n *\r\n *   A bunch of keys that will be shallow copied over to the new file.\r\n *\r\n * @typedef {Record<string, unknown>} ReporterSettings\r\n *   Configuration for reporters.\r\n */\r\n\r\n/**\r\n * @template [Settings=ReporterSettings]\r\n *   Options type.\r\n * @callback Reporter\r\n *   Type for a reporter.\r\n * @param {Array<VFile>} files\r\n *   Files to report.\r\n * @param {Settings} options\r\n *   Configuration.\r\n * @returns {string}\r\n *   Report.\r\n */\r\n\r\nimport {VFileMessage} from 'vfile-message'\r\nimport {path} from 'vfile/do-not-use-conditional-minpath'\r\nimport {proc} from 'vfile/do-not-use-conditional-minproc'\r\nimport {urlToPath, isUrl} from 'vfile/do-not-use-conditional-minurl'\r\n\r\n/**\r\n * Order of setting (least specific to most), we need this because otherwise\r\n * `{stem: 'a', path: '~/b.js'}` would throw, as a path is needed before a\r\n * stem can be set.\r\n */\r\nconst order = /** @type {const} */ ([\r\n  'history',\r\n  'path',\r\n  'basename',\r\n  'stem',\r\n  'extname',\r\n  'dirname'\r\n])\r\n\r\nexport class VFile {\r\n  /**\r\n   * Create a new virtual file.\r\n   *\r\n   * `options` is treated as:\r\n   *\r\n   * *   `string` or `Uint8Array` — `{value: options}`\r\n   * *   `URL` — `{path: options}`\r\n   * *   `VFile` — shallow copies its data over to the new file\r\n   * *   `object` — all fields are shallow copied over to the new file\r\n   *\r\n   * Path related fields are set in the following order (least specific to\r\n   * most specific): `history`, `path`, `basename`, `stem`, `extname`,\r\n   * `dirname`.\r\n   *\r\n   * You cannot set `dirname` or `extname` without setting either `history`,\r\n   * `path`, `basename`, or `stem` too.\r\n   *\r\n   * @param {Compatible | null | undefined} [value]\r\n   *   File value.\r\n   * @returns\r\n   *   New instance.\r\n   */\r\n  constructor(value) {\r\n    /** @type {Options | VFile} */\r\n    let options\r\n\r\n    if (!value) {\r\n      options = {}\r\n    } else if (isUrl(value)) {\r\n      options = {path: value}\r\n    } else if (typeof value === 'string' || isUint8Array(value)) {\r\n      options = {value}\r\n    } else {\r\n      options = value\r\n    }\r\n\r\n    /* eslint-disable no-unused-expressions */\r\n\r\n    /**\r\n     * Base of `path` (default: `process.cwd()` or `'/'` in browsers).\r\n     *\r\n     * @type {string}\r\n     */\r\n    this.cwd = proc.cwd()\r\n\r\n    /**\r\n     * Place to store custom info (default: `{}`).\r\n     *\r\n     * It’s OK to store custom data directly on the file but moving it to\r\n     * `data` is recommended.\r\n     *\r\n     * @type {Data}\r\n     */\r\n    this.data = {}\r\n\r\n    /**\r\n     * List of file paths the file moved between.\r\n     *\r\n     * The first is the original path and the last is the current path.\r\n     *\r\n     * @type {Array<string>}\r\n     */\r\n    this.history = []\r\n\r\n    /**\r\n     * List of messages associated with the file.\r\n     *\r\n     * @type {Array<VFileMessage>}\r\n     */\r\n    this.messages = []\r\n\r\n    /**\r\n     * Raw value.\r\n     *\r\n     * @type {Value}\r\n     */\r\n    this.value\r\n\r\n    // The below are non-standard, they are “well-known”.\r\n    // As in, used in several tools.\r\n    /**\r\n     * Source map.\r\n     *\r\n     * This type is equivalent to the `RawSourceMap` type from the `source-map`\r\n     * module.\r\n     *\r\n     * @type {Map | null | undefined}\r\n     */\r\n    this.map\r\n\r\n    /**\r\n     * Custom, non-string, compiled, representation.\r\n     *\r\n     * This is used by unified to store non-string results.\r\n     * One example is when turning markdown into React nodes.\r\n     *\r\n     * @type {unknown}\r\n     */\r\n    this.result\r\n\r\n    /**\r\n     * Whether a file was saved to disk.\r\n     *\r\n     * This is used by vfile reporters.\r\n     *\r\n     * @type {boolean}\r\n     */\r\n    this.stored\r\n    /* eslint-enable no-unused-expressions */\r\n\r\n    // Set path related properties in the correct order.\r\n    let index = -1\r\n\r\n    while (++index < order.length) {\r\n      const prop = order[index]\r\n\r\n      // Note: we specifically use `in` instead of `hasOwnProperty` to accept\r\n      // `vfile`s too.\r\n      if (\r\n        prop in options &&\r\n        options[prop] !== undefined &&\r\n        options[prop] !== null\r\n      ) {\r\n        // @ts-expect-error: TS doesn’t understand basic reality.\r\n        this[prop] = prop === 'history' ? [...options[prop]] : options[prop]\r\n      }\r\n    }\r\n\r\n    /** @type {string} */\r\n    let prop\r\n\r\n    // Set non-path related properties.\r\n    for (prop in options) {\r\n      // @ts-expect-error: fine to set other things.\r\n      if (!order.includes(prop)) {\r\n        // @ts-expect-error: fine to set other things.\r\n        this[prop] = options[prop]\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get the basename (including extname) (example: `'index.min.js'`).\r\n   *\r\n   * @returns {string | undefined}\r\n   *   Basename.\r\n   */\r\n  get basename() {\r\n    return typeof this.path === 'string' ? path.basename(this.path) : undefined\r\n  }\r\n\r\n  /**\r\n   * Set basename (including extname) (`'index.min.js'`).\r\n   *\r\n   * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\\'`\r\n   * on windows).\r\n   * Cannot be nullified (use `file.path = file.dirname` instead).\r\n   *\r\n   * @param {string} basename\r\n   *   Basename.\r\n   * @returns {undefined}\r\n   *   Nothing.\r\n   */\r\n  set basename(basename) {\r\n    assertNonEmpty(basename, 'basename')\r\n    assertPart(basename, 'basename')\r\n    this.path = path.join(this.dirname || '', basename)\r\n  }\r\n\r\n  /**\r\n   * Get the parent path (example: `'~'`).\r\n   *\r\n   * @returns {string | undefined}\r\n   *   Dirname.\r\n   */\r\n  get dirname() {\r\n    return typeof this.path === 'string' ? path.dirname(this.path) : undefined\r\n  }\r\n\r\n  /**\r\n   * Set the parent path (example: `'~'`).\r\n   *\r\n   * Cannot be set if there’s no `path` yet.\r\n   *\r\n   * @param {string | undefined} dirname\r\n   *   Dirname.\r\n   * @returns {undefined}\r\n   *   Nothing.\r\n   */\r\n  set dirname(dirname) {\r\n    assertPath(this.basename, 'dirname')\r\n    this.path = path.join(dirname || '', this.basename)\r\n  }\r\n\r\n  /**\r\n   * Get the extname (including dot) (example: `'.js'`).\r\n   *\r\n   * @returns {string | undefined}\r\n   *   Extname.\r\n   */\r\n  get extname() {\r\n    return typeof this.path === 'string' ? path.extname(this.path) : undefined\r\n  }\r\n\r\n  /**\r\n   * Set the extname (including dot) (example: `'.js'`).\r\n   *\r\n   * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\\'`\r\n   * on windows).\r\n   * Cannot be set if there’s no `path` yet.\r\n   *\r\n   * @param {string | undefined} extname\r\n   *   Extname.\r\n   * @returns {undefined}\r\n   *   Nothing.\r\n   */\r\n  set extname(extname) {\r\n    assertPart(extname, 'extname')\r\n    assertPath(this.dirname, 'extname')\r\n\r\n    if (extname) {\r\n      if (extname.codePointAt(0) !== 46 /* `.` */) {\r\n        throw new Error('`extname` must start with `.`')\r\n      }\r\n\r\n      if (extname.includes('.', 1)) {\r\n        throw new Error('`extname` cannot contain multiple dots')\r\n      }\r\n    }\r\n\r\n    this.path = path.join(this.dirname, this.stem + (extname || ''))\r\n  }\r\n\r\n  /**\r\n   * Get the full path (example: `'~/index.min.js'`).\r\n   *\r\n   * @returns {string}\r\n   *   Path.\r\n   */\r\n  get path() {\r\n    return this.history[this.history.length - 1]\r\n  }\r\n\r\n  /**\r\n   * Set the full path (example: `'~/index.min.js'`).\r\n   *\r\n   * Cannot be nullified.\r\n   * You can set a file URL (a `URL` object with a `file:` protocol) which will\r\n   * be turned into a path with `url.fileURLToPath`.\r\n   *\r\n   * @param {URL | string} path\r\n   *   Path.\r\n   * @returns {undefined}\r\n   *   Nothing.\r\n   */\r\n  set path(path) {\r\n    if (isUrl(path)) {\r\n      path = urlToPath(path)\r\n    }\r\n\r\n    assertNonEmpty(path, 'path')\r\n\r\n    if (this.path !== path) {\r\n      this.history.push(path)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get the stem (basename w/o extname) (example: `'index.min'`).\r\n   *\r\n   * @returns {string | undefined}\r\n   *   Stem.\r\n   */\r\n  get stem() {\r\n    return typeof this.path === 'string'\r\n      ? path.basename(this.path, this.extname)\r\n      : undefined\r\n  }\r\n\r\n  /**\r\n   * Set the stem (basename w/o extname) (example: `'index.min'`).\r\n   *\r\n   * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\\'`\r\n   * on windows).\r\n   * Cannot be nullified (use `file.path = file.dirname` instead).\r\n   *\r\n   * @param {string} stem\r\n   *   Stem.\r\n   * @returns {undefined}\r\n   *   Nothing.\r\n   */\r\n  set stem(stem) {\r\n    assertNonEmpty(stem, 'stem')\r\n    assertPart(stem, 'stem')\r\n    this.path = path.join(this.dirname || '', stem + (this.extname || ''))\r\n  }\r\n\r\n  // Normal prototypal methods.\r\n  /**\r\n   * Create a fatal message for `reason` associated with the file.\r\n   *\r\n   * The `fatal` field of the message is set to `true` (error; file not usable)\r\n   * and the `file` field is set to the current file path.\r\n   * The message is added to the `messages` field on `file`.\r\n   *\r\n   * > 🪦 **Note**: also has obsolete signatures.\r\n   *\r\n   * @overload\r\n   * @param {string} reason\r\n   * @param {MessageOptions | null | undefined} [options]\r\n   * @returns {never}\r\n   *\r\n   * @overload\r\n   * @param {string} reason\r\n   * @param {Node | NodeLike | null | undefined} parent\r\n   * @param {string | null | undefined} [origin]\r\n   * @returns {never}\r\n   *\r\n   * @overload\r\n   * @param {string} reason\r\n   * @param {Point | Position | null | undefined} place\r\n   * @param {string | null | undefined} [origin]\r\n   * @returns {never}\r\n   *\r\n   * @overload\r\n   * @param {string} reason\r\n   * @param {string | null | undefined} [origin]\r\n   * @returns {never}\r\n   *\r\n   * @overload\r\n   * @param {Error | VFileMessage} cause\r\n   * @param {Node | NodeLike | null | undefined} parent\r\n   * @param {string | null | undefined} [origin]\r\n   * @returns {never}\r\n   *\r\n   * @overload\r\n   * @param {Error | VFileMessage} cause\r\n   * @param {Point | Position | null | undefined} place\r\n   * @param {string | null | undefined} [origin]\r\n   * @returns {never}\r\n   *\r\n   * @overload\r\n   * @param {Error | VFileMessage} cause\r\n   * @param {string | null | undefined} [origin]\r\n   * @returns {never}\r\n   *\r\n   * @param {Error | VFileMessage | string} causeOrReason\r\n   *   Reason for message, should use markdown.\r\n   * @param {Node | NodeLike | MessageOptions | Point | Position | string | null | undefined} [optionsOrParentOrPlace]\r\n   *   Configuration (optional).\r\n   * @param {string | null | undefined} [origin]\r\n   *   Place in code where the message originates (example:\r\n   *   `'my-package:my-rule'` or `'my-rule'`).\r\n   * @returns {never}\r\n   *   Never.\r\n   * @throws {VFileMessage}\r\n   *   Message.\r\n   */\r\n  fail(causeOrReason, optionsOrParentOrPlace, origin) {\r\n    // @ts-expect-error: the overloads are fine.\r\n    const message = this.message(causeOrReason, optionsOrParentOrPlace, origin)\r\n\r\n    message.fatal = true\r\n\r\n    throw message\r\n  }\r\n\r\n  /**\r\n   * Create an info message for `reason` associated with the file.\r\n   *\r\n   * The `fatal` field of the message is set to `undefined` (info; change\r\n   * likely not needed) and the `file` field is set to the current file path.\r\n   * The message is added to the `messages` field on `file`.\r\n   *\r\n   * > 🪦 **Note**: also has obsolete signatures.\r\n   *\r\n   * @overload\r\n   * @param {string} reason\r\n   * @param {MessageOptions | null | undefined} [options]\r\n   * @returns {VFileMessage}\r\n   *\r\n   * @overload\r\n   * @param {string} reason\r\n   * @param {Node | NodeLike | null | undefined} parent\r\n   * @param {string | null | undefined} [origin]\r\n   * @returns {VFileMessage}\r\n   *\r\n   * @overload\r\n   * @param {string} reason\r\n   * @param {Point | Position | null | undefined} place\r\n   * @param {string | null | undefined} [origin]\r\n   * @returns {VFileMessage}\r\n   *\r\n   * @overload\r\n   * @param {string} reason\r\n   * @param {string | null | undefined} [origin]\r\n   * @returns {VFileMessage}\r\n   *\r\n   * @overload\r\n   * @param {Error | VFileMessage} cause\r\n   * @param {Node | NodeLike | null | undefined} parent\r\n   * @param {string | null | undefined} [origin]\r\n   * @returns {VFileMessage}\r\n   *\r\n   * @overload\r\n   * @param {Error | VFileMessage} cause\r\n   * @param {Point | Position | null | undefined} place\r\n   * @param {string | null | undefined} [origin]\r\n   * @returns {VFileMessage}\r\n   *\r\n   * @overload\r\n   * @param {Error | VFileMessage} cause\r\n   * @param {string | null | undefined} [origin]\r\n   * @returns {VFileMessage}\r\n   *\r\n   * @param {Error | VFileMessage | string} causeOrReason\r\n   *   Reason for message, should use markdown.\r\n   * @param {Node | NodeLike | MessageOptions | Point | Position | string | null | undefined} [optionsOrParentOrPlace]\r\n   *   Configuration (optional).\r\n   * @param {string | null | undefined} [origin]\r\n   *   Place in code where the message originates (example:\r\n   *   `'my-package:my-rule'` or `'my-rule'`).\r\n   * @returns {VFileMessage}\r\n   *   Message.\r\n   */\r\n  info(causeOrReason, optionsOrParentOrPlace, origin) {\r\n    // @ts-expect-error: the overloads are fine.\r\n    const message = this.message(causeOrReason, optionsOrParentOrPlace, origin)\r\n\r\n    message.fatal = undefined\r\n\r\n    return message\r\n  }\r\n\r\n  /**\r\n   * Create a message for `reason` associated with the file.\r\n   *\r\n   * The `fatal` field of the message is set to `false` (warning; change may be\r\n   * needed) and the `file` field is set to the current file path.\r\n   * The message is added to the `messages` field on `file`.\r\n   *\r\n   * > 🪦 **Note**: also has obsolete signatures.\r\n   *\r\n   * @overload\r\n   * @param {string} reason\r\n   * @param {MessageOptions | null | undefined} [options]\r\n   * @returns {VFileMessage}\r\n   *\r\n   * @overload\r\n   * @param {string} reason\r\n   * @param {Node | NodeLike | null | undefined} parent\r\n   * @param {string | null | undefined} [origin]\r\n   * @returns {VFileMessage}\r\n   *\r\n   * @overload\r\n   * @param {string} reason\r\n   * @param {Point | Position | null | undefined} place\r\n   * @param {string | null | undefined} [origin]\r\n   * @returns {VFileMessage}\r\n   *\r\n   * @overload\r\n   * @param {string} reason\r\n   * @param {string | null | undefined} [origin]\r\n   * @returns {VFileMessage}\r\n   *\r\n   * @overload\r\n   * @param {Error | VFileMessage} cause\r\n   * @param {Node | NodeLike | null | undefined} parent\r\n   * @param {string | null | undefined} [origin]\r\n   * @returns {VFileMessage}\r\n   *\r\n   * @overload\r\n   * @param {Error | VFileMessage} cause\r\n   * @param {Point | Position | null | undefined} place\r\n   * @param {string | null | undefined} [origin]\r\n   * @returns {VFileMessage}\r\n   *\r\n   * @overload\r\n   * @param {Error | VFileMessage} cause\r\n   * @param {string | null | undefined} [origin]\r\n   * @returns {VFileMessage}\r\n   *\r\n   * @param {Error | VFileMessage | string} causeOrReason\r\n   *   Reason for message, should use markdown.\r\n   * @param {Node | NodeLike | MessageOptions | Point | Position | string | null | undefined} [optionsOrParentOrPlace]\r\n   *   Configuration (optional).\r\n   * @param {string | null | undefined} [origin]\r\n   *   Place in code where the message originates (example:\r\n   *   `'my-package:my-rule'` or `'my-rule'`).\r\n   * @returns {VFileMessage}\r\n   *   Message.\r\n   */\r\n  message(causeOrReason, optionsOrParentOrPlace, origin) {\r\n    const message = new VFileMessage(\r\n      // @ts-expect-error: the overloads are fine.\r\n      causeOrReason,\r\n      optionsOrParentOrPlace,\r\n      origin\r\n    )\r\n\r\n    if (this.path) {\r\n      message.name = this.path + ':' + message.name\r\n      message.file = this.path\r\n    }\r\n\r\n    message.fatal = false\r\n\r\n    this.messages.push(message)\r\n\r\n    return message\r\n  }\r\n\r\n  /**\r\n   * Serialize the file.\r\n   *\r\n   * > **Note**: which encodings are supported depends on the engine.\r\n   * > For info on Node.js, see:\r\n   * > <https://nodejs.org/api/util.html#whatwg-supported-encodings>.\r\n   *\r\n   * @param {string | null | undefined} [encoding='utf8']\r\n   *   Character encoding to understand `value` as when it’s a `Uint8Array`\r\n   *   (default: `'utf-8'`).\r\n   * @returns {string}\r\n   *   Serialized file.\r\n   */\r\n  toString(encoding) {\r\n    if (this.value === undefined) {\r\n      return ''\r\n    }\r\n\r\n    if (typeof this.value === 'string') {\r\n      return this.value\r\n    }\r\n\r\n    const decoder = new TextDecoder(encoding || undefined)\r\n    return decoder.decode(this.value)\r\n  }\r\n}\r\n\r\n/**\r\n * Assert that `part` is not a path (as in, does not contain `path.sep`).\r\n *\r\n * @param {string | null | undefined} part\r\n *   File path part.\r\n * @param {string} name\r\n *   Part name.\r\n * @returns {undefined}\r\n *   Nothing.\r\n */\r\nfunction assertPart(part, name) {\r\n  if (part && part.includes(path.sep)) {\r\n    throw new Error(\r\n      '`' + name + '` cannot be a path: did not expect `' + path.sep + '`'\r\n    )\r\n  }\r\n}\r\n\r\n/**\r\n * Assert that `part` is not empty.\r\n *\r\n * @param {string | undefined} part\r\n *   Thing.\r\n * @param {string} name\r\n *   Part name.\r\n * @returns {asserts part is string}\r\n *   Nothing.\r\n */\r\nfunction assertNonEmpty(part, name) {\r\n  if (!part) {\r\n    throw new Error('`' + name + '` cannot be empty')\r\n  }\r\n}\r\n\r\n/**\r\n * Assert `path` exists.\r\n *\r\n * @param {string | undefined} path\r\n *   Path.\r\n * @param {string} name\r\n *   Dependency name.\r\n * @returns {asserts path is string}\r\n *   Nothing.\r\n */\r\nfunction assertPath(path, name) {\r\n  if (!path) {\r\n    throw new Error('Setting `' + name + '` requires `path` to be set too')\r\n  }\r\n}\r\n\r\n/**\r\n * Assert `value` is an `Uint8Array`.\r\n *\r\n * @param {unknown} value\r\n *   thing.\r\n * @returns {value is Uint8Array}\r\n *   Whether `value` is an `Uint8Array`.\r\n */\r\nfunction isUint8Array(value) {\r\n  return Boolean(\r\n    value &&\r\n      typeof value === 'object' &&\r\n      'byteLength' in value &&\r\n      'byteOffset' in value\r\n  )\r\n}\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAAQA,YAAY,QAAO,eAAe;AAC1C,SAAQC,IAAI,QAAO,sCAAsC;AACzD,SAAQC,IAAI,QAAO,sCAAsC;AACzD,SAAQC,SAAS,EAAEC,KAAK,QAAO,qCAAqC;;AAEpE;AACA;AACA;AACA;AACA;AACA,MAAMC,KAAK,GAAG,oBAAsB,CAClC,SAAS,EACT,MAAM,EACN,UAAU,EACV,MAAM,EACN,SAAS,EACT,SAAS,CACT;AAEF,OAAO,MAAMC,KAAK,CAAC;EACjB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEC,WAAWA,CAACC,KAAK,EAAE;IACjB;IACA,IAAIC,OAAO;IAEX,IAAI,CAACD,KAAK,EAAE;MACVC,OAAO,GAAG,CAAC,CAAC;IACd,CAAC,MAAM,IAAIL,KAAK,CAACI,KAAK,CAAC,EAAE;MACvBC,OAAO,GAAG;QAACR,IAAI,EAAEO;MAAK,CAAC;IACzB,CAAC,MAAM,IAAI,OAAOA,KAAK,KAAK,QAAQ,IAAIE,YAAY,CAACF,KAAK,CAAC,EAAE;MAC3DC,OAAO,GAAG;QAACD;MAAK,CAAC;IACnB,CAAC,MAAM;MACLC,OAAO,GAAGD,KAAK;IACjB;;IAEA;;IAEA;AACJ;AACA;AACA;AACA;IACI,IAAI,CAACG,GAAG,GAAGT,IAAI,CAACS,GAAG,CAAC,CAAC;;IAErB;AACJ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;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEK,IAAIA,CAACC,aAAa,EAAEC,sBAAsB,EAAEC,MAAM,EAAE;IAClD;IACA,MAAMC,OAAO,GAAG,IAAI,CAACA,OAAO,CAACH,aAAa,EAAEC,sBAAsB,EAAEC,MAAM,CAAC;IAE3EC,OAAO,CAACC,KAAK,GAAG,IAAI;IAEpB,MAAMD,OAAO;EACf;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEE,IAAIA,CAACL,aAAa,EAAEC,sBAAsB,EAAEC,MAAM,EAAE;IAClD;IACA,MAAMC,OAAO,GAAG,IAAI,CAACA,OAAO,CAACH,aAAa,EAAEC,sBAAsB,EAAEC,MAAM,CAAC;IAE3EC,OAAO,CAACC,KAAK,GAAGlB,SAAS;IAEzB,OAAOiB,OAAO;EAChB;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEA,OAAOA,CAACH,aAAa,EAAEC,sBAAsB,EAAEC,MAAM,EAAE;IACrD,MAAMC,OAAO,GAAG,IAAItC,YAAY;IAC9B;IACAmC,aAAa,EACbC,sBAAsB,EACtBC,MACF,CAAC;IAED,IAAI,IAAI,CAACpC,IAAI,EAAE;MACbqC,OAAO,CAACG,IAAI,GAAG,IAAI,CAACxC,IAAI,GAAG,GAAG,GAAGqC,OAAO,CAACG,IAAI;MAC7CH,OAAO,CAACI,IAAI,GAAG,IAAI,CAACzC,IAAI;IAC1B;IAEAqC,OAAO,CAACC,KAAK,GAAG,KAAK;IAErB,IAAI,CAACzB,QAAQ,CAACmB,IAAI,CAACK,OAAO,CAAC;IAE3B,OAAOA,OAAO;EAChB;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEK,QAAQA,CAACC,QAAQ,EAAE;IACjB,IAAI,IAAI,CAACpC,KAAK,KAAKa,SAAS,EAAE;MAC5B,OAAO,EAAE;IACX;IAEA,IAAI,OAAO,IAAI,CAACb,KAAK,KAAK,QAAQ,EAAE;MAClC,OAAO,IAAI,CAACA,KAAK;IACnB;IAEA,MAAMqC,OAAO,GAAG,IAAIC,WAAW,CAACF,QAAQ,IAAIvB,SAAS,CAAC;IACtD,OAAOwB,OAAO,CAACE,MAAM,CAAC,IAAI,CAACvC,KAAK,CAAC;EACnC;AACF;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASiB,UAAUA,CAACuB,IAAI,EAAEP,IAAI,EAAE;EAC9B,IAAIO,IAAI,IAAIA,IAAI,CAAC1B,QAAQ,CAACrB,IAAI,CAACgD,GAAG,CAAC,EAAE;IACnC,MAAM,IAAIlB,KAAK,CACb,GAAG,GAAGU,IAAI,GAAG,sCAAsC,GAAGxC,IAAI,CAACgD,GAAG,GAAG,GACnE,CAAC;EACH;AACF;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASzB,cAAcA,CAACwB,IAAI,EAAEP,IAAI,EAAE;EAClC,IAAI,CAACO,IAAI,EAAE;IACT,MAAM,IAAIjB,KAAK,CAAC,GAAG,GAAGU,IAAI,GAAG,mBAAmB,CAAC;EACnD;AACF;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASb,UAAUA,CAAC3B,IAAI,EAAEwC,IAAI,EAAE;EAC9B,IAAI,CAACxC,IAAI,EAAE;IACT,MAAM,IAAI8B,KAAK,CAAC,WAAW,GAAGU,IAAI,GAAG,iCAAiC,CAAC;EACzE;AACF;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS/B,YAAYA,CAACF,KAAK,EAAE;EAC3B,OAAO0C,OAAO,CACZ1C,KAAK,IACH,OAAOA,KAAK,KAAK,QAAQ,IACzB,YAAY,IAAIA,KAAK,IACrB,YAAY,IAAIA,KACpB,CAAC;AACH","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}