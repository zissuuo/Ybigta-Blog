{"ast":null,"code":"/**\r\n * @typedef {import('micromark-util-types').Construct} Construct\r\n * @typedef {import('micromark-util-types').Exiter} Exiter\r\n * @typedef {import('micromark-util-types').State} State\r\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\r\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\r\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownSpace } from 'micromark-util-character';\nimport { codes, constants, types } from 'micromark-util-symbol';\nimport { ok as assert } from 'devlop';\n\n/** @type {Construct} */\nexport const blockQuote = {\n  name: 'blockQuote',\n  tokenize: tokenizeBlockQuoteStart,\n  continuation: {\n    tokenize: tokenizeBlockQuoteContinuation\n  },\n  exit\n};\n\n/**\r\n * @this {TokenizeContext}\r\n * @type {Tokenizer}\r\n */\nfunction tokenizeBlockQuoteStart(effects, ok, nok) {\n  const self = this;\n  return start;\n\n  /**\r\n   * Start of block quote.\r\n   *\r\n   * ```markdown\r\n   * > | > a\r\n   *     ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\n  function start(code) {\n    if (code === codes.greaterThan) {\n      const state = self.containerState;\n      assert(state, 'expected `containerState` to be defined in container');\n      if (!state.open) {\n        effects.enter(types.blockQuote, {\n          _container: true\n        });\n        state.open = true;\n      }\n      effects.enter(types.blockQuotePrefix);\n      effects.enter(types.blockQuoteMarker);\n      effects.consume(code);\n      effects.exit(types.blockQuoteMarker);\n      return after;\n    }\n    return nok(code);\n  }\n\n  /**\r\n   * After `>`, before optional whitespace.\r\n   *\r\n   * ```markdown\r\n   * > | > a\r\n   *      ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\n  function after(code) {\n    if (markdownSpace(code)) {\n      effects.enter(types.blockQuotePrefixWhitespace);\n      effects.consume(code);\n      effects.exit(types.blockQuotePrefixWhitespace);\n      effects.exit(types.blockQuotePrefix);\n      return ok;\n    }\n    effects.exit(types.blockQuotePrefix);\n    return ok(code);\n  }\n}\n\n/**\r\n * Start of block quote continuation.\r\n *\r\n * ```markdown\r\n *   | > a\r\n * > | > b\r\n *     ^\r\n * ```\r\n *\r\n * @this {TokenizeContext}\r\n * @type {Tokenizer}\r\n */\nfunction tokenizeBlockQuoteContinuation(effects, ok, nok) {\n  const self = this;\n  return contStart;\n\n  /**\r\n   * Start of block quote continuation.\r\n   *\r\n   * Also used to parse the first block quote opening.\r\n   *\r\n   * ```markdown\r\n   *   | > a\r\n   * > | > b\r\n   *     ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\n  function contStart(code) {\n    if (markdownSpace(code)) {\n      // Always populated by defaults.\n      assert(self.parser.constructs.disable.null, 'expected `disable.null` to be populated');\n      return factorySpace(effects, contBefore, types.linePrefix, self.parser.constructs.disable.null.includes('codeIndented') ? undefined : constants.tabSize)(code);\n    }\n    return contBefore(code);\n  }\n\n  /**\r\n   * At `>`, after optional whitespace.\r\n   *\r\n   * Also used to parse the first block quote opening.\r\n   *\r\n   * ```markdown\r\n   *   | > a\r\n   * > | > b\r\n   *     ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\n  function contBefore(code) {\n    return effects.attempt(blockQuote, ok, nok)(code);\n  }\n}\n\n/** @type {Exiter} */\nfunction exit(effects) {\n  effects.exit(types.blockQuote);\n}","map":{"version":3,"names":["factorySpace","markdownSpace","codes","constants","types","ok","assert","blockQuote","name","tokenize","tokenizeBlockQuoteStart","continuation","tokenizeBlockQuoteContinuation","exit","effects","nok","self","start","code","greaterThan","state","containerState","open","enter","_container","blockQuotePrefix","blockQuoteMarker","consume","after","blockQuotePrefixWhitespace","contStart","parser","constructs","disable","null","contBefore","linePrefix","includes","undefined","tabSize","attempt"],"sources":["C:/Users/rjalr/OneDrive/바탕 화면/ybigta/ybigta_blog_2/Ybigta-Blog/frontend/node_modules/micromark-core-commonmark/dev/lib/block-quote.js"],"sourcesContent":["/**\r\n * @typedef {import('micromark-util-types').Construct} Construct\r\n * @typedef {import('micromark-util-types').Exiter} Exiter\r\n * @typedef {import('micromark-util-types').State} State\r\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\r\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\r\n */\r\n\r\nimport {factorySpace} from 'micromark-factory-space'\r\nimport {markdownSpace} from 'micromark-util-character'\r\nimport {codes, constants, types} from 'micromark-util-symbol'\r\nimport {ok as assert} from 'devlop'\r\n\r\n/** @type {Construct} */\r\nexport const blockQuote = {\r\n  name: 'blockQuote',\r\n  tokenize: tokenizeBlockQuoteStart,\r\n  continuation: {tokenize: tokenizeBlockQuoteContinuation},\r\n  exit\r\n}\r\n\r\n/**\r\n * @this {TokenizeContext}\r\n * @type {Tokenizer}\r\n */\r\nfunction tokenizeBlockQuoteStart(effects, ok, nok) {\r\n  const self = this\r\n\r\n  return start\r\n\r\n  /**\r\n   * Start of block quote.\r\n   *\r\n   * ```markdown\r\n   * > | > a\r\n   *     ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function start(code) {\r\n    if (code === codes.greaterThan) {\r\n      const state = self.containerState\r\n\r\n      assert(state, 'expected `containerState` to be defined in container')\r\n\r\n      if (!state.open) {\r\n        effects.enter(types.blockQuote, {_container: true})\r\n        state.open = true\r\n      }\r\n\r\n      effects.enter(types.blockQuotePrefix)\r\n      effects.enter(types.blockQuoteMarker)\r\n      effects.consume(code)\r\n      effects.exit(types.blockQuoteMarker)\r\n      return after\r\n    }\r\n\r\n    return nok(code)\r\n  }\r\n\r\n  /**\r\n   * After `>`, before optional whitespace.\r\n   *\r\n   * ```markdown\r\n   * > | > a\r\n   *      ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function after(code) {\r\n    if (markdownSpace(code)) {\r\n      effects.enter(types.blockQuotePrefixWhitespace)\r\n      effects.consume(code)\r\n      effects.exit(types.blockQuotePrefixWhitespace)\r\n      effects.exit(types.blockQuotePrefix)\r\n      return ok\r\n    }\r\n\r\n    effects.exit(types.blockQuotePrefix)\r\n    return ok(code)\r\n  }\r\n}\r\n\r\n/**\r\n * Start of block quote continuation.\r\n *\r\n * ```markdown\r\n *   | > a\r\n * > | > b\r\n *     ^\r\n * ```\r\n *\r\n * @this {TokenizeContext}\r\n * @type {Tokenizer}\r\n */\r\nfunction tokenizeBlockQuoteContinuation(effects, ok, nok) {\r\n  const self = this\r\n\r\n  return contStart\r\n\r\n  /**\r\n   * Start of block quote continuation.\r\n   *\r\n   * Also used to parse the first block quote opening.\r\n   *\r\n   * ```markdown\r\n   *   | > a\r\n   * > | > b\r\n   *     ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function contStart(code) {\r\n    if (markdownSpace(code)) {\r\n      // Always populated by defaults.\r\n      assert(\r\n        self.parser.constructs.disable.null,\r\n        'expected `disable.null` to be populated'\r\n      )\r\n\r\n      return factorySpace(\r\n        effects,\r\n        contBefore,\r\n        types.linePrefix,\r\n        self.parser.constructs.disable.null.includes('codeIndented')\r\n          ? undefined\r\n          : constants.tabSize\r\n      )(code)\r\n    }\r\n\r\n    return contBefore(code)\r\n  }\r\n\r\n  /**\r\n   * At `>`, after optional whitespace.\r\n   *\r\n   * Also used to parse the first block quote opening.\r\n   *\r\n   * ```markdown\r\n   *   | > a\r\n   * > | > b\r\n   *     ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function contBefore(code) {\r\n    return effects.attempt(blockQuote, ok, nok)(code)\r\n  }\r\n}\r\n\r\n/** @type {Exiter} */\r\nfunction exit(effects) {\r\n  effects.exit(types.blockQuote)\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}