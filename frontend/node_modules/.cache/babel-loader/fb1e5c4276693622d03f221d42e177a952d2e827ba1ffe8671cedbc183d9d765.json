{"ast":null,"code":"/**\r\n * @typedef {import('micromark-util-types').CompileContext} CompileContext\r\n * @typedef {import('micromark-util-types').Handle} Handle\r\n * @typedef {import('micromark-util-types').HtmlExtension} HtmlExtension\r\n * @typedef {import('micromark-util-types').Token} Token\r\n */\n\nimport { sanitizeUri } from 'micromark-util-sanitize-uri';\n\n/**\r\n * Create an HTML extension for `micromark` to support GitHub autolink literal\r\n * when serializing to HTML.\r\n *\r\n * @returns {HtmlExtension}\r\n *   Extension for `micromark` that can be passed in `htmlExtensions` to\r\n *   support GitHub autolink literal when serializing to HTML.\r\n */\nexport function gfmAutolinkLiteralHtml() {\n  return {\n    exit: {\n      literalAutolinkEmail,\n      literalAutolinkHttp,\n      literalAutolinkWww\n    }\n  };\n}\n\n/**\r\n * @this {CompileContext}\r\n * @type {Handle}\r\n */\nfunction literalAutolinkWww(token) {\n  anchorFromToken.call(this, token, 'http://');\n}\n\n/**\r\n * @this {CompileContext}\r\n * @type {Handle}\r\n */\nfunction literalAutolinkEmail(token) {\n  anchorFromToken.call(this, token, 'mailto:');\n}\n\n/**\r\n * @this {CompileContext}\r\n * @type {Handle}\r\n */\nfunction literalAutolinkHttp(token) {\n  anchorFromToken.call(this, token);\n}\n\n/**\r\n * @this CompileContext\r\n * @param {Token} token\r\n * @param {string | null | undefined} [protocol]\r\n * @returns {undefined}\r\n */\nfunction anchorFromToken(token, protocol) {\n  const url = this.sliceSerialize(token);\n  this.tag('<a href=\"' + sanitizeUri((protocol || '') + url) + '\">');\n  this.raw(this.encode(url));\n  this.tag('</a>');\n}","map":{"version":3,"names":["sanitizeUri","gfmAutolinkLiteralHtml","exit","literalAutolinkEmail","literalAutolinkHttp","literalAutolinkWww","token","anchorFromToken","call","protocol","url","sliceSerialize","tag","raw","encode"],"sources":["E:/Documents/2024-1 YBIGTA/Ybigta_BLOG/blog_git/Ybigta-Blog/frontend/node_modules/micromark-extension-gfm-autolink-literal/dev/lib/html.js"],"sourcesContent":["/**\r\n * @typedef {import('micromark-util-types').CompileContext} CompileContext\r\n * @typedef {import('micromark-util-types').Handle} Handle\r\n * @typedef {import('micromark-util-types').HtmlExtension} HtmlExtension\r\n * @typedef {import('micromark-util-types').Token} Token\r\n */\r\n\r\nimport {sanitizeUri} from 'micromark-util-sanitize-uri'\r\n\r\n/**\r\n * Create an HTML extension for `micromark` to support GitHub autolink literal\r\n * when serializing to HTML.\r\n *\r\n * @returns {HtmlExtension}\r\n *   Extension for `micromark` that can be passed in `htmlExtensions` to\r\n *   support GitHub autolink literal when serializing to HTML.\r\n */\r\nexport function gfmAutolinkLiteralHtml() {\r\n  return {\r\n    exit: {literalAutolinkEmail, literalAutolinkHttp, literalAutolinkWww}\r\n  }\r\n}\r\n\r\n/**\r\n * @this {CompileContext}\r\n * @type {Handle}\r\n */\r\nfunction literalAutolinkWww(token) {\r\n  anchorFromToken.call(this, token, 'http://')\r\n}\r\n\r\n/**\r\n * @this {CompileContext}\r\n * @type {Handle}\r\n */\r\nfunction literalAutolinkEmail(token) {\r\n  anchorFromToken.call(this, token, 'mailto:')\r\n}\r\n\r\n/**\r\n * @this {CompileContext}\r\n * @type {Handle}\r\n */\r\nfunction literalAutolinkHttp(token) {\r\n  anchorFromToken.call(this, token)\r\n}\r\n\r\n/**\r\n * @this CompileContext\r\n * @param {Token} token\r\n * @param {string | null | undefined} [protocol]\r\n * @returns {undefined}\r\n */\r\nfunction anchorFromToken(token, protocol) {\r\n  const url = this.sliceSerialize(token)\r\n  this.tag('<a href=\"' + sanitizeUri((protocol || '') + url) + '\">')\r\n  this.raw(this.encode(url))\r\n  this.tag('</a>')\r\n}\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAAQA,WAAW,QAAO,6BAA6B;;AAEvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,sBAAsBA,CAAA,EAAG;EACvC,OAAO;IACLC,IAAI,EAAE;MAACC,oBAAoB;MAAEC,mBAAmB;MAAEC;IAAkB;EACtE,CAAC;AACH;;AAEA;AACA;AACA;AACA;AACA,SAASA,kBAAkBA,CAACC,KAAK,EAAE;EACjCC,eAAe,CAACC,IAAI,CAAC,IAAI,EAAEF,KAAK,EAAE,SAAS,CAAC;AAC9C;;AAEA;AACA;AACA;AACA;AACA,SAASH,oBAAoBA,CAACG,KAAK,EAAE;EACnCC,eAAe,CAACC,IAAI,CAAC,IAAI,EAAEF,KAAK,EAAE,SAAS,CAAC;AAC9C;;AAEA;AACA;AACA;AACA;AACA,SAASF,mBAAmBA,CAACE,KAAK,EAAE;EAClCC,eAAe,CAACC,IAAI,CAAC,IAAI,EAAEF,KAAK,CAAC;AACnC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,eAAeA,CAACD,KAAK,EAAEG,QAAQ,EAAE;EACxC,MAAMC,GAAG,GAAG,IAAI,CAACC,cAAc,CAACL,KAAK,CAAC;EACtC,IAAI,CAACM,GAAG,CAAC,WAAW,GAAGZ,WAAW,CAAC,CAACS,QAAQ,IAAI,EAAE,IAAIC,GAAG,CAAC,GAAG,IAAI,CAAC;EAClE,IAAI,CAACG,GAAG,CAAC,IAAI,CAACC,MAAM,CAACJ,GAAG,CAAC,CAAC;EAC1B,IAAI,CAACE,GAAG,CAAC,MAAM,CAAC;AAClB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}