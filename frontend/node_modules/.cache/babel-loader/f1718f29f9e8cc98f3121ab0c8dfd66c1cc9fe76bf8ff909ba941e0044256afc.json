{"ast":null,"code":"/**\r\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\r\n * @typedef {import('micromark-util-types').Initializer} Initializer\r\n * @typedef {import('micromark-util-types').State} State\r\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\r\n */\n\nimport { blankLine, content } from 'micromark-core-commonmark';\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding } from 'micromark-util-character';\nimport { codes, types } from 'micromark-util-symbol';\nimport { ok as assert } from 'devlop';\n\n/** @type {InitialConstruct} */\nexport const flow = {\n  tokenize: initializeFlow\n};\n\n/**\r\n * @this {TokenizeContext}\r\n * @type {Initializer}\r\n */\nfunction initializeFlow(effects) {\n  const self = this;\n  const initial = effects.attempt(\n  // Try to parse a blank line.\n  blankLine, atBlankEnding,\n  // Try to parse initial flow (essentially, only code).\n  effects.attempt(this.parser.constructs.flowInitial, afterConstruct, factorySpace(effects, effects.attempt(this.parser.constructs.flow, afterConstruct, effects.attempt(content, afterConstruct)), types.linePrefix)));\n  return initial;\n\n  /** @type {State} */\n  function atBlankEnding(code) {\n    assert(code === codes.eof || markdownLineEnding(code), 'expected eol or eof');\n    if (code === codes.eof) {\n      effects.consume(code);\n      return;\n    }\n    effects.enter(types.lineEndingBlank);\n    effects.consume(code);\n    effects.exit(types.lineEndingBlank);\n    self.currentConstruct = undefined;\n    return initial;\n  }\n\n  /** @type {State} */\n  function afterConstruct(code) {\n    assert(code === codes.eof || markdownLineEnding(code), 'expected eol or eof');\n    if (code === codes.eof) {\n      effects.consume(code);\n      return;\n    }\n    effects.enter(types.lineEnding);\n    effects.consume(code);\n    effects.exit(types.lineEnding);\n    self.currentConstruct = undefined;\n    return initial;\n  }\n}","map":{"version":3,"names":["blankLine","content","factorySpace","markdownLineEnding","codes","types","ok","assert","flow","tokenize","initializeFlow","effects","self","initial","attempt","atBlankEnding","parser","constructs","flowInitial","afterConstruct","linePrefix","code","eof","consume","enter","lineEndingBlank","exit","currentConstruct","undefined","lineEnding"],"sources":["C:/Users/rjalr/OneDrive/바탕 화면/ybigta/ybigta_blog_2/Ybigta-Blog/frontend/node_modules/micromark/dev/lib/initialize/flow.js"],"sourcesContent":["/**\r\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\r\n * @typedef {import('micromark-util-types').Initializer} Initializer\r\n * @typedef {import('micromark-util-types').State} State\r\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\r\n */\r\n\r\nimport {blankLine, content} from 'micromark-core-commonmark'\r\nimport {factorySpace} from 'micromark-factory-space'\r\nimport {markdownLineEnding} from 'micromark-util-character'\r\nimport {codes, types} from 'micromark-util-symbol'\r\nimport {ok as assert} from 'devlop'\r\n\r\n/** @type {InitialConstruct} */\r\nexport const flow = {tokenize: initializeFlow}\r\n\r\n/**\r\n * @this {TokenizeContext}\r\n * @type {Initializer}\r\n */\r\nfunction initializeFlow(effects) {\r\n  const self = this\r\n  const initial = effects.attempt(\r\n    // Try to parse a blank line.\r\n    blankLine,\r\n    atBlankEnding,\r\n    // Try to parse initial flow (essentially, only code).\r\n    effects.attempt(\r\n      this.parser.constructs.flowInitial,\r\n      afterConstruct,\r\n      factorySpace(\r\n        effects,\r\n        effects.attempt(\r\n          this.parser.constructs.flow,\r\n          afterConstruct,\r\n          effects.attempt(content, afterConstruct)\r\n        ),\r\n        types.linePrefix\r\n      )\r\n    )\r\n  )\r\n\r\n  return initial\r\n\r\n  /** @type {State} */\r\n  function atBlankEnding(code) {\r\n    assert(\r\n      code === codes.eof || markdownLineEnding(code),\r\n      'expected eol or eof'\r\n    )\r\n\r\n    if (code === codes.eof) {\r\n      effects.consume(code)\r\n      return\r\n    }\r\n\r\n    effects.enter(types.lineEndingBlank)\r\n    effects.consume(code)\r\n    effects.exit(types.lineEndingBlank)\r\n    self.currentConstruct = undefined\r\n    return initial\r\n  }\r\n\r\n  /** @type {State} */\r\n  function afterConstruct(code) {\r\n    assert(\r\n      code === codes.eof || markdownLineEnding(code),\r\n      'expected eol or eof'\r\n    )\r\n\r\n    if (code === codes.eof) {\r\n      effects.consume(code)\r\n      return\r\n    }\r\n\r\n    effects.enter(types.lineEnding)\r\n    effects.consume(code)\r\n    effects.exit(types.lineEnding)\r\n    self.currentConstruct = undefined\r\n    return initial\r\n  }\r\n}\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAAQA,SAAS,EAAEC,OAAO,QAAO,2BAA2B;AAC5D,SAAQC,YAAY,QAAO,yBAAyB;AACpD,SAAQC,kBAAkB,QAAO,0BAA0B;AAC3D,SAAQC,KAAK,EAAEC,KAAK,QAAO,uBAAuB;AAClD,SAAQC,EAAE,IAAIC,MAAM,QAAO,QAAQ;;AAEnC;AACA,OAAO,MAAMC,IAAI,GAAG;EAACC,QAAQ,EAAEC;AAAc,CAAC;;AAE9C;AACA;AACA;AACA;AACA,SAASA,cAAcA,CAACC,OAAO,EAAE;EAC/B,MAAMC,IAAI,GAAG,IAAI;EACjB,MAAMC,OAAO,GAAGF,OAAO,CAACG,OAAO;EAC7B;EACAd,SAAS,EACTe,aAAa;EACb;EACAJ,OAAO,CAACG,OAAO,CACb,IAAI,CAACE,MAAM,CAACC,UAAU,CAACC,WAAW,EAClCC,cAAc,EACdjB,YAAY,CACVS,OAAO,EACPA,OAAO,CAACG,OAAO,CACb,IAAI,CAACE,MAAM,CAACC,UAAU,CAACT,IAAI,EAC3BW,cAAc,EACdR,OAAO,CAACG,OAAO,CAACb,OAAO,EAAEkB,cAAc,CACzC,CAAC,EACDd,KAAK,CAACe,UACR,CACF,CACF,CAAC;EAED,OAAOP,OAAO;;EAEd;EACA,SAASE,aAAaA,CAACM,IAAI,EAAE;IAC3Bd,MAAM,CACJc,IAAI,KAAKjB,KAAK,CAACkB,GAAG,IAAInB,kBAAkB,CAACkB,IAAI,CAAC,EAC9C,qBACF,CAAC;IAED,IAAIA,IAAI,KAAKjB,KAAK,CAACkB,GAAG,EAAE;MACtBX,OAAO,CAACY,OAAO,CAACF,IAAI,CAAC;MACrB;IACF;IAEAV,OAAO,CAACa,KAAK,CAACnB,KAAK,CAACoB,eAAe,CAAC;IACpCd,OAAO,CAACY,OAAO,CAACF,IAAI,CAAC;IACrBV,OAAO,CAACe,IAAI,CAACrB,KAAK,CAACoB,eAAe,CAAC;IACnCb,IAAI,CAACe,gBAAgB,GAAGC,SAAS;IACjC,OAAOf,OAAO;EAChB;;EAEA;EACA,SAASM,cAAcA,CAACE,IAAI,EAAE;IAC5Bd,MAAM,CACJc,IAAI,KAAKjB,KAAK,CAACkB,GAAG,IAAInB,kBAAkB,CAACkB,IAAI,CAAC,EAC9C,qBACF,CAAC;IAED,IAAIA,IAAI,KAAKjB,KAAK,CAACkB,GAAG,EAAE;MACtBX,OAAO,CAACY,OAAO,CAACF,IAAI,CAAC;MACrB;IACF;IAEAV,OAAO,CAACa,KAAK,CAACnB,KAAK,CAACwB,UAAU,CAAC;IAC/BlB,OAAO,CAACY,OAAO,CAACF,IAAI,CAAC;IACrBV,OAAO,CAACe,IAAI,CAACrB,KAAK,CAACwB,UAAU,CAAC;IAC9BjB,IAAI,CAACe,gBAAgB,GAAGC,SAAS;IACjC,OAAOf,OAAO;EAChB;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}