{"ast":null,"code":"import { codes, values } from 'micromark-util-symbol';\n\n/**\r\n * Turn the number (in string form as either hexa- or plain decimal) coming from\r\n * a numeric character reference into a character.\r\n *\r\n * Sort of like `String.fromCodePoint(Number.parseInt(value, base))`, but makes\r\n * non-characters and control characters safe.\r\n *\r\n * @param {string} value\r\n *   Value to decode.\r\n * @param {number} base\r\n *   Numeric base.\r\n * @returns {string}\r\n *   Character.\r\n */\nexport function decodeNumericCharacterReference(value, base) {\n  const code = Number.parseInt(value, base);\n  if (\n  // C0 except for HT, LF, FF, CR, space.\n  code < codes.ht || code === codes.vt || code > codes.cr && code < codes.space ||\n  // Control character (DEL) of C0, and C1 controls.\n  code > codes.tilde && code < 160 ||\n  // Lone high surrogates and low surrogates.\n  code > 55_295 && code < 57_344 ||\n  // Noncharacters.\n  code > 64_975 && code < 65_008 || /* eslint-disable no-bitwise */\n  (code & 65_535) === 65_535 || (code & 65_535) === 65_534 || /* eslint-enable no-bitwise */\n  // Out of range\n  code > 1_114_111) {\n    return values.replacementCharacter;\n  }\n  return String.fromCodePoint(code);\n}","map":{"version":3,"names":["codes","values","decodeNumericCharacterReference","value","base","code","Number","parseInt","ht","vt","cr","space","tilde","replacementCharacter","String","fromCodePoint"],"sources":["C:/Users/rjalr/OneDrive/바탕 화면/ybigta/ybigta_blog_2/Ybigta-Blog/frontend/node_modules/micromark-util-decode-numeric-character-reference/dev/index.js"],"sourcesContent":["import {codes, values} from 'micromark-util-symbol'\r\n\r\n/**\r\n * Turn the number (in string form as either hexa- or plain decimal) coming from\r\n * a numeric character reference into a character.\r\n *\r\n * Sort of like `String.fromCodePoint(Number.parseInt(value, base))`, but makes\r\n * non-characters and control characters safe.\r\n *\r\n * @param {string} value\r\n *   Value to decode.\r\n * @param {number} base\r\n *   Numeric base.\r\n * @returns {string}\r\n *   Character.\r\n */\r\nexport function decodeNumericCharacterReference(value, base) {\r\n  const code = Number.parseInt(value, base)\r\n\r\n  if (\r\n    // C0 except for HT, LF, FF, CR, space.\r\n    code < codes.ht ||\r\n    code === codes.vt ||\r\n    (code > codes.cr && code < codes.space) ||\r\n    // Control character (DEL) of C0, and C1 controls.\r\n    (code > codes.tilde && code < 160) ||\r\n    // Lone high surrogates and low surrogates.\r\n    (code > 55_295 && code < 57_344) ||\r\n    // Noncharacters.\r\n    (code > 64_975 && code < 65_008) ||\r\n    /* eslint-disable no-bitwise */\r\n    (code & 65_535) === 65_535 ||\r\n    (code & 65_535) === 65_534 ||\r\n    /* eslint-enable no-bitwise */\r\n    // Out of range\r\n    code > 1_114_111\r\n  ) {\r\n    return values.replacementCharacter\r\n  }\r\n\r\n  return String.fromCodePoint(code)\r\n}\r\n"],"mappings":"AAAA,SAAQA,KAAK,EAAEC,MAAM,QAAO,uBAAuB;;AAEnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,+BAA+BA,CAACC,KAAK,EAAEC,IAAI,EAAE;EAC3D,MAAMC,IAAI,GAAGC,MAAM,CAACC,QAAQ,CAACJ,KAAK,EAAEC,IAAI,CAAC;EAEzC;EACE;EACAC,IAAI,GAAGL,KAAK,CAACQ,EAAE,IACfH,IAAI,KAAKL,KAAK,CAACS,EAAE,IAChBJ,IAAI,GAAGL,KAAK,CAACU,EAAE,IAAIL,IAAI,GAAGL,KAAK,CAACW,KAAM;EACvC;EACCN,IAAI,GAAGL,KAAK,CAACY,KAAK,IAAIP,IAAI,GAAG,GAAI;EAClC;EACCA,IAAI,GAAG,MAAM,IAAIA,IAAI,GAAG,MAAO;EAChC;EACCA,IAAI,GAAG,MAAM,IAAIA,IAAI,GAAG,MAAO,IAChC;EACA,CAACA,IAAI,GAAG,MAAM,MAAM,MAAM,IAC1B,CAACA,IAAI,GAAG,MAAM,MAAM,MAAM,IAC1B;EACA;EACAA,IAAI,GAAG,SAAS,EAChB;IACA,OAAOJ,MAAM,CAACY,oBAAoB;EACpC;EAEA,OAAOC,MAAM,CAACC,aAAa,CAACV,IAAI,CAAC;AACnC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}