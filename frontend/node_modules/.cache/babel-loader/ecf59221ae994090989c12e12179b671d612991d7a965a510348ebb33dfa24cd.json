{"ast":null,"code":"/**\r\n * @typedef {import('micromark-util-types').Code} Code\r\n * @typedef {import('micromark-util-types').Construct} Construct\r\n * @typedef {import('micromark-util-types').Resolver} Resolver\r\n * @typedef {import('micromark-util-types').State} State\r\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\r\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\r\n */\n\nimport { asciiAlpha, asciiAlphanumeric, markdownLineEnding, markdownLineEndingOrSpace, markdownSpace } from 'micromark-util-character';\nimport { htmlBlockNames, htmlRawNames } from 'micromark-util-html-tag-name';\nimport { codes, constants, types } from 'micromark-util-symbol';\nimport { ok as assert } from 'devlop';\nimport { blankLine } from './blank-line.js';\n\n/** @type {Construct} */\nexport const htmlFlow = {\n  name: 'htmlFlow',\n  tokenize: tokenizeHtmlFlow,\n  resolveTo: resolveToHtmlFlow,\n  concrete: true\n};\n\n/** @type {Construct} */\nconst blankLineBefore = {\n  tokenize: tokenizeBlankLineBefore,\n  partial: true\n};\nconst nonLazyContinuationStart = {\n  tokenize: tokenizeNonLazyContinuationStart,\n  partial: true\n};\n\n/** @type {Resolver} */\nfunction resolveToHtmlFlow(events) {\n  let index = events.length;\n  while (index--) {\n    if (events[index][0] === 'enter' && events[index][1].type === types.htmlFlow) {\n      break;\n    }\n  }\n  if (index > 1 && events[index - 2][1].type === types.linePrefix) {\n    // Add the prefix start to the HTML token.\n    events[index][1].start = events[index - 2][1].start;\n    // Add the prefix start to the HTML line token.\n    events[index + 1][1].start = events[index - 2][1].start;\n    // Remove the line prefix.\n    events.splice(index - 2, 2);\n  }\n  return events;\n}\n\n/**\r\n * @this {TokenizeContext}\r\n * @type {Tokenizer}\r\n */\nfunction tokenizeHtmlFlow(effects, ok, nok) {\n  const self = this;\n  /** @type {number} */\n  let marker;\n  /** @type {boolean} */\n  let closingTag;\n  /** @type {string} */\n  let buffer;\n  /** @type {number} */\n  let index;\n  /** @type {Code} */\n  let markerB;\n  return start;\n\n  /**\r\n   * Start of HTML (flow).\r\n   *\r\n   * ```markdown\r\n   * > | <x />\r\n   *     ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\n  function start(code) {\n    // To do: parse indent like `markdown-rs`.\n    return before(code);\n  }\n\n  /**\r\n   * At `<`, after optional whitespace.\r\n   *\r\n   * ```markdown\r\n   * > | <x />\r\n   *     ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\n  function before(code) {\n    assert(code === codes.lessThan, 'expected `<`');\n    effects.enter(types.htmlFlow);\n    effects.enter(types.htmlFlowData);\n    effects.consume(code);\n    return open;\n  }\n\n  /**\r\n   * After `<`, at tag name or other stuff.\r\n   *\r\n   * ```markdown\r\n   * > | <x />\r\n   *      ^\r\n   * > | <!doctype>\r\n   *      ^\r\n   * > | <!--xxx-->\r\n   *      ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\n  function open(code) {\n    if (code === codes.exclamationMark) {\n      effects.consume(code);\n      return declarationOpen;\n    }\n    if (code === codes.slash) {\n      effects.consume(code);\n      closingTag = true;\n      return tagCloseStart;\n    }\n    if (code === codes.questionMark) {\n      effects.consume(code);\n      marker = constants.htmlInstruction;\n      // To do:\n      // tokenizer.concrete = true\n      // To do: use `markdown-rs` style interrupt.\n      // While we’re in an instruction instead of a declaration, we’re on a `?`\n      // right now, so we do need to search for `>`, similar to declarations.\n      return self.interrupt ? ok : continuationDeclarationInside;\n    }\n\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      effects.consume(code);\n      // @ts-expect-error: not null.\n      buffer = String.fromCharCode(code);\n      return tagName;\n    }\n    return nok(code);\n  }\n\n  /**\r\n   * After `<!`, at declaration, comment, or CDATA.\r\n   *\r\n   * ```markdown\r\n   * > | <!doctype>\r\n   *       ^\r\n   * > | <!--xxx-->\r\n   *       ^\r\n   * > | <![CDATA[>&<]]>\r\n   *       ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\n  function declarationOpen(code) {\n    if (code === codes.dash) {\n      effects.consume(code);\n      marker = constants.htmlComment;\n      return commentOpenInside;\n    }\n    if (code === codes.leftSquareBracket) {\n      effects.consume(code);\n      marker = constants.htmlCdata;\n      index = 0;\n      return cdataOpenInside;\n    }\n\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      effects.consume(code);\n      marker = constants.htmlDeclaration;\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return self.interrupt ? ok : continuationDeclarationInside;\n    }\n    return nok(code);\n  }\n\n  /**\r\n   * After `<!-`, inside a comment, at another `-`.\r\n   *\r\n   * ```markdown\r\n   * > | <!--xxx-->\r\n   *        ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\n  function commentOpenInside(code) {\n    if (code === codes.dash) {\n      effects.consume(code);\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return self.interrupt ? ok : continuationDeclarationInside;\n    }\n    return nok(code);\n  }\n\n  /**\r\n   * After `<![`, inside CDATA, expecting `CDATA[`.\r\n   *\r\n   * ```markdown\r\n   * > | <![CDATA[>&<]]>\r\n   *        ^^^^^^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\n  function cdataOpenInside(code) {\n    const value = constants.cdataOpeningString;\n    if (code === value.charCodeAt(index++)) {\n      effects.consume(code);\n      if (index === value.length) {\n        // // Do not form containers.\n        // tokenizer.concrete = true\n        return self.interrupt ? ok : continuation;\n      }\n      return cdataOpenInside;\n    }\n    return nok(code);\n  }\n\n  /**\r\n   * After `</`, in closing tag, at tag name.\r\n   *\r\n   * ```markdown\r\n   * > | </x>\r\n   *       ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\n  function tagCloseStart(code) {\n    if (asciiAlpha(code)) {\n      effects.consume(code);\n      // @ts-expect-error: not null.\n      buffer = String.fromCharCode(code);\n      return tagName;\n    }\n    return nok(code);\n  }\n\n  /**\r\n   * In tag name.\r\n   *\r\n   * ```markdown\r\n   * > | <ab>\r\n   *      ^^\r\n   * > | </ab>\r\n   *       ^^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\n  function tagName(code) {\n    if (code === codes.eof || code === codes.slash || code === codes.greaterThan || markdownLineEndingOrSpace(code)) {\n      const slash = code === codes.slash;\n      const name = buffer.toLowerCase();\n      if (!slash && !closingTag && htmlRawNames.includes(name)) {\n        marker = constants.htmlRaw;\n        // // Do not form containers.\n        // tokenizer.concrete = true\n        return self.interrupt ? ok(code) : continuation(code);\n      }\n      if (htmlBlockNames.includes(buffer.toLowerCase())) {\n        marker = constants.htmlBasic;\n        if (slash) {\n          effects.consume(code);\n          return basicSelfClosing;\n        }\n\n        // // Do not form containers.\n        // tokenizer.concrete = true\n        return self.interrupt ? ok(code) : continuation(code);\n      }\n      marker = constants.htmlComplete;\n      // Do not support complete HTML when interrupting.\n      return self.interrupt && !self.parser.lazy[self.now().line] ? nok(code) : closingTag ? completeClosingTagAfter(code) : completeAttributeNameBefore(code);\n    }\n\n    // ASCII alphanumerical and `-`.\n    if (code === codes.dash || asciiAlphanumeric(code)) {\n      effects.consume(code);\n      buffer += String.fromCharCode(code);\n      return tagName;\n    }\n    return nok(code);\n  }\n\n  /**\r\n   * After closing slash of a basic tag name.\r\n   *\r\n   * ```markdown\r\n   * > | <div/>\r\n   *          ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\n  function basicSelfClosing(code) {\n    if (code === codes.greaterThan) {\n      effects.consume(code);\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return self.interrupt ? ok : continuation;\n    }\n    return nok(code);\n  }\n\n  /**\r\n   * After closing slash of a complete tag name.\r\n   *\r\n   * ```markdown\r\n   * > | <x/>\r\n   *        ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\n  function completeClosingTagAfter(code) {\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return completeClosingTagAfter;\n    }\n    return completeEnd(code);\n  }\n\n  /**\r\n   * At an attribute name.\r\n   *\r\n   * At first, this state is used after a complete tag name, after whitespace,\r\n   * where it expects optional attributes or the end of the tag.\r\n   * It is also reused after attributes, when expecting more optional\r\n   * attributes.\r\n   *\r\n   * ```markdown\r\n   * > | <a />\r\n   *        ^\r\n   * > | <a :b>\r\n   *        ^\r\n   * > | <a _b>\r\n   *        ^\r\n   * > | <a b>\r\n   *        ^\r\n   * > | <a >\r\n   *        ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\n  function completeAttributeNameBefore(code) {\n    if (code === codes.slash) {\n      effects.consume(code);\n      return completeEnd;\n    }\n\n    // ASCII alphanumerical and `:` and `_`.\n    if (code === codes.colon || code === codes.underscore || asciiAlpha(code)) {\n      effects.consume(code);\n      return completeAttributeName;\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return completeAttributeNameBefore;\n    }\n    return completeEnd(code);\n  }\n\n  /**\r\n   * In attribute name.\r\n   *\r\n   * ```markdown\r\n   * > | <a :b>\r\n   *         ^\r\n   * > | <a _b>\r\n   *         ^\r\n   * > | <a b>\r\n   *         ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\n  function completeAttributeName(code) {\n    // ASCII alphanumerical and `-`, `.`, `:`, and `_`.\n    if (code === codes.dash || code === codes.dot || code === codes.colon || code === codes.underscore || asciiAlphanumeric(code)) {\n      effects.consume(code);\n      return completeAttributeName;\n    }\n    return completeAttributeNameAfter(code);\n  }\n\n  /**\r\n   * After attribute name, at an optional initializer, the end of the tag, or\r\n   * whitespace.\r\n   *\r\n   * ```markdown\r\n   * > | <a b>\r\n   *         ^\r\n   * > | <a b=c>\r\n   *         ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\n  function completeAttributeNameAfter(code) {\n    if (code === codes.equalsTo) {\n      effects.consume(code);\n      return completeAttributeValueBefore;\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return completeAttributeNameAfter;\n    }\n    return completeAttributeNameBefore(code);\n  }\n\n  /**\r\n   * Before unquoted, double quoted, or single quoted attribute value, allowing\r\n   * whitespace.\r\n   *\r\n   * ```markdown\r\n   * > | <a b=c>\r\n   *          ^\r\n   * > | <a b=\"c\">\r\n   *          ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\n  function completeAttributeValueBefore(code) {\n    if (code === codes.eof || code === codes.lessThan || code === codes.equalsTo || code === codes.greaterThan || code === codes.graveAccent) {\n      return nok(code);\n    }\n    if (code === codes.quotationMark || code === codes.apostrophe) {\n      effects.consume(code);\n      markerB = code;\n      return completeAttributeValueQuoted;\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return completeAttributeValueBefore;\n    }\n    return completeAttributeValueUnquoted(code);\n  }\n\n  /**\r\n   * In double or single quoted attribute value.\r\n   *\r\n   * ```markdown\r\n   * > | <a b=\"c\">\r\n   *           ^\r\n   * > | <a b='c'>\r\n   *           ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\n  function completeAttributeValueQuoted(code) {\n    if (code === markerB) {\n      effects.consume(code);\n      markerB = null;\n      return completeAttributeValueQuotedAfter;\n    }\n    if (code === codes.eof || markdownLineEnding(code)) {\n      return nok(code);\n    }\n    effects.consume(code);\n    return completeAttributeValueQuoted;\n  }\n\n  /**\r\n   * In unquoted attribute value.\r\n   *\r\n   * ```markdown\r\n   * > | <a b=c>\r\n   *          ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\n  function completeAttributeValueUnquoted(code) {\n    if (code === codes.eof || code === codes.quotationMark || code === codes.apostrophe || code === codes.slash || code === codes.lessThan || code === codes.equalsTo || code === codes.greaterThan || code === codes.graveAccent || markdownLineEndingOrSpace(code)) {\n      return completeAttributeNameAfter(code);\n    }\n    effects.consume(code);\n    return completeAttributeValueUnquoted;\n  }\n\n  /**\r\n   * After double or single quoted attribute value, before whitespace or the\r\n   * end of the tag.\r\n   *\r\n   * ```markdown\r\n   * > | <a b=\"c\">\r\n   *            ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\n  function completeAttributeValueQuotedAfter(code) {\n    if (code === codes.slash || code === codes.greaterThan || markdownSpace(code)) {\n      return completeAttributeNameBefore(code);\n    }\n    return nok(code);\n  }\n\n  /**\r\n   * In certain circumstances of a complete tag where only an `>` is allowed.\r\n   *\r\n   * ```markdown\r\n   * > | <a b=\"c\">\r\n   *             ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\n  function completeEnd(code) {\n    if (code === codes.greaterThan) {\n      effects.consume(code);\n      return completeAfter;\n    }\n    return nok(code);\n  }\n\n  /**\r\n   * After `>` in a complete tag.\r\n   *\r\n   * ```markdown\r\n   * > | <x>\r\n   *        ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\n  function completeAfter(code) {\n    if (code === codes.eof || markdownLineEnding(code)) {\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return continuation(code);\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return completeAfter;\n    }\n    return nok(code);\n  }\n\n  /**\r\n   * In continuation of any HTML kind.\r\n   *\r\n   * ```markdown\r\n   * > | <!--xxx-->\r\n   *          ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\n  function continuation(code) {\n    if (code === codes.dash && marker === constants.htmlComment) {\n      effects.consume(code);\n      return continuationCommentInside;\n    }\n    if (code === codes.lessThan && marker === constants.htmlRaw) {\n      effects.consume(code);\n      return continuationRawTagOpen;\n    }\n    if (code === codes.greaterThan && marker === constants.htmlDeclaration) {\n      effects.consume(code);\n      return continuationClose;\n    }\n    if (code === codes.questionMark && marker === constants.htmlInstruction) {\n      effects.consume(code);\n      return continuationDeclarationInside;\n    }\n    if (code === codes.rightSquareBracket && marker === constants.htmlCdata) {\n      effects.consume(code);\n      return continuationCdataInside;\n    }\n    if (markdownLineEnding(code) && (marker === constants.htmlBasic || marker === constants.htmlComplete)) {\n      effects.exit(types.htmlFlowData);\n      return effects.check(blankLineBefore, continuationAfter, continuationStart)(code);\n    }\n    if (code === codes.eof || markdownLineEnding(code)) {\n      effects.exit(types.htmlFlowData);\n      return continuationStart(code);\n    }\n    effects.consume(code);\n    return continuation;\n  }\n\n  /**\r\n   * In continuation, at eol.\r\n   *\r\n   * ```markdown\r\n   * > | <x>\r\n   *        ^\r\n   *   | asd\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\n  function continuationStart(code) {\n    return effects.check(nonLazyContinuationStart, continuationStartNonLazy, continuationAfter)(code);\n  }\n\n  /**\r\n   * In continuation, at eol, before non-lazy content.\r\n   *\r\n   * ```markdown\r\n   * > | <x>\r\n   *        ^\r\n   *   | asd\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\n  function continuationStartNonLazy(code) {\n    assert(markdownLineEnding(code));\n    effects.enter(types.lineEnding);\n    effects.consume(code);\n    effects.exit(types.lineEnding);\n    return continuationBefore;\n  }\n\n  /**\r\n   * In continuation, before non-lazy content.\r\n   *\r\n   * ```markdown\r\n   *   | <x>\r\n   * > | asd\r\n   *     ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\n  function continuationBefore(code) {\n    if (code === codes.eof || markdownLineEnding(code)) {\n      return continuationStart(code);\n    }\n    effects.enter(types.htmlFlowData);\n    return continuation(code);\n  }\n\n  /**\r\n   * In comment continuation, after one `-`, expecting another.\r\n   *\r\n   * ```markdown\r\n   * > | <!--xxx-->\r\n   *             ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\n  function continuationCommentInside(code) {\n    if (code === codes.dash) {\n      effects.consume(code);\n      return continuationDeclarationInside;\n    }\n    return continuation(code);\n  }\n\n  /**\r\n   * In raw continuation, after `<`, at `/`.\r\n   *\r\n   * ```markdown\r\n   * > | <script>console.log(1)</script>\r\n   *                            ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\n  function continuationRawTagOpen(code) {\n    if (code === codes.slash) {\n      effects.consume(code);\n      buffer = '';\n      return continuationRawEndTag;\n    }\n    return continuation(code);\n  }\n\n  /**\r\n   * In raw continuation, after `</`, in a raw tag name.\r\n   *\r\n   * ```markdown\r\n   * > | <script>console.log(1)</script>\r\n   *                             ^^^^^^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\n  function continuationRawEndTag(code) {\n    if (code === codes.greaterThan) {\n      const name = buffer.toLowerCase();\n      if (htmlRawNames.includes(name)) {\n        effects.consume(code);\n        return continuationClose;\n      }\n      return continuation(code);\n    }\n    if (asciiAlpha(code) && buffer.length < constants.htmlRawSizeMax) {\n      effects.consume(code);\n      // @ts-expect-error: not null.\n      buffer += String.fromCharCode(code);\n      return continuationRawEndTag;\n    }\n    return continuation(code);\n  }\n\n  /**\r\n   * In cdata continuation, after `]`, expecting `]>`.\r\n   *\r\n   * ```markdown\r\n   * > | <![CDATA[>&<]]>\r\n   *                  ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\n  function continuationCdataInside(code) {\n    if (code === codes.rightSquareBracket) {\n      effects.consume(code);\n      return continuationDeclarationInside;\n    }\n    return continuation(code);\n  }\n\n  /**\r\n   * In declaration or instruction continuation, at `>`.\r\n   *\r\n   * ```markdown\r\n   * > | <!-->\r\n   *         ^\r\n   * > | <?>\r\n   *       ^\r\n   * > | <!q>\r\n   *        ^\r\n   * > | <!--ab-->\r\n   *             ^\r\n   * > | <![CDATA[>&<]]>\r\n   *                   ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\n  function continuationDeclarationInside(code) {\n    if (code === codes.greaterThan) {\n      effects.consume(code);\n      return continuationClose;\n    }\n\n    // More dashes.\n    if (code === codes.dash && marker === constants.htmlComment) {\n      effects.consume(code);\n      return continuationDeclarationInside;\n    }\n    return continuation(code);\n  }\n\n  /**\r\n   * In closed continuation: everything we get until the eol/eof is part of it.\r\n   *\r\n   * ```markdown\r\n   * > | <!doctype>\r\n   *               ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\n  function continuationClose(code) {\n    if (code === codes.eof || markdownLineEnding(code)) {\n      effects.exit(types.htmlFlowData);\n      return continuationAfter(code);\n    }\n    effects.consume(code);\n    return continuationClose;\n  }\n\n  /**\r\n   * Done.\r\n   *\r\n   * ```markdown\r\n   * > | <!doctype>\r\n   *               ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\n  function continuationAfter(code) {\n    effects.exit(types.htmlFlow);\n    // // Feel free to interrupt.\n    // tokenizer.interrupt = false\n    // // No longer concrete.\n    // tokenizer.concrete = false\n    return ok(code);\n  }\n}\n\n/**\r\n * @this {TokenizeContext}\r\n * @type {Tokenizer}\r\n */\nfunction tokenizeNonLazyContinuationStart(effects, ok, nok) {\n  const self = this;\n  return start;\n\n  /**\r\n   * At eol, before continuation.\r\n   *\r\n   * ```markdown\r\n   * > | * ```js\r\n   *            ^\r\n   *   | b\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\n  function start(code) {\n    if (markdownLineEnding(code)) {\n      effects.enter(types.lineEnding);\n      effects.consume(code);\n      effects.exit(types.lineEnding);\n      return after;\n    }\n    return nok(code);\n  }\n\n  /**\r\n   * A continuation.\r\n   *\r\n   * ```markdown\r\n   *   | * ```js\r\n   * > | b\r\n   *     ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\n  function after(code) {\n    return self.parser.lazy[self.now().line] ? nok(code) : ok(code);\n  }\n}\n\n/**\r\n * @this {TokenizeContext}\r\n * @type {Tokenizer}\r\n */\nfunction tokenizeBlankLineBefore(effects, ok, nok) {\n  return start;\n\n  /**\r\n   * Before eol, expecting blank line.\r\n   *\r\n   * ```markdown\r\n   * > | <div>\r\n   *          ^\r\n   *   |\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\n  function start(code) {\n    assert(markdownLineEnding(code), 'expected a line ending');\n    effects.enter(types.lineEnding);\n    effects.consume(code);\n    effects.exit(types.lineEnding);\n    return effects.attempt(blankLine, ok, nok);\n  }\n}","map":{"version":3,"names":["asciiAlpha","asciiAlphanumeric","markdownLineEnding","markdownLineEndingOrSpace","markdownSpace","htmlBlockNames","htmlRawNames","codes","constants","types","ok","assert","blankLine","htmlFlow","name","tokenize","tokenizeHtmlFlow","resolveTo","resolveToHtmlFlow","concrete","blankLineBefore","tokenizeBlankLineBefore","partial","nonLazyContinuationStart","tokenizeNonLazyContinuationStart","events","index","length","type","linePrefix","start","splice","effects","nok","self","marker","closingTag","buffer","markerB","code","before","lessThan","enter","htmlFlowData","consume","open","exclamationMark","declarationOpen","slash","tagCloseStart","questionMark","htmlInstruction","interrupt","continuationDeclarationInside","String","fromCharCode","tagName","dash","htmlComment","commentOpenInside","leftSquareBracket","htmlCdata","cdataOpenInside","htmlDeclaration","value","cdataOpeningString","charCodeAt","continuation","eof","greaterThan","toLowerCase","includes","htmlRaw","htmlBasic","basicSelfClosing","htmlComplete","parser","lazy","now","line","completeClosingTagAfter","completeAttributeNameBefore","completeEnd","colon","underscore","completeAttributeName","dot","completeAttributeNameAfter","equalsTo","completeAttributeValueBefore","graveAccent","quotationMark","apostrophe","completeAttributeValueQuoted","completeAttributeValueUnquoted","completeAttributeValueQuotedAfter","completeAfter","continuationCommentInside","continuationRawTagOpen","continuationClose","rightSquareBracket","continuationCdataInside","exit","check","continuationAfter","continuationStart","continuationStartNonLazy","lineEnding","continuationBefore","continuationRawEndTag","htmlRawSizeMax","after","attempt"],"sources":["C:/Users/rjalr/OneDrive/바탕 화면/ybigta/ybigta_blog_2/Ybigta-Blog/frontend/node_modules/micromark-core-commonmark/dev/lib/html-flow.js"],"sourcesContent":["/**\r\n * @typedef {import('micromark-util-types').Code} Code\r\n * @typedef {import('micromark-util-types').Construct} Construct\r\n * @typedef {import('micromark-util-types').Resolver} Resolver\r\n * @typedef {import('micromark-util-types').State} State\r\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\r\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\r\n */\r\n\r\nimport {\r\n  asciiAlpha,\r\n  asciiAlphanumeric,\r\n  markdownLineEnding,\r\n  markdownLineEndingOrSpace,\r\n  markdownSpace\r\n} from 'micromark-util-character'\r\nimport {htmlBlockNames, htmlRawNames} from 'micromark-util-html-tag-name'\r\nimport {codes, constants, types} from 'micromark-util-symbol'\r\nimport {ok as assert} from 'devlop'\r\nimport {blankLine} from './blank-line.js'\r\n\r\n/** @type {Construct} */\r\nexport const htmlFlow = {\r\n  name: 'htmlFlow',\r\n  tokenize: tokenizeHtmlFlow,\r\n  resolveTo: resolveToHtmlFlow,\r\n  concrete: true\r\n}\r\n\r\n/** @type {Construct} */\r\nconst blankLineBefore = {tokenize: tokenizeBlankLineBefore, partial: true}\r\nconst nonLazyContinuationStart = {\r\n  tokenize: tokenizeNonLazyContinuationStart,\r\n  partial: true\r\n}\r\n\r\n/** @type {Resolver} */\r\nfunction resolveToHtmlFlow(events) {\r\n  let index = events.length\r\n\r\n  while (index--) {\r\n    if (\r\n      events[index][0] === 'enter' &&\r\n      events[index][1].type === types.htmlFlow\r\n    ) {\r\n      break\r\n    }\r\n  }\r\n\r\n  if (index > 1 && events[index - 2][1].type === types.linePrefix) {\r\n    // Add the prefix start to the HTML token.\r\n    events[index][1].start = events[index - 2][1].start\r\n    // Add the prefix start to the HTML line token.\r\n    events[index + 1][1].start = events[index - 2][1].start\r\n    // Remove the line prefix.\r\n    events.splice(index - 2, 2)\r\n  }\r\n\r\n  return events\r\n}\r\n\r\n/**\r\n * @this {TokenizeContext}\r\n * @type {Tokenizer}\r\n */\r\nfunction tokenizeHtmlFlow(effects, ok, nok) {\r\n  const self = this\r\n  /** @type {number} */\r\n  let marker\r\n  /** @type {boolean} */\r\n  let closingTag\r\n  /** @type {string} */\r\n  let buffer\r\n  /** @type {number} */\r\n  let index\r\n  /** @type {Code} */\r\n  let markerB\r\n\r\n  return start\r\n\r\n  /**\r\n   * Start of HTML (flow).\r\n   *\r\n   * ```markdown\r\n   * > | <x />\r\n   *     ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function start(code) {\r\n    // To do: parse indent like `markdown-rs`.\r\n    return before(code)\r\n  }\r\n\r\n  /**\r\n   * At `<`, after optional whitespace.\r\n   *\r\n   * ```markdown\r\n   * > | <x />\r\n   *     ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function before(code) {\r\n    assert(code === codes.lessThan, 'expected `<`')\r\n    effects.enter(types.htmlFlow)\r\n    effects.enter(types.htmlFlowData)\r\n    effects.consume(code)\r\n    return open\r\n  }\r\n\r\n  /**\r\n   * After `<`, at tag name or other stuff.\r\n   *\r\n   * ```markdown\r\n   * > | <x />\r\n   *      ^\r\n   * > | <!doctype>\r\n   *      ^\r\n   * > | <!--xxx-->\r\n   *      ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function open(code) {\r\n    if (code === codes.exclamationMark) {\r\n      effects.consume(code)\r\n      return declarationOpen\r\n    }\r\n\r\n    if (code === codes.slash) {\r\n      effects.consume(code)\r\n      closingTag = true\r\n      return tagCloseStart\r\n    }\r\n\r\n    if (code === codes.questionMark) {\r\n      effects.consume(code)\r\n      marker = constants.htmlInstruction\r\n      // To do:\r\n      // tokenizer.concrete = true\r\n      // To do: use `markdown-rs` style interrupt.\r\n      // While we’re in an instruction instead of a declaration, we’re on a `?`\r\n      // right now, so we do need to search for `>`, similar to declarations.\r\n      return self.interrupt ? ok : continuationDeclarationInside\r\n    }\r\n\r\n    // ASCII alphabetical.\r\n    if (asciiAlpha(code)) {\r\n      effects.consume(code)\r\n      // @ts-expect-error: not null.\r\n      buffer = String.fromCharCode(code)\r\n      return tagName\r\n    }\r\n\r\n    return nok(code)\r\n  }\r\n\r\n  /**\r\n   * After `<!`, at declaration, comment, or CDATA.\r\n   *\r\n   * ```markdown\r\n   * > | <!doctype>\r\n   *       ^\r\n   * > | <!--xxx-->\r\n   *       ^\r\n   * > | <![CDATA[>&<]]>\r\n   *       ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function declarationOpen(code) {\r\n    if (code === codes.dash) {\r\n      effects.consume(code)\r\n      marker = constants.htmlComment\r\n      return commentOpenInside\r\n    }\r\n\r\n    if (code === codes.leftSquareBracket) {\r\n      effects.consume(code)\r\n      marker = constants.htmlCdata\r\n      index = 0\r\n      return cdataOpenInside\r\n    }\r\n\r\n    // ASCII alphabetical.\r\n    if (asciiAlpha(code)) {\r\n      effects.consume(code)\r\n      marker = constants.htmlDeclaration\r\n      // // Do not form containers.\r\n      // tokenizer.concrete = true\r\n      return self.interrupt ? ok : continuationDeclarationInside\r\n    }\r\n\r\n    return nok(code)\r\n  }\r\n\r\n  /**\r\n   * After `<!-`, inside a comment, at another `-`.\r\n   *\r\n   * ```markdown\r\n   * > | <!--xxx-->\r\n   *        ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function commentOpenInside(code) {\r\n    if (code === codes.dash) {\r\n      effects.consume(code)\r\n      // // Do not form containers.\r\n      // tokenizer.concrete = true\r\n      return self.interrupt ? ok : continuationDeclarationInside\r\n    }\r\n\r\n    return nok(code)\r\n  }\r\n\r\n  /**\r\n   * After `<![`, inside CDATA, expecting `CDATA[`.\r\n   *\r\n   * ```markdown\r\n   * > | <![CDATA[>&<]]>\r\n   *        ^^^^^^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function cdataOpenInside(code) {\r\n    const value = constants.cdataOpeningString\r\n\r\n    if (code === value.charCodeAt(index++)) {\r\n      effects.consume(code)\r\n\r\n      if (index === value.length) {\r\n        // // Do not form containers.\r\n        // tokenizer.concrete = true\r\n        return self.interrupt ? ok : continuation\r\n      }\r\n\r\n      return cdataOpenInside\r\n    }\r\n\r\n    return nok(code)\r\n  }\r\n\r\n  /**\r\n   * After `</`, in closing tag, at tag name.\r\n   *\r\n   * ```markdown\r\n   * > | </x>\r\n   *       ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function tagCloseStart(code) {\r\n    if (asciiAlpha(code)) {\r\n      effects.consume(code)\r\n      // @ts-expect-error: not null.\r\n      buffer = String.fromCharCode(code)\r\n      return tagName\r\n    }\r\n\r\n    return nok(code)\r\n  }\r\n\r\n  /**\r\n   * In tag name.\r\n   *\r\n   * ```markdown\r\n   * > | <ab>\r\n   *      ^^\r\n   * > | </ab>\r\n   *       ^^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function tagName(code) {\r\n    if (\r\n      code === codes.eof ||\r\n      code === codes.slash ||\r\n      code === codes.greaterThan ||\r\n      markdownLineEndingOrSpace(code)\r\n    ) {\r\n      const slash = code === codes.slash\r\n      const name = buffer.toLowerCase()\r\n\r\n      if (!slash && !closingTag && htmlRawNames.includes(name)) {\r\n        marker = constants.htmlRaw\r\n        // // Do not form containers.\r\n        // tokenizer.concrete = true\r\n        return self.interrupt ? ok(code) : continuation(code)\r\n      }\r\n\r\n      if (htmlBlockNames.includes(buffer.toLowerCase())) {\r\n        marker = constants.htmlBasic\r\n\r\n        if (slash) {\r\n          effects.consume(code)\r\n          return basicSelfClosing\r\n        }\r\n\r\n        // // Do not form containers.\r\n        // tokenizer.concrete = true\r\n        return self.interrupt ? ok(code) : continuation(code)\r\n      }\r\n\r\n      marker = constants.htmlComplete\r\n      // Do not support complete HTML when interrupting.\r\n      return self.interrupt && !self.parser.lazy[self.now().line]\r\n        ? nok(code)\r\n        : closingTag\r\n        ? completeClosingTagAfter(code)\r\n        : completeAttributeNameBefore(code)\r\n    }\r\n\r\n    // ASCII alphanumerical and `-`.\r\n    if (code === codes.dash || asciiAlphanumeric(code)) {\r\n      effects.consume(code)\r\n      buffer += String.fromCharCode(code)\r\n      return tagName\r\n    }\r\n\r\n    return nok(code)\r\n  }\r\n\r\n  /**\r\n   * After closing slash of a basic tag name.\r\n   *\r\n   * ```markdown\r\n   * > | <div/>\r\n   *          ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function basicSelfClosing(code) {\r\n    if (code === codes.greaterThan) {\r\n      effects.consume(code)\r\n      // // Do not form containers.\r\n      // tokenizer.concrete = true\r\n      return self.interrupt ? ok : continuation\r\n    }\r\n\r\n    return nok(code)\r\n  }\r\n\r\n  /**\r\n   * After closing slash of a complete tag name.\r\n   *\r\n   * ```markdown\r\n   * > | <x/>\r\n   *        ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function completeClosingTagAfter(code) {\r\n    if (markdownSpace(code)) {\r\n      effects.consume(code)\r\n      return completeClosingTagAfter\r\n    }\r\n\r\n    return completeEnd(code)\r\n  }\r\n\r\n  /**\r\n   * At an attribute name.\r\n   *\r\n   * At first, this state is used after a complete tag name, after whitespace,\r\n   * where it expects optional attributes or the end of the tag.\r\n   * It is also reused after attributes, when expecting more optional\r\n   * attributes.\r\n   *\r\n   * ```markdown\r\n   * > | <a />\r\n   *        ^\r\n   * > | <a :b>\r\n   *        ^\r\n   * > | <a _b>\r\n   *        ^\r\n   * > | <a b>\r\n   *        ^\r\n   * > | <a >\r\n   *        ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function completeAttributeNameBefore(code) {\r\n    if (code === codes.slash) {\r\n      effects.consume(code)\r\n      return completeEnd\r\n    }\r\n\r\n    // ASCII alphanumerical and `:` and `_`.\r\n    if (code === codes.colon || code === codes.underscore || asciiAlpha(code)) {\r\n      effects.consume(code)\r\n      return completeAttributeName\r\n    }\r\n\r\n    if (markdownSpace(code)) {\r\n      effects.consume(code)\r\n      return completeAttributeNameBefore\r\n    }\r\n\r\n    return completeEnd(code)\r\n  }\r\n\r\n  /**\r\n   * In attribute name.\r\n   *\r\n   * ```markdown\r\n   * > | <a :b>\r\n   *         ^\r\n   * > | <a _b>\r\n   *         ^\r\n   * > | <a b>\r\n   *         ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function completeAttributeName(code) {\r\n    // ASCII alphanumerical and `-`, `.`, `:`, and `_`.\r\n    if (\r\n      code === codes.dash ||\r\n      code === codes.dot ||\r\n      code === codes.colon ||\r\n      code === codes.underscore ||\r\n      asciiAlphanumeric(code)\r\n    ) {\r\n      effects.consume(code)\r\n      return completeAttributeName\r\n    }\r\n\r\n    return completeAttributeNameAfter(code)\r\n  }\r\n\r\n  /**\r\n   * After attribute name, at an optional initializer, the end of the tag, or\r\n   * whitespace.\r\n   *\r\n   * ```markdown\r\n   * > | <a b>\r\n   *         ^\r\n   * > | <a b=c>\r\n   *         ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function completeAttributeNameAfter(code) {\r\n    if (code === codes.equalsTo) {\r\n      effects.consume(code)\r\n      return completeAttributeValueBefore\r\n    }\r\n\r\n    if (markdownSpace(code)) {\r\n      effects.consume(code)\r\n      return completeAttributeNameAfter\r\n    }\r\n\r\n    return completeAttributeNameBefore(code)\r\n  }\r\n\r\n  /**\r\n   * Before unquoted, double quoted, or single quoted attribute value, allowing\r\n   * whitespace.\r\n   *\r\n   * ```markdown\r\n   * > | <a b=c>\r\n   *          ^\r\n   * > | <a b=\"c\">\r\n   *          ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function completeAttributeValueBefore(code) {\r\n    if (\r\n      code === codes.eof ||\r\n      code === codes.lessThan ||\r\n      code === codes.equalsTo ||\r\n      code === codes.greaterThan ||\r\n      code === codes.graveAccent\r\n    ) {\r\n      return nok(code)\r\n    }\r\n\r\n    if (code === codes.quotationMark || code === codes.apostrophe) {\r\n      effects.consume(code)\r\n      markerB = code\r\n      return completeAttributeValueQuoted\r\n    }\r\n\r\n    if (markdownSpace(code)) {\r\n      effects.consume(code)\r\n      return completeAttributeValueBefore\r\n    }\r\n\r\n    return completeAttributeValueUnquoted(code)\r\n  }\r\n\r\n  /**\r\n   * In double or single quoted attribute value.\r\n   *\r\n   * ```markdown\r\n   * > | <a b=\"c\">\r\n   *           ^\r\n   * > | <a b='c'>\r\n   *           ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function completeAttributeValueQuoted(code) {\r\n    if (code === markerB) {\r\n      effects.consume(code)\r\n      markerB = null\r\n      return completeAttributeValueQuotedAfter\r\n    }\r\n\r\n    if (code === codes.eof || markdownLineEnding(code)) {\r\n      return nok(code)\r\n    }\r\n\r\n    effects.consume(code)\r\n    return completeAttributeValueQuoted\r\n  }\r\n\r\n  /**\r\n   * In unquoted attribute value.\r\n   *\r\n   * ```markdown\r\n   * > | <a b=c>\r\n   *          ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function completeAttributeValueUnquoted(code) {\r\n    if (\r\n      code === codes.eof ||\r\n      code === codes.quotationMark ||\r\n      code === codes.apostrophe ||\r\n      code === codes.slash ||\r\n      code === codes.lessThan ||\r\n      code === codes.equalsTo ||\r\n      code === codes.greaterThan ||\r\n      code === codes.graveAccent ||\r\n      markdownLineEndingOrSpace(code)\r\n    ) {\r\n      return completeAttributeNameAfter(code)\r\n    }\r\n\r\n    effects.consume(code)\r\n    return completeAttributeValueUnquoted\r\n  }\r\n\r\n  /**\r\n   * After double or single quoted attribute value, before whitespace or the\r\n   * end of the tag.\r\n   *\r\n   * ```markdown\r\n   * > | <a b=\"c\">\r\n   *            ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function completeAttributeValueQuotedAfter(code) {\r\n    if (\r\n      code === codes.slash ||\r\n      code === codes.greaterThan ||\r\n      markdownSpace(code)\r\n    ) {\r\n      return completeAttributeNameBefore(code)\r\n    }\r\n\r\n    return nok(code)\r\n  }\r\n\r\n  /**\r\n   * In certain circumstances of a complete tag where only an `>` is allowed.\r\n   *\r\n   * ```markdown\r\n   * > | <a b=\"c\">\r\n   *             ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function completeEnd(code) {\r\n    if (code === codes.greaterThan) {\r\n      effects.consume(code)\r\n      return completeAfter\r\n    }\r\n\r\n    return nok(code)\r\n  }\r\n\r\n  /**\r\n   * After `>` in a complete tag.\r\n   *\r\n   * ```markdown\r\n   * > | <x>\r\n   *        ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function completeAfter(code) {\r\n    if (code === codes.eof || markdownLineEnding(code)) {\r\n      // // Do not form containers.\r\n      // tokenizer.concrete = true\r\n      return continuation(code)\r\n    }\r\n\r\n    if (markdownSpace(code)) {\r\n      effects.consume(code)\r\n      return completeAfter\r\n    }\r\n\r\n    return nok(code)\r\n  }\r\n\r\n  /**\r\n   * In continuation of any HTML kind.\r\n   *\r\n   * ```markdown\r\n   * > | <!--xxx-->\r\n   *          ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function continuation(code) {\r\n    if (code === codes.dash && marker === constants.htmlComment) {\r\n      effects.consume(code)\r\n      return continuationCommentInside\r\n    }\r\n\r\n    if (code === codes.lessThan && marker === constants.htmlRaw) {\r\n      effects.consume(code)\r\n      return continuationRawTagOpen\r\n    }\r\n\r\n    if (code === codes.greaterThan && marker === constants.htmlDeclaration) {\r\n      effects.consume(code)\r\n      return continuationClose\r\n    }\r\n\r\n    if (code === codes.questionMark && marker === constants.htmlInstruction) {\r\n      effects.consume(code)\r\n      return continuationDeclarationInside\r\n    }\r\n\r\n    if (code === codes.rightSquareBracket && marker === constants.htmlCdata) {\r\n      effects.consume(code)\r\n      return continuationCdataInside\r\n    }\r\n\r\n    if (\r\n      markdownLineEnding(code) &&\r\n      (marker === constants.htmlBasic || marker === constants.htmlComplete)\r\n    ) {\r\n      effects.exit(types.htmlFlowData)\r\n      return effects.check(\r\n        blankLineBefore,\r\n        continuationAfter,\r\n        continuationStart\r\n      )(code)\r\n    }\r\n\r\n    if (code === codes.eof || markdownLineEnding(code)) {\r\n      effects.exit(types.htmlFlowData)\r\n      return continuationStart(code)\r\n    }\r\n\r\n    effects.consume(code)\r\n    return continuation\r\n  }\r\n\r\n  /**\r\n   * In continuation, at eol.\r\n   *\r\n   * ```markdown\r\n   * > | <x>\r\n   *        ^\r\n   *   | asd\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function continuationStart(code) {\r\n    return effects.check(\r\n      nonLazyContinuationStart,\r\n      continuationStartNonLazy,\r\n      continuationAfter\r\n    )(code)\r\n  }\r\n\r\n  /**\r\n   * In continuation, at eol, before non-lazy content.\r\n   *\r\n   * ```markdown\r\n   * > | <x>\r\n   *        ^\r\n   *   | asd\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function continuationStartNonLazy(code) {\r\n    assert(markdownLineEnding(code))\r\n    effects.enter(types.lineEnding)\r\n    effects.consume(code)\r\n    effects.exit(types.lineEnding)\r\n    return continuationBefore\r\n  }\r\n\r\n  /**\r\n   * In continuation, before non-lazy content.\r\n   *\r\n   * ```markdown\r\n   *   | <x>\r\n   * > | asd\r\n   *     ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function continuationBefore(code) {\r\n    if (code === codes.eof || markdownLineEnding(code)) {\r\n      return continuationStart(code)\r\n    }\r\n\r\n    effects.enter(types.htmlFlowData)\r\n    return continuation(code)\r\n  }\r\n\r\n  /**\r\n   * In comment continuation, after one `-`, expecting another.\r\n   *\r\n   * ```markdown\r\n   * > | <!--xxx-->\r\n   *             ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function continuationCommentInside(code) {\r\n    if (code === codes.dash) {\r\n      effects.consume(code)\r\n      return continuationDeclarationInside\r\n    }\r\n\r\n    return continuation(code)\r\n  }\r\n\r\n  /**\r\n   * In raw continuation, after `<`, at `/`.\r\n   *\r\n   * ```markdown\r\n   * > | <script>console.log(1)</script>\r\n   *                            ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function continuationRawTagOpen(code) {\r\n    if (code === codes.slash) {\r\n      effects.consume(code)\r\n      buffer = ''\r\n      return continuationRawEndTag\r\n    }\r\n\r\n    return continuation(code)\r\n  }\r\n\r\n  /**\r\n   * In raw continuation, after `</`, in a raw tag name.\r\n   *\r\n   * ```markdown\r\n   * > | <script>console.log(1)</script>\r\n   *                             ^^^^^^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function continuationRawEndTag(code) {\r\n    if (code === codes.greaterThan) {\r\n      const name = buffer.toLowerCase()\r\n\r\n      if (htmlRawNames.includes(name)) {\r\n        effects.consume(code)\r\n        return continuationClose\r\n      }\r\n\r\n      return continuation(code)\r\n    }\r\n\r\n    if (asciiAlpha(code) && buffer.length < constants.htmlRawSizeMax) {\r\n      effects.consume(code)\r\n      // @ts-expect-error: not null.\r\n      buffer += String.fromCharCode(code)\r\n      return continuationRawEndTag\r\n    }\r\n\r\n    return continuation(code)\r\n  }\r\n\r\n  /**\r\n   * In cdata continuation, after `]`, expecting `]>`.\r\n   *\r\n   * ```markdown\r\n   * > | <![CDATA[>&<]]>\r\n   *                  ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function continuationCdataInside(code) {\r\n    if (code === codes.rightSquareBracket) {\r\n      effects.consume(code)\r\n      return continuationDeclarationInside\r\n    }\r\n\r\n    return continuation(code)\r\n  }\r\n\r\n  /**\r\n   * In declaration or instruction continuation, at `>`.\r\n   *\r\n   * ```markdown\r\n   * > | <!-->\r\n   *         ^\r\n   * > | <?>\r\n   *       ^\r\n   * > | <!q>\r\n   *        ^\r\n   * > | <!--ab-->\r\n   *             ^\r\n   * > | <![CDATA[>&<]]>\r\n   *                   ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function continuationDeclarationInside(code) {\r\n    if (code === codes.greaterThan) {\r\n      effects.consume(code)\r\n      return continuationClose\r\n    }\r\n\r\n    // More dashes.\r\n    if (code === codes.dash && marker === constants.htmlComment) {\r\n      effects.consume(code)\r\n      return continuationDeclarationInside\r\n    }\r\n\r\n    return continuation(code)\r\n  }\r\n\r\n  /**\r\n   * In closed continuation: everything we get until the eol/eof is part of it.\r\n   *\r\n   * ```markdown\r\n   * > | <!doctype>\r\n   *               ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function continuationClose(code) {\r\n    if (code === codes.eof || markdownLineEnding(code)) {\r\n      effects.exit(types.htmlFlowData)\r\n      return continuationAfter(code)\r\n    }\r\n\r\n    effects.consume(code)\r\n    return continuationClose\r\n  }\r\n\r\n  /**\r\n   * Done.\r\n   *\r\n   * ```markdown\r\n   * > | <!doctype>\r\n   *               ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function continuationAfter(code) {\r\n    effects.exit(types.htmlFlow)\r\n    // // Feel free to interrupt.\r\n    // tokenizer.interrupt = false\r\n    // // No longer concrete.\r\n    // tokenizer.concrete = false\r\n    return ok(code)\r\n  }\r\n}\r\n\r\n/**\r\n * @this {TokenizeContext}\r\n * @type {Tokenizer}\r\n */\r\nfunction tokenizeNonLazyContinuationStart(effects, ok, nok) {\r\n  const self = this\r\n\r\n  return start\r\n\r\n  /**\r\n   * At eol, before continuation.\r\n   *\r\n   * ```markdown\r\n   * > | * ```js\r\n   *            ^\r\n   *   | b\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function start(code) {\r\n    if (markdownLineEnding(code)) {\r\n      effects.enter(types.lineEnding)\r\n      effects.consume(code)\r\n      effects.exit(types.lineEnding)\r\n      return after\r\n    }\r\n\r\n    return nok(code)\r\n  }\r\n\r\n  /**\r\n   * A continuation.\r\n   *\r\n   * ```markdown\r\n   *   | * ```js\r\n   * > | b\r\n   *     ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function after(code) {\r\n    return self.parser.lazy[self.now().line] ? nok(code) : ok(code)\r\n  }\r\n}\r\n\r\n/**\r\n * @this {TokenizeContext}\r\n * @type {Tokenizer}\r\n */\r\nfunction tokenizeBlankLineBefore(effects, ok, nok) {\r\n  return start\r\n\r\n  /**\r\n   * Before eol, expecting blank line.\r\n   *\r\n   * ```markdown\r\n   * > | <div>\r\n   *          ^\r\n   *   |\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function start(code) {\r\n    assert(markdownLineEnding(code), 'expected a line ending')\r\n    effects.enter(types.lineEnding)\r\n    effects.consume(code)\r\n    effects.exit(types.lineEnding)\r\n    return effects.attempt(blankLine, ok, nok)\r\n  }\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}