{"ast":null,"code":"var _jsxFileName = \"E:\\\\Documents\\\\2024-1 YBIGTA\\\\Ybigta_BLOG\\\\Ybigta-Blog\\\\frontend\\\\src\\\\components\\\\page\\\\BlogListPage.jsx\",\n  _s = $RefreshSig$();\nimport React from \"react\";\nimport { useEffect, useState } from \"react\";\nimport { useNavigate, useSearchParams } from \"react-router-dom\";\nimport styled, { createGlobalStyle } from \"styled-components\";\nimport Pagination from \"react-js-pagination\";\n\n// Styled Components\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Wrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  padding: 40px;\n`;\n_c = Wrapper;\nconst TagContainer = styled.div`\n  display: flex;\n  flex-direction: row;\n  flex-wrap: wrap;\n  align-items: center;\n  justify-content: center;\n  //width: 600px;\n  gap: 7px;\n`;\n_c2 = TagContainer;\nconst CategoryContainer = styled.div`\n  display: flex;\n  flex-direction: row;\n  flex-wrap: wrap;\n  align-items: center;\n  justify-content: center;\n  //width: 600px;\n  gap: 7px;\n`;\n_c3 = CategoryContainer;\nconst Tags = styled.span`\n  padding-top: 3px;\n  padding-bottom: 3px;\n  padding-right: 8px;\n  padding-left: 8px;\n  background-color: #ebebeb;\n  text-align: center;\n  font-size: 13px;\n  justify-content: center;\n  color: #666666;\n  border-radius: 5px;\n`;\n_c4 = Tags;\nconst PaginationContainer = styled.div`\n  .pagination {\n    display: flex;\n    list-style: none;\n    padding: 0;\n  }\n\n  .pagination li {\n    margin: 0 5px;\n  }\n\n  .pagination li a {\n    text-decoration: none;\n    color: black;\n    background-color: white;\n    padding: 8px 12px;\n    border-radius: 50%; /* 둥근 모양 */\n    transition: background-color 0.3s, color 0.3s;\n  }\n\n  .pagination li a:hover {\n    background-color: #f0f0f0; /* 호버 시 배경색 변경 */\n  }\n\n  .pagination li.disabled a {\n    color: #d3d3d3;\n  }\n`;\n\n// Main Page\n_c5 = PaginationContainer;\nconst BlogListPage = () => {\n  _s();\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  // 페이지 이동\n  const navigate = useNavigate();\n  const [posts, setPosts] = useState([]);\n  const [totalItemsCount, setTotalItemsCount] = useState(0); // 총 글 수\n  // const [currentPage, setCurrentPage] = useState(1); // 현재 1페이지에서 시작\n  // const [postsPerPage, setPostsPerPage] = useState(5); // 한 페이지당 글 수\n  // const [selectedTags, setSelectedTags] = useState([]);\n  // const [selectedCategory, setSelectedCategory] = useState(\"\");\n\n  const [searchParams, setSearchParams] = useSearchParams();\n\n  // URL에서 상태를 파싱하는 로직\n  const postsPerPage = 5; // 페이지당 글 수를 고정 값으로 설정\n  const currentPage = parseInt(searchParams.get(\"page\") || \"1\", postsPerPage);\n  const selectedTags = searchParams.get(\"tags\") ? searchParams.get(\"tags\").split(\",\") : [];\n  const selectedCategory = searchParams.get(\"cat\") || \"\";\n\n  // 페이지네이션 및 필터링을 위한 데이터 로딩\n  useEffect(() => {\n    const fetchPosts = async () => {\n      try {\n        const response = await fetch(`http://localhost:8000/posts/?${searchParams}`);\n        if (!response.ok) throw new Error(\"Failed to fetch posts\");\n        const data = await response.json();\n        setPosts(data.items);\n        setTotalItemsCount(data.total);\n      } catch (error) {\n        setError(error.message);\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchPosts();\n  }, [searchParams, selectedTags, selectedCategory]);\n\n  // 날짜 정렬\n  const sortPostsByDate = posts => {\n    return posts.sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt));\n  };\n\n  // // 페이지네이션\n  // useEffect(() => {\n  //   // 필터링 조건을 URLSearchParams 객체로 만듭니다.\n  //   const params = new URLSearchParams({\n  //     page: currentPage,\n  //     per_page: postsPerPage,\n  //     tags: selectedTags.join(\",\"),\n  //     cat: selectedCategory,\n  //   }).toString();\n\n  //   // 초기 포스트 페이지 로딩\n  //   fetch(`http://localhost:8000/posts/?${params}`)\n  //     .then((response) => {\n  //       if (!response.ok) {\n  //         throw new Error(\"Failed to fetch posts\");\n  //       }\n  //       return response.json();\n  //     })\n  //     .then((data) => {\n  //       // const sortedPosts = sortPostsByDate(data.items); // 받아온 데이터를 날짜 순으로 정렬\n  //       // setPosts(sortedPosts);\n  //       setPosts(data.items)\n  //       setTotalItemsCount(data.total); // 총 포스팅 수 \n  //       setCurrentPage(currentPage); // 현재 페이지 업데이트\n  //     })\n  //     .catch((error) => {\n  //       setError(error.message);\n  //     })\n  //     .finally(() => {\n  //       setLoading(false);\n  //     });\n  // }, [currentPage, postsPerPage, selectedTags, selectedCategory]);\n\n  // 페이지 변경 핸들러\n  const handlePageChange = pageNumber => {\n    setSearchParams({\n      tags: selectedTags.join(\",\"),\n      cat: selectedCategory,\n      page: pageNumber.toString()\n    });\n  };\n\n  // 태그 다중선택 처리\n  const handleTagChange = tag => {\n    const newSelectedTags = selectedTags.includes(tag) ? selectedTags.filter(t => t !== tag) : [...selectedTags, tag];\n    setSearchParams({\n      tags: newSelectedTags.join(\",\"),\n      cat: selectedCategory,\n      page: \"1\"\n    });\n  };\n\n  // 카테고리 선택 처리\n  const handleCategoryChange = category => {\n    const isDeselecting = selectedCategory === category || category === \"ALL\";\n    setSearchParams({\n      tags: selectedTags.join(\",\"),\n      cat: isDeselecting ? \"\" : category,\n      page: \"1\"\n    });\n  };\n\n  // 필터링 초기화\n  const resetFilters = () => {\n    setSearchParams({});\n  };\n\n  // 글 제목 클릭 시 해당 글의 상세 페이지로 이동하는 함수\n  const handlePostClick = postId => {\n    navigate(`/posts/${postId}`);\n  };\n\n  // 태그 단일선택 처리 (공통사용)\n  const handleTagClick = (tag, event) => {\n    event.stopPropagation();\n    navigate(`/?tags=${tag}`);\n  };\n  const uniqueTags = [...new Set(posts.flatMap(post => post.tags))];\n  const uniqueCategories = [...new Set(posts.map(post => post.categories))];\n  if (loading) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"Loading...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 198,\n    columnNumber: 23\n  }, this);\n  if (error) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [\"Error: \", error]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 199,\n    columnNumber: 21\n  }, this);\n  return /*#__PURE__*/_jsxDEV(Wrapper, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      onClick: resetFilters,\n      style: {\n        cursor: \"pointer\"\n      },\n      children: \"\\uBE14\\uB85C\\uADF8 \\uBA54\\uC778/\\uB9AC\\uC2A4\\uD2B8 \\uD398\\uC774\\uC9C0\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 205,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TagContainer, {\n      children: uniqueTags.map((tag, tagIndex) => /*#__PURE__*/_jsxDEV(Tags, {\n        onClick: () => handleTagChange(tag),\n        style: {\n          marginRight: \"10px\",\n          cursor: \"pointer\",\n          gap: \"10px\"\n        },\n        children: [\"#\", tag, selectedTags.includes(tag) ? \" (Selected)\" : \"\"]\n      }, tagIndex, true, {\n        fileName: _jsxFileName,\n        lineNumber: 212,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 210,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CategoryContainer, {\n      children: uniqueCategories.map((category, index) => /*#__PURE__*/_jsxDEV(Tags, {\n        onClick: () => handleCategoryChange(category),\n        style: {\n          marginRight: \"10px\",\n          cursor: \"pointer\",\n          gap: \"10px\"\n        },\n        children: selectedCategory === category ? `${category} (Selected)` : category\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 226,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 224,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: filteredPosts.map((post, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          onClick: () => handlePostClick(post._id),\n          style: {\n            cursor: \"pointer\"\n          },\n          children: post.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 243,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            display: \"flex\",\n            alignItems: \"center\",\n            fontSize: \"16px\",\n            fontWeight: \"bold\",\n            color: \"gray\"\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            children: post.author\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 260,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n            src: post.profileImagePath,\n            alt: \"Author's profile\",\n            style: {\n              width: \"30px\",\n              height: \"30px\",\n              borderRadius: \"50%\"\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 261,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            style: {\n              margin: \"0 10px\",\n              fontWeight: \"bold\",\n              color: \"lightgray\"\n            },\n            children: new Date(post.createdAt).toLocaleDateString()\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 266,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 251,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n          children: post.outline\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 277,\n          columnNumber: 13\n        }, this), post.tags.map((tag, tagIndex) => /*#__PURE__*/_jsxDEV(Tags, {\n          onClick: event => handleTagClick(tag, event),\n          style: {\n            marginRight: \"10px\",\n            cursor: \"pointer\",\n            gap: \"10px\"\n          },\n          children: [\"#\", tag]\n        }, tagIndex, true, {\n          fileName: _jsxFileName,\n          lineNumber: 281,\n          columnNumber: 15\n        }, this))]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 241,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 239,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(PaginationContainer, {\n      children: /*#__PURE__*/_jsxDEV(Pagination, {\n        activePage: currentPage,\n        itemsCountPerPage: postsPerPage,\n        totalItemsCount: totalItemsCount,\n        pageRangeDisplayed: postsPerPage,\n        onChange: handlePageChange,\n        itemClass: \"page-item\",\n        linkClass: \"page-link\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 294,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 293,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 204,\n    columnNumber: 5\n  }, this);\n};\n_s(BlogListPage, \"o9p54yg2Af2x62ipkLM6cIGyRCk=\", false, function () {\n  return [useNavigate, useSearchParams];\n});\n_c6 = BlogListPage;\nexport default BlogListPage;\nvar _c, _c2, _c3, _c4, _c5, _c6;\n$RefreshReg$(_c, \"Wrapper\");\n$RefreshReg$(_c2, \"TagContainer\");\n$RefreshReg$(_c3, \"CategoryContainer\");\n$RefreshReg$(_c4, \"Tags\");\n$RefreshReg$(_c5, \"PaginationContainer\");\n$RefreshReg$(_c6, \"BlogListPage\");","map":{"version":3,"names":["React","useEffect","useState","useNavigate","useSearchParams","styled","createGlobalStyle","Pagination","jsxDEV","_jsxDEV","Wrapper","div","_c","TagContainer","_c2","CategoryContainer","_c3","Tags","span","_c4","PaginationContainer","_c5","BlogListPage","_s","loading","setLoading","error","setError","navigate","posts","setPosts","totalItemsCount","setTotalItemsCount","searchParams","setSearchParams","postsPerPage","currentPage","parseInt","get","selectedTags","split","selectedCategory","fetchPosts","response","fetch","ok","Error","data","json","items","total","message","sortPostsByDate","sort","a","b","Date","createdAt","handlePageChange","pageNumber","tags","join","cat","page","toString","handleTagChange","tag","newSelectedTags","includes","filter","t","handleCategoryChange","category","isDeselecting","resetFilters","handlePostClick","postId","handleTagClick","event","stopPropagation","uniqueTags","Set","flatMap","post","uniqueCategories","map","categories","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","style","cursor","tagIndex","marginRight","gap","index","filteredPosts","_id","title","display","alignItems","fontSize","fontWeight","color","author","src","profileImagePath","alt","width","height","borderRadius","margin","toLocaleDateString","outline","activePage","itemsCountPerPage","pageRangeDisplayed","onChange","itemClass","linkClass","_c6","$RefreshReg$"],"sources":["E:/Documents/2024-1 YBIGTA/Ybigta_BLOG/Ybigta-Blog/frontend/src/components/page/BlogListPage.jsx"],"sourcesContent":["import React from \"react\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { useNavigate, useSearchParams } from \"react-router-dom\";\r\nimport styled, { createGlobalStyle } from \"styled-components\";\r\nimport Pagination from \"react-js-pagination\"\r\n\r\n// Styled Components\r\nconst Wrapper = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  padding: 40px;\r\n`;\r\n\r\nconst TagContainer = styled.div`\r\n  display: flex;\r\n  flex-direction: row;\r\n  flex-wrap: wrap;\r\n  align-items: center;\r\n  justify-content: center;\r\n  //width: 600px;\r\n  gap: 7px;\r\n`;\r\n\r\nconst CategoryContainer = styled.div`\r\n  display: flex;\r\n  flex-direction: row;\r\n  flex-wrap: wrap;\r\n  align-items: center;\r\n  justify-content: center;\r\n  //width: 600px;\r\n  gap: 7px;\r\n`;\r\n\r\nconst Tags = styled.span`\r\n  padding-top: 3px;\r\n  padding-bottom: 3px;\r\n  padding-right: 8px;\r\n  padding-left: 8px;\r\n  background-color: #ebebeb;\r\n  text-align: center;\r\n  font-size: 13px;\r\n  justify-content: center;\r\n  color: #666666;\r\n  border-radius: 5px;\r\n`;\r\n\r\nconst PaginationContainer = styled.div`\r\n  .pagination {\r\n    display: flex;\r\n    list-style: none;\r\n    padding: 0;\r\n  }\r\n\r\n  .pagination li {\r\n    margin: 0 5px;\r\n  }\r\n\r\n  .pagination li a {\r\n    text-decoration: none;\r\n    color: black;\r\n    background-color: white;\r\n    padding: 8px 12px;\r\n    border-radius: 50%; /* 둥근 모양 */\r\n    transition: background-color 0.3s, color 0.3s;\r\n  }\r\n\r\n  .pagination li a:hover {\r\n    background-color: #f0f0f0; /* 호버 시 배경색 변경 */\r\n  }\r\n\r\n  .pagination li.disabled a {\r\n    color: #d3d3d3;\r\n  }\r\n`;\r\n\r\n\r\n// Main Page\r\nconst BlogListPage = () => {\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n  \r\n  // 페이지 이동\r\n  const navigate = useNavigate();\r\n\r\n  const [posts, setPosts] = useState([]);\r\n  const [totalItemsCount, setTotalItemsCount] = useState(0); // 총 글 수\r\n  // const [currentPage, setCurrentPage] = useState(1); // 현재 1페이지에서 시작\r\n  // const [postsPerPage, setPostsPerPage] = useState(5); // 한 페이지당 글 수\r\n  // const [selectedTags, setSelectedTags] = useState([]);\r\n  // const [selectedCategory, setSelectedCategory] = useState(\"\");\r\n\r\n  const [searchParams, setSearchParams] = useSearchParams();\r\n\r\n  // URL에서 상태를 파싱하는 로직\r\n  const postsPerPage = 5; // 페이지당 글 수를 고정 값으로 설정\r\n  const currentPage = parseInt(searchParams.get(\"page\") || \"1\", postsPerPage);\r\n  const selectedTags = searchParams.get(\"tags\") ? searchParams.get(\"tags\").split(\",\") : [];\r\n  const selectedCategory = searchParams.get(\"cat\") || \"\";\r\n      \r\n  // 페이지네이션 및 필터링을 위한 데이터 로딩\r\n  useEffect(() => {\r\n    const fetchPosts = async () => {\r\n      try {\r\n        const response = await fetch(`http://localhost:8000/posts/?${searchParams}`);\r\n        if (!response.ok) throw new Error(\"Failed to fetch posts\");\r\n        const data = await response.json();\r\n        setPosts(data.items);\r\n        setTotalItemsCount(data.total);\r\n      } catch (error) {\r\n        setError(error.message);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchPosts();\r\n  }, [searchParams, selectedTags, selectedCategory]);\r\n\r\n  // 날짜 정렬\r\n  const sortPostsByDate = (posts) => {\r\n    return posts.sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt));\r\n  };\r\n\r\n  // // 페이지네이션\r\n  // useEffect(() => {\r\n  //   // 필터링 조건을 URLSearchParams 객체로 만듭니다.\r\n  //   const params = new URLSearchParams({\r\n  //     page: currentPage,\r\n  //     per_page: postsPerPage,\r\n  //     tags: selectedTags.join(\",\"),\r\n  //     cat: selectedCategory,\r\n  //   }).toString();\r\n\r\n  //   // 초기 포스트 페이지 로딩\r\n  //   fetch(`http://localhost:8000/posts/?${params}`)\r\n  //     .then((response) => {\r\n  //       if (!response.ok) {\r\n  //         throw new Error(\"Failed to fetch posts\");\r\n  //       }\r\n  //       return response.json();\r\n  //     })\r\n  //     .then((data) => {\r\n  //       // const sortedPosts = sortPostsByDate(data.items); // 받아온 데이터를 날짜 순으로 정렬\r\n  //       // setPosts(sortedPosts);\r\n  //       setPosts(data.items)\r\n  //       setTotalItemsCount(data.total); // 총 포스팅 수 \r\n  //       setCurrentPage(currentPage); // 현재 페이지 업데이트\r\n  //     })\r\n  //     .catch((error) => {\r\n  //       setError(error.message);\r\n  //     })\r\n  //     .finally(() => {\r\n  //       setLoading(false);\r\n  //     });\r\n  // }, [currentPage, postsPerPage, selectedTags, selectedCategory]);\r\n\r\n    // 페이지 변경 핸들러\r\n    const handlePageChange = (pageNumber) => {\r\n      setSearchParams({ tags: selectedTags.join(\",\"), cat: selectedCategory, page: pageNumber.toString() });\r\n    };\r\n  \r\n    // 태그 다중선택 처리\r\n    const handleTagChange = (tag) => {\r\n      const newSelectedTags = selectedTags.includes(tag) ? selectedTags.filter(t => t !== tag) : [...selectedTags, tag];\r\n      setSearchParams({ tags: newSelectedTags.join(\",\"), cat: selectedCategory, page: \"1\" });\r\n    };\r\n  \r\n    // 카테고리 선택 처리\r\n    const handleCategoryChange = (category) => {\r\n      const isDeselecting = selectedCategory === category || category === \"ALL\";\r\n      setSearchParams({\r\n        tags: selectedTags.join(\",\"),\r\n        cat: isDeselecting ? \"\" : category,\r\n        page: \"1\"\r\n      });\r\n    };\r\n  \r\n    // 필터링 초기화\r\n    const resetFilters = () => {\r\n      setSearchParams({});\r\n    };\r\n\r\n\r\n  // 글 제목 클릭 시 해당 글의 상세 페이지로 이동하는 함수\r\n  const handlePostClick = (postId) => {\r\n    navigate(`/posts/${postId}`);\r\n  };\r\n\r\n  // 태그 단일선택 처리 (공통사용)\r\n  const handleTagClick = (tag, event) => {\r\n    event.stopPropagation();\r\n    navigate(`/?tags=${tag}`);\r\n  };\r\n\r\n  const uniqueTags = [...new Set(posts.flatMap((post) => post.tags))];\r\n  const uniqueCategories = [...new Set(posts.map((post) => post.categories))];\r\n\r\n  if (loading) return <div>Loading...</div>;\r\n  if (error) return <div>Error: {error}</div>;\r\n\r\n\r\n\r\n  return (\r\n    <Wrapper>\r\n      <h1 onClick={resetFilters} style={{ cursor: \"pointer\" }}>\r\n        블로그 메인/리스트 페이지\r\n      </h1>\r\n\r\n      {/* 태그 렌더링 - 다중 선택 */}\r\n      <TagContainer>\r\n        {uniqueTags.map((tag, tagIndex) => (\r\n          <Tags\r\n            key={tagIndex}\r\n            onClick={() => handleTagChange(tag)}\r\n            style={{ marginRight: \"10px\", cursor: \"pointer\", gap: \"10px\" }}\r\n          >\r\n            #{tag}\r\n            {selectedTags.includes(tag) ? \" (Selected)\" : \"\"}\r\n          </Tags>\r\n        ))}\r\n      </TagContainer>\r\n\r\n      {/* 카테고리 버튼 렌더링 */}\r\n      <CategoryContainer>\r\n        {uniqueCategories.map((category, index) => (\r\n          <Tags\r\n            key={index}\r\n            onClick={() => handleCategoryChange(category)}\r\n            style={{ marginRight: \"10px\", cursor: \"pointer\", gap: \"10px\" }}\r\n          >\r\n            {selectedCategory === category\r\n              ? `${category} (Selected)`\r\n              : category}\r\n          </Tags>\r\n        ))}\r\n      </CategoryContainer>\r\n\r\n      {/* 포스트 목록 렌더링 및 각종 click 이동 이벤트 */}\r\n      <div>\r\n        {filteredPosts.map((post, index) => (\r\n          <div key={index}>\r\n            {/* 제목 클릭 시 포스트로 이동 */}\r\n            <h2\r\n              onClick={() => handlePostClick(post._id)}\r\n              style={{ cursor: \"pointer\" }}\r\n            >\r\n              {post.title}\r\n            </h2>\r\n\r\n            {/* 작성자, 프사, 날짜, 아웃라인 */}\r\n            <div\r\n              style={{\r\n                display: \"flex\",\r\n                alignItems: \"center\",\r\n                fontSize: \"16px\",\r\n                fontWeight: \"bold\",\r\n                color: \"gray\",\r\n              }}\r\n            >\r\n              <span>{post.author}</span>\r\n              <img\r\n                src={post.profileImagePath}\r\n                alt=\"Author's profile\"\r\n                style={{ width: \"30px\", height: \"30px\", borderRadius: \"50%\" }}\r\n              />\r\n              <span\r\n                style={{\r\n                  margin: \"0 10px\",\r\n                  fontWeight: \"bold\",\r\n                  color: \"lightgray\",\r\n                }}\r\n              >\r\n                {new Date(post.createdAt).toLocaleDateString()}\r\n              </span>\r\n            </div>\r\n\r\n            <h4>{post.outline}</h4>\r\n\r\n            {/* 태그 및 단일 필터링 */}\r\n            {post.tags.map((tag, tagIndex) => (\r\n              <Tags\r\n                key={tagIndex}\r\n                onClick={(event) => handleTagClick(tag, event)}\r\n                style={{ marginRight: \"10px\", cursor: \"pointer\", gap: \"10px\" }}\r\n              >\r\n                #{tag}\r\n              </Tags>\r\n            ))}\r\n          </div>\r\n        ))}\r\n      </div>\r\n      {/* 페이지네이션 컨트롤 */}\r\n      <PaginationContainer>\r\n        <Pagination\r\n          activePage={currentPage}\r\n          itemsCountPerPage={postsPerPage}\r\n          totalItemsCount={totalItemsCount}\r\n          pageRangeDisplayed={postsPerPage}\r\n          onChange={handlePageChange}\r\n          itemClass=\"page-item\"\r\n          linkClass=\"page-link\"\r\n        />\r\n      </PaginationContainer>\r\n    </Wrapper>\r\n  );\r\n};\r\n\r\nexport default BlogListPage;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}