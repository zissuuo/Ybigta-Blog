{"ast":null,"code":"/**\r\n * @typedef {import('micromark-util-types').Code} Code\r\n * @typedef {import('micromark-util-types').Construct} Construct\r\n * @typedef {import('micromark-util-types').State} State\r\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\r\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\r\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding, markdownSpace } from 'micromark-util-character';\nimport { codes, constants, types } from 'micromark-util-symbol';\nimport { ok as assert } from 'devlop';\n\n/** @type {Construct} */\nexport const thematicBreak = {\n  name: 'thematicBreak',\n  tokenize: tokenizeThematicBreak\n};\n\n/**\r\n * @this {TokenizeContext}\r\n * @type {Tokenizer}\r\n */\nfunction tokenizeThematicBreak(effects, ok, nok) {\n  let size = 0;\n  /** @type {NonNullable<Code>} */\n  let marker;\n  return start;\n\n  /**\r\n   * Start of thematic break.\r\n   *\r\n   * ```markdown\r\n   * > | ***\r\n   *     ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\n  function start(code) {\n    effects.enter(types.thematicBreak);\n    // To do: parse indent like `markdown-rs`.\n    return before(code);\n  }\n\n  /**\r\n   * After optional whitespace, at marker.\r\n   *\r\n   * ```markdown\r\n   * > | ***\r\n   *     ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\n  function before(code) {\n    assert(code === codes.asterisk || code === codes.dash || code === codes.underscore, 'expected `*`, `-`, or `_`');\n    marker = code;\n    return atBreak(code);\n  }\n\n  /**\r\n   * After something, before something else.\r\n   *\r\n   * ```markdown\r\n   * > | ***\r\n   *     ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\n  function atBreak(code) {\n    if (code === marker) {\n      effects.enter(types.thematicBreakSequence);\n      return sequence(code);\n    }\n    if (size >= constants.thematicBreakMarkerCountMin && (code === codes.eof || markdownLineEnding(code))) {\n      effects.exit(types.thematicBreak);\n      return ok(code);\n    }\n    return nok(code);\n  }\n\n  /**\r\n   * In sequence.\r\n   *\r\n   * ```markdown\r\n   * > | ***\r\n   *     ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\n  function sequence(code) {\n    if (code === marker) {\n      effects.consume(code);\n      size++;\n      return sequence;\n    }\n    effects.exit(types.thematicBreakSequence);\n    return markdownSpace(code) ? factorySpace(effects, atBreak, types.whitespace)(code) : atBreak(code);\n  }\n}","map":{"version":3,"names":["factorySpace","markdownLineEnding","markdownSpace","codes","constants","types","ok","assert","thematicBreak","name","tokenize","tokenizeThematicBreak","effects","nok","size","marker","start","code","enter","before","asterisk","dash","underscore","atBreak","thematicBreakSequence","sequence","thematicBreakMarkerCountMin","eof","exit","consume","whitespace"],"sources":["E:/Documents/2024-1 YBIGTA/Ybigta_BLOG/blog_git/Ybigta-Blog/frontend/node_modules/micromark-core-commonmark/dev/lib/thematic-break.js"],"sourcesContent":["/**\r\n * @typedef {import('micromark-util-types').Code} Code\r\n * @typedef {import('micromark-util-types').Construct} Construct\r\n * @typedef {import('micromark-util-types').State} State\r\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\r\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\r\n */\r\n\r\nimport {factorySpace} from 'micromark-factory-space'\r\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\r\nimport {codes, constants, types} from 'micromark-util-symbol'\r\nimport {ok as assert} from 'devlop'\r\n\r\n/** @type {Construct} */\r\nexport const thematicBreak = {\r\n  name: 'thematicBreak',\r\n  tokenize: tokenizeThematicBreak\r\n}\r\n\r\n/**\r\n * @this {TokenizeContext}\r\n * @type {Tokenizer}\r\n */\r\nfunction tokenizeThematicBreak(effects, ok, nok) {\r\n  let size = 0\r\n  /** @type {NonNullable<Code>} */\r\n  let marker\r\n\r\n  return start\r\n\r\n  /**\r\n   * Start of thematic break.\r\n   *\r\n   * ```markdown\r\n   * > | ***\r\n   *     ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function start(code) {\r\n    effects.enter(types.thematicBreak)\r\n    // To do: parse indent like `markdown-rs`.\r\n    return before(code)\r\n  }\r\n\r\n  /**\r\n   * After optional whitespace, at marker.\r\n   *\r\n   * ```markdown\r\n   * > | ***\r\n   *     ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function before(code) {\r\n    assert(\r\n      code === codes.asterisk ||\r\n        code === codes.dash ||\r\n        code === codes.underscore,\r\n      'expected `*`, `-`, or `_`'\r\n    )\r\n    marker = code\r\n    return atBreak(code)\r\n  }\r\n\r\n  /**\r\n   * After something, before something else.\r\n   *\r\n   * ```markdown\r\n   * > | ***\r\n   *     ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function atBreak(code) {\r\n    if (code === marker) {\r\n      effects.enter(types.thematicBreakSequence)\r\n      return sequence(code)\r\n    }\r\n\r\n    if (\r\n      size >= constants.thematicBreakMarkerCountMin &&\r\n      (code === codes.eof || markdownLineEnding(code))\r\n    ) {\r\n      effects.exit(types.thematicBreak)\r\n      return ok(code)\r\n    }\r\n\r\n    return nok(code)\r\n  }\r\n\r\n  /**\r\n   * In sequence.\r\n   *\r\n   * ```markdown\r\n   * > | ***\r\n   *     ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function sequence(code) {\r\n    if (code === marker) {\r\n      effects.consume(code)\r\n      size++\r\n      return sequence\r\n    }\r\n\r\n    effects.exit(types.thematicBreakSequence)\r\n    return markdownSpace(code)\r\n      ? factorySpace(effects, atBreak, types.whitespace)(code)\r\n      : atBreak(code)\r\n  }\r\n}\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAAQA,YAAY,QAAO,yBAAyB;AACpD,SAAQC,kBAAkB,EAAEC,aAAa,QAAO,0BAA0B;AAC1E,SAAQC,KAAK,EAAEC,SAAS,EAAEC,KAAK,QAAO,uBAAuB;AAC7D,SAAQC,EAAE,IAAIC,MAAM,QAAO,QAAQ;;AAEnC;AACA,OAAO,MAAMC,aAAa,GAAG;EAC3BC,IAAI,EAAE,eAAe;EACrBC,QAAQ,EAAEC;AACZ,CAAC;;AAED;AACA;AACA;AACA;AACA,SAASA,qBAAqBA,CAACC,OAAO,EAAEN,EAAE,EAAEO,GAAG,EAAE;EAC/C,IAAIC,IAAI,GAAG,CAAC;EACZ;EACA,IAAIC,MAAM;EAEV,OAAOC,KAAK;;EAEZ;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,SAASA,KAAKA,CAACC,IAAI,EAAE;IACnBL,OAAO,CAACM,KAAK,CAACb,KAAK,CAACG,aAAa,CAAC;IAClC;IACA,OAAOW,MAAM,CAACF,IAAI,CAAC;EACrB;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,SAASE,MAAMA,CAACF,IAAI,EAAE;IACpBV,MAAM,CACJU,IAAI,KAAKd,KAAK,CAACiB,QAAQ,IACrBH,IAAI,KAAKd,KAAK,CAACkB,IAAI,IACnBJ,IAAI,KAAKd,KAAK,CAACmB,UAAU,EAC3B,2BACF,CAAC;IACDP,MAAM,GAAGE,IAAI;IACb,OAAOM,OAAO,CAACN,IAAI,CAAC;EACtB;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,SAASM,OAAOA,CAACN,IAAI,EAAE;IACrB,IAAIA,IAAI,KAAKF,MAAM,EAAE;MACnBH,OAAO,CAACM,KAAK,CAACb,KAAK,CAACmB,qBAAqB,CAAC;MAC1C,OAAOC,QAAQ,CAACR,IAAI,CAAC;IACvB;IAEA,IACEH,IAAI,IAAIV,SAAS,CAACsB,2BAA2B,KAC5CT,IAAI,KAAKd,KAAK,CAACwB,GAAG,IAAI1B,kBAAkB,CAACgB,IAAI,CAAC,CAAC,EAChD;MACAL,OAAO,CAACgB,IAAI,CAACvB,KAAK,CAACG,aAAa,CAAC;MACjC,OAAOF,EAAE,CAACW,IAAI,CAAC;IACjB;IAEA,OAAOJ,GAAG,CAACI,IAAI,CAAC;EAClB;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,SAASQ,QAAQA,CAACR,IAAI,EAAE;IACtB,IAAIA,IAAI,KAAKF,MAAM,EAAE;MACnBH,OAAO,CAACiB,OAAO,CAACZ,IAAI,CAAC;MACrBH,IAAI,EAAE;MACN,OAAOW,QAAQ;IACjB;IAEAb,OAAO,CAACgB,IAAI,CAACvB,KAAK,CAACmB,qBAAqB,CAAC;IACzC,OAAOtB,aAAa,CAACe,IAAI,CAAC,GACtBjB,YAAY,CAACY,OAAO,EAAEW,OAAO,EAAElB,KAAK,CAACyB,UAAU,CAAC,CAACb,IAAI,CAAC,GACtDM,OAAO,CAACN,IAAI,CAAC;EACnB;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}