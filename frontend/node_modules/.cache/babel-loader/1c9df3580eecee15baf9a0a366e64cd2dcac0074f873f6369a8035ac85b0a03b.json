{"ast":null,"code":"/// <reference types=\"remark-parse\" />\n/// <reference types=\"remark-stringify\" />\n\n/**\r\n * @typedef {import('mdast').Root} Root\r\n * @typedef {import('mdast-util-gfm').Options} MdastOptions\r\n * @typedef {import('micromark-extension-gfm').Options} MicromarkOptions\r\n * @typedef {import('unified').Processor<Root>} Processor\r\n */\n\n/**\r\n * @typedef {MicromarkOptions & MdastOptions} Options\r\n *   Configuration.\r\n */\n\nimport { gfmFromMarkdown, gfmToMarkdown } from 'mdast-util-gfm';\nimport { gfm } from 'micromark-extension-gfm';\n\n/** @type {Options} */\nconst emptyOptions = {};\n\n/**\r\n * Add support GFM (autolink literals, footnotes, strikethrough, tables,\r\n * tasklists).\r\n *\r\n * @param {Options | null | undefined} [options]\r\n *   Configuration (optional).\r\n * @returns {undefined}\r\n *   Nothing.\r\n */\nexport default function remarkGfm(options) {\n  // @ts-expect-error: TS is wrong about `this`.\n  // eslint-disable-next-line unicorn/no-this-assignment\n  const self = /** @type {Processor} */this;\n  const settings = options || emptyOptions;\n  const data = self.data();\n  const micromarkExtensions = data.micromarkExtensions || (data.micromarkExtensions = []);\n  const fromMarkdownExtensions = data.fromMarkdownExtensions || (data.fromMarkdownExtensions = []);\n  const toMarkdownExtensions = data.toMarkdownExtensions || (data.toMarkdownExtensions = []);\n  micromarkExtensions.push(gfm(settings));\n  fromMarkdownExtensions.push(gfmFromMarkdown());\n  toMarkdownExtensions.push(gfmToMarkdown(settings));\n}","map":{"version":3,"names":["gfmFromMarkdown","gfmToMarkdown","gfm","emptyOptions","remarkGfm","options","self","settings","data","micromarkExtensions","fromMarkdownExtensions","toMarkdownExtensions","push"],"sources":["C:/Users/rjalr/OneDrive/바탕 화면/ybigta/ybigta_blog_2/Ybigta-Blog/frontend/node_modules/remark-gfm/lib/index.js"],"sourcesContent":["/// <reference types=\"remark-parse\" />\r\n/// <reference types=\"remark-stringify\" />\r\n\r\n/**\r\n * @typedef {import('mdast').Root} Root\r\n * @typedef {import('mdast-util-gfm').Options} MdastOptions\r\n * @typedef {import('micromark-extension-gfm').Options} MicromarkOptions\r\n * @typedef {import('unified').Processor<Root>} Processor\r\n */\r\n\r\n/**\r\n * @typedef {MicromarkOptions & MdastOptions} Options\r\n *   Configuration.\r\n */\r\n\r\nimport {gfmFromMarkdown, gfmToMarkdown} from 'mdast-util-gfm'\r\nimport {gfm} from 'micromark-extension-gfm'\r\n\r\n/** @type {Options} */\r\nconst emptyOptions = {}\r\n\r\n/**\r\n * Add support GFM (autolink literals, footnotes, strikethrough, tables,\r\n * tasklists).\r\n *\r\n * @param {Options | null | undefined} [options]\r\n *   Configuration (optional).\r\n * @returns {undefined}\r\n *   Nothing.\r\n */\r\nexport default function remarkGfm(options) {\r\n  // @ts-expect-error: TS is wrong about `this`.\r\n  // eslint-disable-next-line unicorn/no-this-assignment\r\n  const self = /** @type {Processor} */ (this)\r\n  const settings = options || emptyOptions\r\n  const data = self.data()\r\n\r\n  const micromarkExtensions =\r\n    data.micromarkExtensions || (data.micromarkExtensions = [])\r\n  const fromMarkdownExtensions =\r\n    data.fromMarkdownExtensions || (data.fromMarkdownExtensions = [])\r\n  const toMarkdownExtensions =\r\n    data.toMarkdownExtensions || (data.toMarkdownExtensions = [])\r\n\r\n  micromarkExtensions.push(gfm(settings))\r\n  fromMarkdownExtensions.push(gfmFromMarkdown())\r\n  toMarkdownExtensions.push(gfmToMarkdown(settings))\r\n}\r\n"],"mappings":"AAAA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,SAAQA,eAAe,EAAEC,aAAa,QAAO,gBAAgB;AAC7D,SAAQC,GAAG,QAAO,yBAAyB;;AAE3C;AACA,MAAMC,YAAY,GAAG,CAAC,CAAC;;AAEvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,SAASC,SAASA,CAACC,OAAO,EAAE;EACzC;EACA;EACA,MAAMC,IAAI,GAAG,wBAA0B,IAAK;EAC5C,MAAMC,QAAQ,GAAGF,OAAO,IAAIF,YAAY;EACxC,MAAMK,IAAI,GAAGF,IAAI,CAACE,IAAI,CAAC,CAAC;EAExB,MAAMC,mBAAmB,GACvBD,IAAI,CAACC,mBAAmB,KAAKD,IAAI,CAACC,mBAAmB,GAAG,EAAE,CAAC;EAC7D,MAAMC,sBAAsB,GAC1BF,IAAI,CAACE,sBAAsB,KAAKF,IAAI,CAACE,sBAAsB,GAAG,EAAE,CAAC;EACnE,MAAMC,oBAAoB,GACxBH,IAAI,CAACG,oBAAoB,KAAKH,IAAI,CAACG,oBAAoB,GAAG,EAAE,CAAC;EAE/DF,mBAAmB,CAACG,IAAI,CAACV,GAAG,CAACK,QAAQ,CAAC,CAAC;EACvCG,sBAAsB,CAACE,IAAI,CAACZ,eAAe,CAAC,CAAC,CAAC;EAC9CW,oBAAoB,CAACC,IAAI,CAACX,aAAa,CAACM,QAAQ,CAAC,CAAC;AACpD","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}