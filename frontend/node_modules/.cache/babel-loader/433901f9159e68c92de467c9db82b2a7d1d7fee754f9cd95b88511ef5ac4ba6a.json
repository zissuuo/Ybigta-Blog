{"ast":null,"code":"/**\r\n * @typedef {import('micromark-util-types').Extension} Extension\r\n * @typedef {import('micromark-util-types').State} State\r\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\r\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\r\n */\n\nimport { ok as assert } from 'devlop';\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding, markdownLineEndingOrSpace, markdownSpace } from 'micromark-util-character';\nimport { codes, types } from 'micromark-util-symbol';\nconst tasklistCheck = {\n  tokenize: tokenizeTasklistCheck\n};\n\n/**\r\n * Create an HTML extension for `micromark` to support GFM task list items\r\n * syntax.\r\n *\r\n * @returns {Extension}\r\n *   Extension for `micromark` that can be passed in `htmlExtensions` to\r\n *   support GFM task list items when serializing to HTML.\r\n */\nexport function gfmTaskListItem() {\n  return {\n    text: {\n      [codes.leftSquareBracket]: tasklistCheck\n    }\n  };\n}\n\n/**\r\n * @this {TokenizeContext}\r\n * @type {Tokenizer}\r\n */\nfunction tokenizeTasklistCheck(effects, ok, nok) {\n  const self = this;\n  return open;\n\n  /**\r\n   * At start of task list item check.\r\n   *\r\n   * ```markdown\r\n   * > | * [x] y.\r\n   *       ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\n  function open(code) {\n    assert(code === codes.leftSquareBracket, 'expected `[`');\n    if (\n    // Exit if there’s stuff before.\n    self.previous !== codes.eof ||\n    // Exit if not in the first content that is the first child of a list\n    // item.\n    !self._gfmTasklistFirstContentOfListItem) {\n      return nok(code);\n    }\n    effects.enter('taskListCheck');\n    effects.enter('taskListCheckMarker');\n    effects.consume(code);\n    effects.exit('taskListCheckMarker');\n    return inside;\n  }\n\n  /**\r\n   * In task list item check.\r\n   *\r\n   * ```markdown\r\n   * > | * [x] y.\r\n   *        ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\n  function inside(code) {\n    // Currently we match how GH works in files.\n    // To match how GH works in comments, use `markdownSpace` (`[\\t ]`) instead\n    // of `markdownLineEndingOrSpace` (`[\\t\\n\\r ]`).\n    if (markdownLineEndingOrSpace(code)) {\n      effects.enter('taskListCheckValueUnchecked');\n      effects.consume(code);\n      effects.exit('taskListCheckValueUnchecked');\n      return close;\n    }\n    if (code === codes.uppercaseX || code === codes.lowercaseX) {\n      effects.enter('taskListCheckValueChecked');\n      effects.consume(code);\n      effects.exit('taskListCheckValueChecked');\n      return close;\n    }\n    return nok(code);\n  }\n\n  /**\r\n   * At close of task list item check.\r\n   *\r\n   * ```markdown\r\n   * > | * [x] y.\r\n   *         ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\n  function close(code) {\n    if (code === codes.rightSquareBracket) {\n      effects.enter('taskListCheckMarker');\n      effects.consume(code);\n      effects.exit('taskListCheckMarker');\n      effects.exit('taskListCheck');\n      return after;\n    }\n    return nok(code);\n  }\n\n  /**\r\n   * @type {State}\r\n   */\n  function after(code) {\n    // EOL in paragraph means there must be something else after it.\n    if (markdownLineEnding(code)) {\n      return ok(code);\n    }\n\n    // Space or tab?\n    // Check what comes after.\n    if (markdownSpace(code)) {\n      return effects.check({\n        tokenize: spaceThenNonSpace\n      }, ok, nok)(code);\n    }\n\n    // EOF, or non-whitespace, both wrong.\n    return nok(code);\n  }\n}\n\n/**\r\n * @this {TokenizeContext}\r\n * @type {Tokenizer}\r\n */\nfunction spaceThenNonSpace(effects, ok, nok) {\n  return factorySpace(effects, after, types.whitespace);\n\n  /**\r\n   * After whitespace, after task list item check.\r\n   *\r\n   * ```markdown\r\n   * > | * [x] y.\r\n   *           ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\n  function after(code) {\n    // EOF means there was nothing, so bad.\n    // EOL means there’s content after it, so good.\n    // Impossible to have more spaces.\n    // Anything else is good.\n    return code === codes.eof ? nok(code) : ok(code);\n  }\n}","map":{"version":3,"names":["ok","assert","factorySpace","markdownLineEnding","markdownLineEndingOrSpace","markdownSpace","codes","types","tasklistCheck","tokenize","tokenizeTasklistCheck","gfmTaskListItem","text","leftSquareBracket","effects","nok","self","open","code","previous","eof","_gfmTasklistFirstContentOfListItem","enter","consume","exit","inside","close","uppercaseX","lowercaseX","rightSquareBracket","after","check","spaceThenNonSpace","whitespace"],"sources":["C:/Users/rjalr/OneDrive/바탕 화면/ybigta/ybigta_blog_2/Ybigta-Blog/frontend/node_modules/micromark-extension-gfm-task-list-item/dev/lib/syntax.js"],"sourcesContent":["/**\r\n * @typedef {import('micromark-util-types').Extension} Extension\r\n * @typedef {import('micromark-util-types').State} State\r\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\r\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\r\n */\r\n\r\nimport {ok as assert} from 'devlop'\r\nimport {factorySpace} from 'micromark-factory-space'\r\nimport {\r\n  markdownLineEnding,\r\n  markdownLineEndingOrSpace,\r\n  markdownSpace\r\n} from 'micromark-util-character'\r\nimport {codes, types} from 'micromark-util-symbol'\r\n\r\nconst tasklistCheck = {tokenize: tokenizeTasklistCheck}\r\n\r\n/**\r\n * Create an HTML extension for `micromark` to support GFM task list items\r\n * syntax.\r\n *\r\n * @returns {Extension}\r\n *   Extension for `micromark` that can be passed in `htmlExtensions` to\r\n *   support GFM task list items when serializing to HTML.\r\n */\r\nexport function gfmTaskListItem() {\r\n  return {\r\n    text: {[codes.leftSquareBracket]: tasklistCheck}\r\n  }\r\n}\r\n\r\n/**\r\n * @this {TokenizeContext}\r\n * @type {Tokenizer}\r\n */\r\nfunction tokenizeTasklistCheck(effects, ok, nok) {\r\n  const self = this\r\n\r\n  return open\r\n\r\n  /**\r\n   * At start of task list item check.\r\n   *\r\n   * ```markdown\r\n   * > | * [x] y.\r\n   *       ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function open(code) {\r\n    assert(code === codes.leftSquareBracket, 'expected `[`')\r\n\r\n    if (\r\n      // Exit if there’s stuff before.\r\n      self.previous !== codes.eof ||\r\n      // Exit if not in the first content that is the first child of a list\r\n      // item.\r\n      !self._gfmTasklistFirstContentOfListItem\r\n    ) {\r\n      return nok(code)\r\n    }\r\n\r\n    effects.enter('taskListCheck')\r\n    effects.enter('taskListCheckMarker')\r\n    effects.consume(code)\r\n    effects.exit('taskListCheckMarker')\r\n    return inside\r\n  }\r\n\r\n  /**\r\n   * In task list item check.\r\n   *\r\n   * ```markdown\r\n   * > | * [x] y.\r\n   *        ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function inside(code) {\r\n    // Currently we match how GH works in files.\r\n    // To match how GH works in comments, use `markdownSpace` (`[\\t ]`) instead\r\n    // of `markdownLineEndingOrSpace` (`[\\t\\n\\r ]`).\r\n    if (markdownLineEndingOrSpace(code)) {\r\n      effects.enter('taskListCheckValueUnchecked')\r\n      effects.consume(code)\r\n      effects.exit('taskListCheckValueUnchecked')\r\n      return close\r\n    }\r\n\r\n    if (code === codes.uppercaseX || code === codes.lowercaseX) {\r\n      effects.enter('taskListCheckValueChecked')\r\n      effects.consume(code)\r\n      effects.exit('taskListCheckValueChecked')\r\n      return close\r\n    }\r\n\r\n    return nok(code)\r\n  }\r\n\r\n  /**\r\n   * At close of task list item check.\r\n   *\r\n   * ```markdown\r\n   * > | * [x] y.\r\n   *         ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function close(code) {\r\n    if (code === codes.rightSquareBracket) {\r\n      effects.enter('taskListCheckMarker')\r\n      effects.consume(code)\r\n      effects.exit('taskListCheckMarker')\r\n      effects.exit('taskListCheck')\r\n      return after\r\n    }\r\n\r\n    return nok(code)\r\n  }\r\n\r\n  /**\r\n   * @type {State}\r\n   */\r\n  function after(code) {\r\n    // EOL in paragraph means there must be something else after it.\r\n    if (markdownLineEnding(code)) {\r\n      return ok(code)\r\n    }\r\n\r\n    // Space or tab?\r\n    // Check what comes after.\r\n    if (markdownSpace(code)) {\r\n      return effects.check({tokenize: spaceThenNonSpace}, ok, nok)(code)\r\n    }\r\n\r\n    // EOF, or non-whitespace, both wrong.\r\n    return nok(code)\r\n  }\r\n}\r\n\r\n/**\r\n * @this {TokenizeContext}\r\n * @type {Tokenizer}\r\n */\r\nfunction spaceThenNonSpace(effects, ok, nok) {\r\n  return factorySpace(effects, after, types.whitespace)\r\n\r\n  /**\r\n   * After whitespace, after task list item check.\r\n   *\r\n   * ```markdown\r\n   * > | * [x] y.\r\n   *           ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function after(code) {\r\n    // EOF means there was nothing, so bad.\r\n    // EOL means there’s content after it, so good.\r\n    // Impossible to have more spaces.\r\n    // Anything else is good.\r\n    return code === codes.eof ? nok(code) : ok(code)\r\n  }\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}