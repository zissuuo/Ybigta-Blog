{"ast":null,"code":"/**\r\n * @typedef {import('hast').Element} Element\r\n * @typedef {import('hast').ElementContent} ElementContent\r\n * @typedef {import('hast').Properties} Properties\r\n * @typedef {import('mdast').Parents} Parents\r\n * @typedef {import('mdast').TableRow} TableRow\r\n * @typedef {import('../state.js').State} State\r\n */\n\n// Make VS Code show references to the above types.\n'';\n\n/**\r\n * Turn an mdast `tableRow` node into hast.\r\n *\r\n * @param {State} state\r\n *   Info passed around.\r\n * @param {TableRow} node\r\n *   mdast node.\r\n * @param {Parents | undefined} parent\r\n *   Parent of `node`.\r\n * @returns {Element}\r\n *   hast node.\r\n */\nexport function tableRow(state, node, parent) {\n  const siblings = parent ? parent.children : undefined;\n  // Generate a body row when without parent.\n  const rowIndex = siblings ? siblings.indexOf(node) : 1;\n  const tagName = rowIndex === 0 ? 'th' : 'td';\n  // To do: option to use `style`?\n  const align = parent && parent.type === 'table' ? parent.align : undefined;\n  const length = align ? align.length : node.children.length;\n  let cellIndex = -1;\n  /** @type {Array<ElementContent>} */\n  const cells = [];\n  while (++cellIndex < length) {\n    // Note: can also be undefined.\n    const cell = node.children[cellIndex];\n    /** @type {Properties} */\n    const properties = {};\n    const alignValue = align ? align[cellIndex] : undefined;\n    if (alignValue) {\n      properties.align = alignValue;\n    }\n\n    /** @type {Element} */\n    let result = {\n      type: 'element',\n      tagName,\n      properties,\n      children: []\n    };\n    if (cell) {\n      result.children = state.all(cell);\n      state.patch(cell, result);\n      result = state.applyData(cell, result);\n    }\n    cells.push(result);\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'tr',\n    properties: {},\n    children: state.wrap(cells, true)\n  };\n  state.patch(node, result);\n  return state.applyData(node, result);\n}","map":{"version":3,"names":["tableRow","state","node","parent","siblings","children","undefined","rowIndex","indexOf","tagName","align","type","length","cellIndex","cells","cell","properties","alignValue","result","all","patch","applyData","push","wrap"],"sources":["C:/Users/rjalr/OneDrive/바탕 화면/ybigta/ybigta_blog_2/Ybigta-Blog/frontend/node_modules/mdast-util-to-hast/lib/handlers/table-row.js"],"sourcesContent":["/**\r\n * @typedef {import('hast').Element} Element\r\n * @typedef {import('hast').ElementContent} ElementContent\r\n * @typedef {import('hast').Properties} Properties\r\n * @typedef {import('mdast').Parents} Parents\r\n * @typedef {import('mdast').TableRow} TableRow\r\n * @typedef {import('../state.js').State} State\r\n */\r\n\r\n// Make VS Code show references to the above types.\r\n''\r\n\r\n/**\r\n * Turn an mdast `tableRow` node into hast.\r\n *\r\n * @param {State} state\r\n *   Info passed around.\r\n * @param {TableRow} node\r\n *   mdast node.\r\n * @param {Parents | undefined} parent\r\n *   Parent of `node`.\r\n * @returns {Element}\r\n *   hast node.\r\n */\r\nexport function tableRow(state, node, parent) {\r\n  const siblings = parent ? parent.children : undefined\r\n  // Generate a body row when without parent.\r\n  const rowIndex = siblings ? siblings.indexOf(node) : 1\r\n  const tagName = rowIndex === 0 ? 'th' : 'td'\r\n  // To do: option to use `style`?\r\n  const align = parent && parent.type === 'table' ? parent.align : undefined\r\n  const length = align ? align.length : node.children.length\r\n  let cellIndex = -1\r\n  /** @type {Array<ElementContent>} */\r\n  const cells = []\r\n\r\n  while (++cellIndex < length) {\r\n    // Note: can also be undefined.\r\n    const cell = node.children[cellIndex]\r\n    /** @type {Properties} */\r\n    const properties = {}\r\n    const alignValue = align ? align[cellIndex] : undefined\r\n\r\n    if (alignValue) {\r\n      properties.align = alignValue\r\n    }\r\n\r\n    /** @type {Element} */\r\n    let result = {type: 'element', tagName, properties, children: []}\r\n\r\n    if (cell) {\r\n      result.children = state.all(cell)\r\n      state.patch(cell, result)\r\n      result = state.applyData(cell, result)\r\n    }\r\n\r\n    cells.push(result)\r\n  }\r\n\r\n  /** @type {Element} */\r\n  const result = {\r\n    type: 'element',\r\n    tagName: 'tr',\r\n    properties: {},\r\n    children: state.wrap(cells, true)\r\n  }\r\n  state.patch(node, result)\r\n  return state.applyData(node, result)\r\n}\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,EAAE;;AAEF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASA,QAAQA,CAACC,KAAK,EAAEC,IAAI,EAAEC,MAAM,EAAE;EAC5C,MAAMC,QAAQ,GAAGD,MAAM,GAAGA,MAAM,CAACE,QAAQ,GAAGC,SAAS;EACrD;EACA,MAAMC,QAAQ,GAAGH,QAAQ,GAAGA,QAAQ,CAACI,OAAO,CAACN,IAAI,CAAC,GAAG,CAAC;EACtD,MAAMO,OAAO,GAAGF,QAAQ,KAAK,CAAC,GAAG,IAAI,GAAG,IAAI;EAC5C;EACA,MAAMG,KAAK,GAAGP,MAAM,IAAIA,MAAM,CAACQ,IAAI,KAAK,OAAO,GAAGR,MAAM,CAACO,KAAK,GAAGJ,SAAS;EAC1E,MAAMM,MAAM,GAAGF,KAAK,GAAGA,KAAK,CAACE,MAAM,GAAGV,IAAI,CAACG,QAAQ,CAACO,MAAM;EAC1D,IAAIC,SAAS,GAAG,CAAC,CAAC;EAClB;EACA,MAAMC,KAAK,GAAG,EAAE;EAEhB,OAAO,EAAED,SAAS,GAAGD,MAAM,EAAE;IAC3B;IACA,MAAMG,IAAI,GAAGb,IAAI,CAACG,QAAQ,CAACQ,SAAS,CAAC;IACrC;IACA,MAAMG,UAAU,GAAG,CAAC,CAAC;IACrB,MAAMC,UAAU,GAAGP,KAAK,GAAGA,KAAK,CAACG,SAAS,CAAC,GAAGP,SAAS;IAEvD,IAAIW,UAAU,EAAE;MACdD,UAAU,CAACN,KAAK,GAAGO,UAAU;IAC/B;;IAEA;IACA,IAAIC,MAAM,GAAG;MAACP,IAAI,EAAE,SAAS;MAAEF,OAAO;MAAEO,UAAU;MAAEX,QAAQ,EAAE;IAAE,CAAC;IAEjE,IAAIU,IAAI,EAAE;MACRG,MAAM,CAACb,QAAQ,GAAGJ,KAAK,CAACkB,GAAG,CAACJ,IAAI,CAAC;MACjCd,KAAK,CAACmB,KAAK,CAACL,IAAI,EAAEG,MAAM,CAAC;MACzBA,MAAM,GAAGjB,KAAK,CAACoB,SAAS,CAACN,IAAI,EAAEG,MAAM,CAAC;IACxC;IAEAJ,KAAK,CAACQ,IAAI,CAACJ,MAAM,CAAC;EACpB;;EAEA;EACA,MAAMA,MAAM,GAAG;IACbP,IAAI,EAAE,SAAS;IACfF,OAAO,EAAE,IAAI;IACbO,UAAU,EAAE,CAAC,CAAC;IACdX,QAAQ,EAAEJ,KAAK,CAACsB,IAAI,CAACT,KAAK,EAAE,IAAI;EAClC,CAAC;EACDb,KAAK,CAACmB,KAAK,CAAClB,IAAI,EAAEgB,MAAM,CAAC;EACzB,OAAOjB,KAAK,CAACoB,SAAS,CAACnB,IAAI,EAAEgB,MAAM,CAAC;AACtC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}