{"ast":null,"code":"/**\r\n * @typedef {import('micromark-extension-gfm-footnote').HtmlOptions} HtmlOptions\r\n * @typedef {import('micromark-extension-gfm-strikethrough').Options} Options\r\n * @typedef {import('micromark-util-types').Extension} Extension\r\n * @typedef {import('micromark-util-types').HtmlExtension} HtmlExtension\r\n */\n\nimport { combineExtensions, combineHtmlExtensions } from 'micromark-util-combine-extensions';\nimport { gfmAutolinkLiteral, gfmAutolinkLiteralHtml } from 'micromark-extension-gfm-autolink-literal';\nimport { gfmFootnote, gfmFootnoteHtml } from 'micromark-extension-gfm-footnote';\nimport { gfmStrikethrough, gfmStrikethroughHtml } from 'micromark-extension-gfm-strikethrough';\nimport { gfmTable, gfmTableHtml } from 'micromark-extension-gfm-table';\nimport { gfmTagfilterHtml } from 'micromark-extension-gfm-tagfilter';\nimport { gfmTaskListItem, gfmTaskListItemHtml } from 'micromark-extension-gfm-task-list-item';\n\n/**\r\n * Create an extension for `micromark` to enable GFM syntax.\r\n *\r\n * @param {Options | null | undefined} [options]\r\n *   Configuration (optional).\r\n *\r\n *   Passed to `micromark-extens-gfm-strikethrough`.\r\n * @returns {Extension}\r\n *   Extension for `micromark` that can be passed in `extensions` to enable GFM\r\n *   syntax.\r\n */\nexport function gfm(options) {\n  return combineExtensions([gfmAutolinkLiteral(), gfmFootnote(), gfmStrikethrough(options), gfmTable(), gfmTaskListItem()]);\n}\n\n/**\r\n * Create an extension for `micromark` to support GFM when serializing to HTML.\r\n *\r\n * @param {HtmlOptions | null | undefined} [options]\r\n *   Configuration (optional).\r\n *\r\n *   Passed to `micromark-extens-gfm-footnote`.\r\n * @returns {HtmlExtension}\r\n *   Extension for `micromark` that can be passed in `htmlExtensions` to\r\n *   support GFM when serializing to HTML.\r\n */\nexport function gfmHtml(options) {\n  return combineHtmlExtensions([gfmAutolinkLiteralHtml(), gfmFootnoteHtml(options), gfmStrikethroughHtml(), gfmTableHtml(), gfmTagfilterHtml(), gfmTaskListItemHtml()]);\n}","map":{"version":3,"names":["combineExtensions","combineHtmlExtensions","gfmAutolinkLiteral","gfmAutolinkLiteralHtml","gfmFootnote","gfmFootnoteHtml","gfmStrikethrough","gfmStrikethroughHtml","gfmTable","gfmTableHtml","gfmTagfilterHtml","gfmTaskListItem","gfmTaskListItemHtml","gfm","options","gfmHtml"],"sources":["E:/Documents/2024-1 YBIGTA/Ybigta_BLOG/blog_git/Ybigta-Blog/frontend/node_modules/micromark-extension-gfm/index.js"],"sourcesContent":["/**\r\n * @typedef {import('micromark-extension-gfm-footnote').HtmlOptions} HtmlOptions\r\n * @typedef {import('micromark-extension-gfm-strikethrough').Options} Options\r\n * @typedef {import('micromark-util-types').Extension} Extension\r\n * @typedef {import('micromark-util-types').HtmlExtension} HtmlExtension\r\n */\r\n\r\nimport {\r\n  combineExtensions,\r\n  combineHtmlExtensions\r\n} from 'micromark-util-combine-extensions'\r\nimport {\r\n  gfmAutolinkLiteral,\r\n  gfmAutolinkLiteralHtml\r\n} from 'micromark-extension-gfm-autolink-literal'\r\nimport {gfmFootnote, gfmFootnoteHtml} from 'micromark-extension-gfm-footnote'\r\nimport {\r\n  gfmStrikethrough,\r\n  gfmStrikethroughHtml\r\n} from 'micromark-extension-gfm-strikethrough'\r\nimport {gfmTable, gfmTableHtml} from 'micromark-extension-gfm-table'\r\nimport {gfmTagfilterHtml} from 'micromark-extension-gfm-tagfilter'\r\nimport {\r\n  gfmTaskListItem,\r\n  gfmTaskListItemHtml\r\n} from 'micromark-extension-gfm-task-list-item'\r\n\r\n/**\r\n * Create an extension for `micromark` to enable GFM syntax.\r\n *\r\n * @param {Options | null | undefined} [options]\r\n *   Configuration (optional).\r\n *\r\n *   Passed to `micromark-extens-gfm-strikethrough`.\r\n * @returns {Extension}\r\n *   Extension for `micromark` that can be passed in `extensions` to enable GFM\r\n *   syntax.\r\n */\r\nexport function gfm(options) {\r\n  return combineExtensions([\r\n    gfmAutolinkLiteral(),\r\n    gfmFootnote(),\r\n    gfmStrikethrough(options),\r\n    gfmTable(),\r\n    gfmTaskListItem()\r\n  ])\r\n}\r\n\r\n/**\r\n * Create an extension for `micromark` to support GFM when serializing to HTML.\r\n *\r\n * @param {HtmlOptions | null | undefined} [options]\r\n *   Configuration (optional).\r\n *\r\n *   Passed to `micromark-extens-gfm-footnote`.\r\n * @returns {HtmlExtension}\r\n *   Extension for `micromark` that can be passed in `htmlExtensions` to\r\n *   support GFM when serializing to HTML.\r\n */\r\nexport function gfmHtml(options) {\r\n  return combineHtmlExtensions([\r\n    gfmAutolinkLiteralHtml(),\r\n    gfmFootnoteHtml(options),\r\n    gfmStrikethroughHtml(),\r\n    gfmTableHtml(),\r\n    gfmTagfilterHtml(),\r\n    gfmTaskListItemHtml()\r\n  ])\r\n}\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;;AAEA,SACEA,iBAAiB,EACjBC,qBAAqB,QAChB,mCAAmC;AAC1C,SACEC,kBAAkB,EAClBC,sBAAsB,QACjB,0CAA0C;AACjD,SAAQC,WAAW,EAAEC,eAAe,QAAO,kCAAkC;AAC7E,SACEC,gBAAgB,EAChBC,oBAAoB,QACf,uCAAuC;AAC9C,SAAQC,QAAQ,EAAEC,YAAY,QAAO,+BAA+B;AACpE,SAAQC,gBAAgB,QAAO,mCAAmC;AAClE,SACEC,eAAe,EACfC,mBAAmB,QACd,wCAAwC;;AAE/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,GAAGA,CAACC,OAAO,EAAE;EAC3B,OAAOd,iBAAiB,CAAC,CACvBE,kBAAkB,CAAC,CAAC,EACpBE,WAAW,CAAC,CAAC,EACbE,gBAAgB,CAACQ,OAAO,CAAC,EACzBN,QAAQ,CAAC,CAAC,EACVG,eAAe,CAAC,CAAC,CAClB,CAAC;AACJ;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASI,OAAOA,CAACD,OAAO,EAAE;EAC/B,OAAOb,qBAAqB,CAAC,CAC3BE,sBAAsB,CAAC,CAAC,EACxBE,eAAe,CAACS,OAAO,CAAC,EACxBP,oBAAoB,CAAC,CAAC,EACtBE,YAAY,CAAC,CAAC,EACdC,gBAAgB,CAAC,CAAC,EAClBE,mBAAmB,CAAC,CAAC,CACtB,CAAC;AACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}