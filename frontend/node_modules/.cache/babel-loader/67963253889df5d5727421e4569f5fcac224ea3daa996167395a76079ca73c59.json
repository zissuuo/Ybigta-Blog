{"ast":null,"code":"/**\r\n * @typedef {import('mdast').Code} Code\r\n * @typedef {import('mdast').Parents} Parents\r\n * @typedef {import('../types.js').Info} Info\r\n * @typedef {import('../types.js').Map} Map\r\n * @typedef {import('../types.js').State} State\r\n */\n\nimport { longestStreak } from 'longest-streak';\nimport { formatCodeAsIndented } from '../util/format-code-as-indented.js';\nimport { checkFence } from '../util/check-fence.js';\n\n/**\r\n * @param {Code} node\r\n * @param {Parents | undefined} _\r\n * @param {State} state\r\n * @param {Info} info\r\n * @returns {string}\r\n */\nexport function code(node, _, state, info) {\n  const marker = checkFence(state);\n  const raw = node.value || '';\n  const suffix = marker === '`' ? 'GraveAccent' : 'Tilde';\n  if (formatCodeAsIndented(node, state)) {\n    const exit = state.enter('codeIndented');\n    const value = state.indentLines(raw, map);\n    exit();\n    return value;\n  }\n  const tracker = state.createTracker(info);\n  const sequence = marker.repeat(Math.max(longestStreak(raw, marker) + 1, 3));\n  const exit = state.enter('codeFenced');\n  let value = tracker.move(sequence);\n  if (node.lang) {\n    const subexit = state.enter(`codeFencedLang${suffix}`);\n    value += tracker.move(state.safe(node.lang, {\n      before: value,\n      after: ' ',\n      encode: ['`'],\n      ...tracker.current()\n    }));\n    subexit();\n  }\n  if (node.lang && node.meta) {\n    const subexit = state.enter(`codeFencedMeta${suffix}`);\n    value += tracker.move(' ');\n    value += tracker.move(state.safe(node.meta, {\n      before: value,\n      after: '\\n',\n      encode: ['`'],\n      ...tracker.current()\n    }));\n    subexit();\n  }\n  value += tracker.move('\\n');\n  if (raw) {\n    value += tracker.move(raw + '\\n');\n  }\n  value += tracker.move(sequence);\n  exit();\n  return value;\n}\n\n/** @type {Map} */\nfunction map(line, _, blank) {\n  return (blank ? '' : '    ') + line;\n}","map":{"version":3,"names":["longestStreak","formatCodeAsIndented","checkFence","code","node","_","state","info","marker","raw","value","suffix","exit","enter","indentLines","map","tracker","createTracker","sequence","repeat","Math","max","move","lang","subexit","safe","before","after","encode","current","meta","line","blank"],"sources":["E:/Documents/2024-1 YBIGTA/Ybigta_BLOG/blog_git/Ybigta-Blog/frontend/node_modules/mdast-util-to-markdown/lib/handle/code.js"],"sourcesContent":["/**\r\n * @typedef {import('mdast').Code} Code\r\n * @typedef {import('mdast').Parents} Parents\r\n * @typedef {import('../types.js').Info} Info\r\n * @typedef {import('../types.js').Map} Map\r\n * @typedef {import('../types.js').State} State\r\n */\r\n\r\nimport {longestStreak} from 'longest-streak'\r\nimport {formatCodeAsIndented} from '../util/format-code-as-indented.js'\r\nimport {checkFence} from '../util/check-fence.js'\r\n\r\n/**\r\n * @param {Code} node\r\n * @param {Parents | undefined} _\r\n * @param {State} state\r\n * @param {Info} info\r\n * @returns {string}\r\n */\r\nexport function code(node, _, state, info) {\r\n  const marker = checkFence(state)\r\n  const raw = node.value || ''\r\n  const suffix = marker === '`' ? 'GraveAccent' : 'Tilde'\r\n\r\n  if (formatCodeAsIndented(node, state)) {\r\n    const exit = state.enter('codeIndented')\r\n    const value = state.indentLines(raw, map)\r\n    exit()\r\n    return value\r\n  }\r\n\r\n  const tracker = state.createTracker(info)\r\n  const sequence = marker.repeat(Math.max(longestStreak(raw, marker) + 1, 3))\r\n  const exit = state.enter('codeFenced')\r\n  let value = tracker.move(sequence)\r\n\r\n  if (node.lang) {\r\n    const subexit = state.enter(`codeFencedLang${suffix}`)\r\n    value += tracker.move(\r\n      state.safe(node.lang, {\r\n        before: value,\r\n        after: ' ',\r\n        encode: ['`'],\r\n        ...tracker.current()\r\n      })\r\n    )\r\n    subexit()\r\n  }\r\n\r\n  if (node.lang && node.meta) {\r\n    const subexit = state.enter(`codeFencedMeta${suffix}`)\r\n    value += tracker.move(' ')\r\n    value += tracker.move(\r\n      state.safe(node.meta, {\r\n        before: value,\r\n        after: '\\n',\r\n        encode: ['`'],\r\n        ...tracker.current()\r\n      })\r\n    )\r\n    subexit()\r\n  }\r\n\r\n  value += tracker.move('\\n')\r\n\r\n  if (raw) {\r\n    value += tracker.move(raw + '\\n')\r\n  }\r\n\r\n  value += tracker.move(sequence)\r\n  exit()\r\n  return value\r\n}\r\n\r\n/** @type {Map} */\r\nfunction map(line, _, blank) {\r\n  return (blank ? '' : '    ') + line\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}