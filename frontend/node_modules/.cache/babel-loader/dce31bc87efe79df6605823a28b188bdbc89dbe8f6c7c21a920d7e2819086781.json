{"ast":null,"code":"'use strict';\n\nmodule.exports = jsTemplates;\njsTemplates.displayName = 'jsTemplates';\njsTemplates.aliases = [];\nfunction jsTemplates(Prism) {\n  ;\n  (function (Prism) {\n    var templateString = Prism.languages.javascript['template-string']; // see the pattern in prism-javascript.js\n    var templateLiteralPattern = templateString.pattern.source;\n    var interpolationObject = templateString.inside['interpolation'];\n    var interpolationPunctuationObject = interpolationObject.inside['interpolation-punctuation'];\n    var interpolationPattern = interpolationObject.pattern.source;\n    /**\r\n     * Creates a new pattern to match a template string with a special tag.\r\n     *\r\n     * This will return `undefined` if there is no grammar with the given language id.\r\n     *\r\n     * @param {string} language The language id of the embedded language. E.g. `markdown`.\r\n     * @param {string} tag The regex pattern to match the tag.\r\n     * @returns {object | undefined}\r\n     * @example\r\n     * createTemplate('css', /\\bcss/.source);\r\n     */\n    function createTemplate(language, tag) {\n      if (!Prism.languages[language]) {\n        return undefined;\n      }\n      return {\n        pattern: RegExp('((?:' + tag + ')\\\\s*)' + templateLiteralPattern),\n        lookbehind: true,\n        greedy: true,\n        inside: {\n          'template-punctuation': {\n            pattern: /^`|`$/,\n            alias: 'string'\n          },\n          'embedded-code': {\n            pattern: /[\\s\\S]+/,\n            alias: language\n          }\n        }\n      };\n    }\n    Prism.languages.javascript['template-string'] = [\n    // styled-jsx:\n    //   css`a { color: #25F; }`\n    // styled-components:\n    //   styled.h1`color: red;`\n    createTemplate('css', /\\b(?:styled(?:\\([^)]*\\))?(?:\\s*\\.\\s*\\w+(?:\\([^)]*\\))*)*|css(?:\\s*\\.\\s*(?:global|resolve))?|createGlobalStyle|keyframes)/.source),\n    // html`<p></p>`\n    // div.innerHTML = `<p></p>`\n    createTemplate('html', /\\bhtml|\\.\\s*(?:inner|outer)HTML\\s*\\+?=/.source),\n    // svg`<path fill=\"#fff\" d=\"M55.37 ...\"/>`\n    createTemplate('svg', /\\bsvg/.source),\n    // md`# h1`, markdown`## h2`\n    createTemplate('markdown', /\\b(?:markdown|md)/.source),\n    // gql`...`, graphql`...`, graphql.experimental`...`\n    createTemplate('graphql', /\\b(?:gql|graphql(?:\\s*\\.\\s*experimental)?)/.source),\n    // sql`...`\n    createTemplate('sql', /\\bsql/.source),\n    // vanilla template string\n    templateString].filter(Boolean);\n    /**\r\n     * Returns a specific placeholder literal for the given language.\r\n     *\r\n     * @param {number} counter\r\n     * @param {string} language\r\n     * @returns {string}\r\n     */\n    function getPlaceholder(counter, language) {\n      return '___' + language.toUpperCase() + '_' + counter + '___';\n    }\n    /**\r\n     * Returns the tokens of `Prism.tokenize` but also runs the `before-tokenize` and `after-tokenize` hooks.\r\n     *\r\n     * @param {string} code\r\n     * @param {any} grammar\r\n     * @param {string} language\r\n     * @returns {(string|Token)[]}\r\n     */\n    function tokenizeWithHooks(code, grammar, language) {\n      var env = {\n        code: code,\n        grammar: grammar,\n        language: language\n      };\n      Prism.hooks.run('before-tokenize', env);\n      env.tokens = Prism.tokenize(env.code, env.grammar);\n      Prism.hooks.run('after-tokenize', env);\n      return env.tokens;\n    }\n    /**\r\n     * Returns the token of the given JavaScript interpolation expression.\r\n     *\r\n     * @param {string} expression The code of the expression. E.g. `\"${42}\"`\r\n     * @returns {Token}\r\n     */\n    function tokenizeInterpolationExpression(expression) {\n      var tempGrammar = {};\n      tempGrammar['interpolation-punctuation'] = interpolationPunctuationObject;\n      /** @type {Array} */\n      var tokens = Prism.tokenize(expression, tempGrammar);\n      if (tokens.length === 3) {\n        /**\r\n         * The token array will look like this\r\n         * [\r\n         *     [\"interpolation-punctuation\", \"${\"]\r\n         *     \"...\" // JavaScript expression of the interpolation\r\n         *     [\"interpolation-punctuation\", \"}\"]\r\n         * ]\r\n         */\n        var args = [1, 1];\n        args.push.apply(args, tokenizeWithHooks(tokens[1], Prism.languages.javascript, 'javascript'));\n        tokens.splice.apply(tokens, args);\n      }\n      return new Prism.Token('interpolation', tokens, interpolationObject.alias, expression);\n    }\n    /**\r\n     * Tokenizes the given code with support for JavaScript interpolation expressions mixed in.\r\n     *\r\n     * This function has 3 phases:\r\n     *\r\n     * 1. Replace all JavaScript interpolation expression with a placeholder.\r\n     *    The placeholder will have the syntax of a identify of the target language.\r\n     * 2. Tokenize the code with placeholders.\r\n     * 3. Tokenize the interpolation expressions and re-insert them into the tokenize code.\r\n     *    The insertion only works if a placeholder hasn't been \"ripped apart\" meaning that the placeholder has been\r\n     *    tokenized as two tokens by the grammar of the embedded language.\r\n     *\r\n     * @param {string} code\r\n     * @param {object} grammar\r\n     * @param {string} language\r\n     * @returns {Token}\r\n     */\n    function tokenizeEmbedded(code, grammar, language) {\n      // 1. First filter out all interpolations\n      // because they might be escaped, we need a lookbehind, so we use Prism\n      /** @type {(Token|string)[]} */\n      var _tokens = Prism.tokenize(code, {\n        interpolation: {\n          pattern: RegExp(interpolationPattern),\n          lookbehind: true\n        }\n      }); // replace all interpolations with a placeholder which is not in the code already\n      var placeholderCounter = 0;\n      /** @type {Object<string, string>} */\n      var placeholderMap = {};\n      var embeddedCode = _tokens.map(function (token) {\n        if (typeof token === 'string') {\n          return token;\n        } else {\n          var interpolationExpression = token.content;\n          var placeholder;\n          while (code.indexOf(placeholder = getPlaceholder(placeholderCounter++, language)) !== -1) {\n            /* noop */\n          }\n          placeholderMap[placeholder] = interpolationExpression;\n          return placeholder;\n        }\n      }).join(''); // 2. Tokenize the embedded code\n      var embeddedTokens = tokenizeWithHooks(embeddedCode, grammar, language); // 3. Re-insert the interpolation\n      var placeholders = Object.keys(placeholderMap);\n      placeholderCounter = 0;\n      /**\r\n       *\r\n       * @param {(Token|string)[]} tokens\r\n       * @returns {void}\r\n       */\n      function walkTokens(tokens) {\n        for (var i = 0; i < tokens.length; i++) {\n          if (placeholderCounter >= placeholders.length) {\n            return;\n          }\n          var token = tokens[i];\n          if (typeof token === 'string' || typeof token.content === 'string') {\n            var placeholder = placeholders[placeholderCounter];\n            var s = typeof token === 'string' ? token : /** @type {string} */\n            token.content;\n            var index = s.indexOf(placeholder);\n            if (index !== -1) {\n              ++placeholderCounter;\n              var before = s.substring(0, index);\n              var middle = tokenizeInterpolationExpression(placeholderMap[placeholder]);\n              var after = s.substring(index + placeholder.length);\n              var replacement = [];\n              if (before) {\n                replacement.push(before);\n              }\n              replacement.push(middle);\n              if (after) {\n                var afterTokens = [after];\n                walkTokens(afterTokens);\n                replacement.push.apply(replacement, afterTokens);\n              }\n              if (typeof token === 'string') {\n                tokens.splice.apply(tokens, [i, 1].concat(replacement));\n                i += replacement.length - 1;\n              } else {\n                token.content = replacement;\n              }\n            }\n          } else {\n            var content = token.content;\n            if (Array.isArray(content)) {\n              walkTokens(content);\n            } else {\n              walkTokens([content]);\n            }\n          }\n        }\n      }\n      walkTokens(embeddedTokens);\n      return new Prism.Token(language, embeddedTokens, 'language-' + language, code);\n    }\n    /**\r\n     * The languages for which JS templating will handle tagged template literals.\r\n     *\r\n     * JS templating isn't active for only JavaScript but also related languages like TypeScript, JSX, and TSX.\r\n     */\n    var supportedLanguages = {\n      javascript: true,\n      js: true,\n      typescript: true,\n      ts: true,\n      jsx: true,\n      tsx: true\n    };\n    Prism.hooks.add('after-tokenize', function (env) {\n      if (!(env.language in supportedLanguages)) {\n        return;\n      }\n      /**\r\n       * Finds and tokenizes all template strings with an embedded languages.\r\n       *\r\n       * @param {(Token | string)[]} tokens\r\n       * @returns {void}\r\n       */\n      function findTemplateStrings(tokens) {\n        for (var i = 0, l = tokens.length; i < l; i++) {\n          var token = tokens[i];\n          if (typeof token === 'string') {\n            continue;\n          }\n          var content = token.content;\n          if (!Array.isArray(content)) {\n            if (typeof content !== 'string') {\n              findTemplateStrings([content]);\n            }\n            continue;\n          }\n          if (token.type === 'template-string') {\n            /**\r\n             * A JavaScript template-string token will look like this:\r\n             *\r\n             * [\"template-string\", [\r\n             *     [\"template-punctuation\", \"`\"],\r\n             *     (\r\n             *         An array of \"string\" and \"interpolation\" tokens. This is the simple string case.\r\n             *         or\r\n             *         [\"embedded-code\", \"...\"] This is the token containing the embedded code.\r\n             *                                  It also has an alias which is the language of the embedded code.\r\n             *     ),\r\n             *     [\"template-punctuation\", \"`\"]\r\n             * ]]\r\n             */\n            var embedded = content[1];\n            if (content.length === 3 && typeof embedded !== 'string' && embedded.type === 'embedded-code') {\n              // get string content\n              var code = stringContent(embedded);\n              var alias = embedded.alias;\n              var language = Array.isArray(alias) ? alias[0] : alias;\n              var grammar = Prism.languages[language];\n              if (!grammar) {\n                // the embedded language isn't registered.\n                continue;\n              }\n              content[1] = tokenizeEmbedded(code, grammar, language);\n            }\n          } else {\n            findTemplateStrings(content);\n          }\n        }\n      }\n      findTemplateStrings(env.tokens);\n    });\n    /**\r\n     * Returns the string content of a token or token stream.\r\n     *\r\n     * @param {string | Token | (string | Token)[]} value\r\n     * @returns {string}\r\n     */\n    function stringContent(value) {\n      if (typeof value === 'string') {\n        return value;\n      } else if (Array.isArray(value)) {\n        return value.map(stringContent).join('');\n      } else {\n        return stringContent(value.content);\n      }\n    }\n  })(Prism);\n}","map":{"version":3,"names":["module","exports","jsTemplates","displayName","aliases","Prism","templateString","languages","javascript","templateLiteralPattern","pattern","source","interpolationObject","inside","interpolationPunctuationObject","interpolationPattern","createTemplate","language","tag","undefined","RegExp","lookbehind","greedy","alias","filter","Boolean","getPlaceholder","counter","toUpperCase","tokenizeWithHooks","code","grammar","env","hooks","run","tokens","tokenize","tokenizeInterpolationExpression","expression","tempGrammar","length","args","push","apply","splice","Token","tokenizeEmbedded","_tokens","interpolation","placeholderCounter","placeholderMap","embeddedCode","map","token","interpolationExpression","content","placeholder","indexOf","join","embeddedTokens","placeholders","Object","keys","walkTokens","i","s","index","before","substring","middle","after","replacement","afterTokens","concat","Array","isArray","supportedLanguages","js","typescript","ts","jsx","tsx","add","findTemplateStrings","l","type","embedded","stringContent","value"],"sources":["E:/Documents/2024-1 YBIGTA/Ybigta_BLOG/Ybigta-Blog/frontend/node_modules/refractor/lang/js-templates.js"],"sourcesContent":["'use strict'\r\n\r\nmodule.exports = jsTemplates\r\njsTemplates.displayName = 'jsTemplates'\r\njsTemplates.aliases = []\r\nfunction jsTemplates(Prism) {\r\n  ;(function (Prism) {\r\n    var templateString = Prism.languages.javascript['template-string'] // see the pattern in prism-javascript.js\r\n    var templateLiteralPattern = templateString.pattern.source\r\n    var interpolationObject = templateString.inside['interpolation']\r\n    var interpolationPunctuationObject =\r\n      interpolationObject.inside['interpolation-punctuation']\r\n    var interpolationPattern = interpolationObject.pattern.source\r\n    /**\r\n     * Creates a new pattern to match a template string with a special tag.\r\n     *\r\n     * This will return `undefined` if there is no grammar with the given language id.\r\n     *\r\n     * @param {string} language The language id of the embedded language. E.g. `markdown`.\r\n     * @param {string} tag The regex pattern to match the tag.\r\n     * @returns {object | undefined}\r\n     * @example\r\n     * createTemplate('css', /\\bcss/.source);\r\n     */\r\n    function createTemplate(language, tag) {\r\n      if (!Prism.languages[language]) {\r\n        return undefined\r\n      }\r\n      return {\r\n        pattern: RegExp('((?:' + tag + ')\\\\s*)' + templateLiteralPattern),\r\n        lookbehind: true,\r\n        greedy: true,\r\n        inside: {\r\n          'template-punctuation': {\r\n            pattern: /^`|`$/,\r\n            alias: 'string'\r\n          },\r\n          'embedded-code': {\r\n            pattern: /[\\s\\S]+/,\r\n            alias: language\r\n          }\r\n        }\r\n      }\r\n    }\r\n    Prism.languages.javascript['template-string'] = [\r\n      // styled-jsx:\r\n      //   css`a { color: #25F; }`\r\n      // styled-components:\r\n      //   styled.h1`color: red;`\r\n      createTemplate(\r\n        'css',\r\n        /\\b(?:styled(?:\\([^)]*\\))?(?:\\s*\\.\\s*\\w+(?:\\([^)]*\\))*)*|css(?:\\s*\\.\\s*(?:global|resolve))?|createGlobalStyle|keyframes)/\r\n          .source\r\n      ), // html`<p></p>`\r\n      // div.innerHTML = `<p></p>`\r\n      createTemplate('html', /\\bhtml|\\.\\s*(?:inner|outer)HTML\\s*\\+?=/.source), // svg`<path fill=\"#fff\" d=\"M55.37 ...\"/>`\r\n      createTemplate('svg', /\\bsvg/.source), // md`# h1`, markdown`## h2`\r\n      createTemplate('markdown', /\\b(?:markdown|md)/.source), // gql`...`, graphql`...`, graphql.experimental`...`\r\n      createTemplate(\r\n        'graphql',\r\n        /\\b(?:gql|graphql(?:\\s*\\.\\s*experimental)?)/.source\r\n      ), // sql`...`\r\n      createTemplate('sql', /\\bsql/.source), // vanilla template string\r\n      templateString\r\n    ].filter(Boolean)\r\n    /**\r\n     * Returns a specific placeholder literal for the given language.\r\n     *\r\n     * @param {number} counter\r\n     * @param {string} language\r\n     * @returns {string}\r\n     */\r\n    function getPlaceholder(counter, language) {\r\n      return '___' + language.toUpperCase() + '_' + counter + '___'\r\n    }\r\n    /**\r\n     * Returns the tokens of `Prism.tokenize` but also runs the `before-tokenize` and `after-tokenize` hooks.\r\n     *\r\n     * @param {string} code\r\n     * @param {any} grammar\r\n     * @param {string} language\r\n     * @returns {(string|Token)[]}\r\n     */\r\n    function tokenizeWithHooks(code, grammar, language) {\r\n      var env = {\r\n        code: code,\r\n        grammar: grammar,\r\n        language: language\r\n      }\r\n      Prism.hooks.run('before-tokenize', env)\r\n      env.tokens = Prism.tokenize(env.code, env.grammar)\r\n      Prism.hooks.run('after-tokenize', env)\r\n      return env.tokens\r\n    }\r\n    /**\r\n     * Returns the token of the given JavaScript interpolation expression.\r\n     *\r\n     * @param {string} expression The code of the expression. E.g. `\"${42}\"`\r\n     * @returns {Token}\r\n     */\r\n    function tokenizeInterpolationExpression(expression) {\r\n      var tempGrammar = {}\r\n      tempGrammar['interpolation-punctuation'] = interpolationPunctuationObject\r\n      /** @type {Array} */\r\n      var tokens = Prism.tokenize(expression, tempGrammar)\r\n      if (tokens.length === 3) {\r\n        /**\r\n         * The token array will look like this\r\n         * [\r\n         *     [\"interpolation-punctuation\", \"${\"]\r\n         *     \"...\" // JavaScript expression of the interpolation\r\n         *     [\"interpolation-punctuation\", \"}\"]\r\n         * ]\r\n         */\r\n        var args = [1, 1]\r\n        args.push.apply(\r\n          args,\r\n          tokenizeWithHooks(tokens[1], Prism.languages.javascript, 'javascript')\r\n        )\r\n        tokens.splice.apply(tokens, args)\r\n      }\r\n      return new Prism.Token(\r\n        'interpolation',\r\n        tokens,\r\n        interpolationObject.alias,\r\n        expression\r\n      )\r\n    }\r\n    /**\r\n     * Tokenizes the given code with support for JavaScript interpolation expressions mixed in.\r\n     *\r\n     * This function has 3 phases:\r\n     *\r\n     * 1. Replace all JavaScript interpolation expression with a placeholder.\r\n     *    The placeholder will have the syntax of a identify of the target language.\r\n     * 2. Tokenize the code with placeholders.\r\n     * 3. Tokenize the interpolation expressions and re-insert them into the tokenize code.\r\n     *    The insertion only works if a placeholder hasn't been \"ripped apart\" meaning that the placeholder has been\r\n     *    tokenized as two tokens by the grammar of the embedded language.\r\n     *\r\n     * @param {string} code\r\n     * @param {object} grammar\r\n     * @param {string} language\r\n     * @returns {Token}\r\n     */\r\n    function tokenizeEmbedded(code, grammar, language) {\r\n      // 1. First filter out all interpolations\r\n      // because they might be escaped, we need a lookbehind, so we use Prism\r\n      /** @type {(Token|string)[]} */\r\n      var _tokens = Prism.tokenize(code, {\r\n        interpolation: {\r\n          pattern: RegExp(interpolationPattern),\r\n          lookbehind: true\r\n        }\r\n      }) // replace all interpolations with a placeholder which is not in the code already\r\n      var placeholderCounter = 0\r\n      /** @type {Object<string, string>} */\r\n      var placeholderMap = {}\r\n      var embeddedCode = _tokens\r\n        .map(function (token) {\r\n          if (typeof token === 'string') {\r\n            return token\r\n          } else {\r\n            var interpolationExpression = token.content\r\n            var placeholder\r\n            while (\r\n              code.indexOf(\r\n                (placeholder = getPlaceholder(placeholderCounter++, language))\r\n              ) !== -1\r\n            ) {\r\n              /* noop */\r\n            }\r\n            placeholderMap[placeholder] = interpolationExpression\r\n            return placeholder\r\n          }\r\n        })\r\n        .join('') // 2. Tokenize the embedded code\r\n      var embeddedTokens = tokenizeWithHooks(embeddedCode, grammar, language) // 3. Re-insert the interpolation\r\n      var placeholders = Object.keys(placeholderMap)\r\n      placeholderCounter = 0\r\n      /**\r\n       *\r\n       * @param {(Token|string)[]} tokens\r\n       * @returns {void}\r\n       */\r\n      function walkTokens(tokens) {\r\n        for (var i = 0; i < tokens.length; i++) {\r\n          if (placeholderCounter >= placeholders.length) {\r\n            return\r\n          }\r\n          var token = tokens[i]\r\n          if (typeof token === 'string' || typeof token.content === 'string') {\r\n            var placeholder = placeholders[placeholderCounter]\r\n            var s =\r\n              typeof token === 'string'\r\n                ? token\r\n                : /** @type {string} */\r\n                  token.content\r\n            var index = s.indexOf(placeholder)\r\n            if (index !== -1) {\r\n              ++placeholderCounter\r\n              var before = s.substring(0, index)\r\n              var middle = tokenizeInterpolationExpression(\r\n                placeholderMap[placeholder]\r\n              )\r\n              var after = s.substring(index + placeholder.length)\r\n              var replacement = []\r\n              if (before) {\r\n                replacement.push(before)\r\n              }\r\n              replacement.push(middle)\r\n              if (after) {\r\n                var afterTokens = [after]\r\n                walkTokens(afterTokens)\r\n                replacement.push.apply(replacement, afterTokens)\r\n              }\r\n              if (typeof token === 'string') {\r\n                tokens.splice.apply(tokens, [i, 1].concat(replacement))\r\n                i += replacement.length - 1\r\n              } else {\r\n                token.content = replacement\r\n              }\r\n            }\r\n          } else {\r\n            var content = token.content\r\n            if (Array.isArray(content)) {\r\n              walkTokens(content)\r\n            } else {\r\n              walkTokens([content])\r\n            }\r\n          }\r\n        }\r\n      }\r\n      walkTokens(embeddedTokens)\r\n      return new Prism.Token(\r\n        language,\r\n        embeddedTokens,\r\n        'language-' + language,\r\n        code\r\n      )\r\n    }\r\n    /**\r\n     * The languages for which JS templating will handle tagged template literals.\r\n     *\r\n     * JS templating isn't active for only JavaScript but also related languages like TypeScript, JSX, and TSX.\r\n     */\r\n    var supportedLanguages = {\r\n      javascript: true,\r\n      js: true,\r\n      typescript: true,\r\n      ts: true,\r\n      jsx: true,\r\n      tsx: true\r\n    }\r\n    Prism.hooks.add('after-tokenize', function (env) {\r\n      if (!(env.language in supportedLanguages)) {\r\n        return\r\n      }\r\n      /**\r\n       * Finds and tokenizes all template strings with an embedded languages.\r\n       *\r\n       * @param {(Token | string)[]} tokens\r\n       * @returns {void}\r\n       */\r\n      function findTemplateStrings(tokens) {\r\n        for (var i = 0, l = tokens.length; i < l; i++) {\r\n          var token = tokens[i]\r\n          if (typeof token === 'string') {\r\n            continue\r\n          }\r\n          var content = token.content\r\n          if (!Array.isArray(content)) {\r\n            if (typeof content !== 'string') {\r\n              findTemplateStrings([content])\r\n            }\r\n            continue\r\n          }\r\n          if (token.type === 'template-string') {\r\n            /**\r\n             * A JavaScript template-string token will look like this:\r\n             *\r\n             * [\"template-string\", [\r\n             *     [\"template-punctuation\", \"`\"],\r\n             *     (\r\n             *         An array of \"string\" and \"interpolation\" tokens. This is the simple string case.\r\n             *         or\r\n             *         [\"embedded-code\", \"...\"] This is the token containing the embedded code.\r\n             *                                  It also has an alias which is the language of the embedded code.\r\n             *     ),\r\n             *     [\"template-punctuation\", \"`\"]\r\n             * ]]\r\n             */\r\n            var embedded = content[1]\r\n            if (\r\n              content.length === 3 &&\r\n              typeof embedded !== 'string' &&\r\n              embedded.type === 'embedded-code'\r\n            ) {\r\n              // get string content\r\n              var code = stringContent(embedded)\r\n              var alias = embedded.alias\r\n              var language = Array.isArray(alias) ? alias[0] : alias\r\n              var grammar = Prism.languages[language]\r\n              if (!grammar) {\r\n                // the embedded language isn't registered.\r\n                continue\r\n              }\r\n              content[1] = tokenizeEmbedded(code, grammar, language)\r\n            }\r\n          } else {\r\n            findTemplateStrings(content)\r\n          }\r\n        }\r\n      }\r\n      findTemplateStrings(env.tokens)\r\n    })\r\n    /**\r\n     * Returns the string content of a token or token stream.\r\n     *\r\n     * @param {string | Token | (string | Token)[]} value\r\n     * @returns {string}\r\n     */\r\n    function stringContent(value) {\r\n      if (typeof value === 'string') {\r\n        return value\r\n      } else if (Array.isArray(value)) {\r\n        return value.map(stringContent).join('')\r\n      } else {\r\n        return stringContent(value.content)\r\n      }\r\n    }\r\n  })(Prism)\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}