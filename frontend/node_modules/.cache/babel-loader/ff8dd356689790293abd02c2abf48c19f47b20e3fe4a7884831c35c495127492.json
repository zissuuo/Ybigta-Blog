{"ast":null,"code":"var _jsxFileName = \"E:\\\\Documents\\\\2024-1 YBIGTA\\\\Ybigta_BLOG\\\\Ybigta-Blog\\\\frontend\\\\src\\\\components\\\\page\\\\BlogListPage.jsx\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport { useEffect, useState } from 'react';\nimport { useNavigate, useSearchParams } from 'react-router-dom';\nimport styled, { createGlobalStyle } from 'styled-components';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Wrapper = styled.div`\n    display: flex;\n    flex-direction: column;\n    padding: 40px;\n`;\n_c = Wrapper;\nconst TagContainer = styled.div`\n    display: flex;\n    flex-direction: row;\n    flex-wrap: wrap;\n    align-items: center;\n    justify-content: center;\n    //width: 600px;\n    gap: 7px;\n`;\n_c2 = TagContainer;\nconst CategoryContainer = styled.div`\n    display: flex;\n    flex-direction: row;\n    flex-wrap: wrap;\n    align-items: center;\n    justify-content: center;\n    //width: 600px;\n    gap: 7px;\n`;\n_c3 = CategoryContainer;\nconst Tags = styled.span`\n    padding-top: 3px;\n    padding-bottom: 3px;\n    padding-right: 8px;\n    padding-left: 8px;\n    background-color: #EBEBEB;\n    text-align: center;\n    font-size: 13px;\n    justify-content: center;\n    color: #666666;\n    border-radius: 5px;\n\n    transition: background-color 0.3s; // 색깔 변화 애니메이션\n`;\n\n// 마우스 오버 시 스타일\n_c4 = Tags;\nconst TagHover = {\n  ...Tags,\n  backgroundColor: \"#d6d6d6\" // 마우스 오버시 배경색\n};\n\n// 선택된 상태의 스타일\nconst TagSelected = {\n  ...Tags,\n  backgroundColor: \"#4CAF50\" // 선택된 상태의 배경색\n};\n\n// 태그 및 카테고리 렌더링 시 선택 상태에 따라 스타일 적용\nconst renderTag = (tag, isSelected, handleClick) => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    onClick: handleClick,\n    style: isSelected ? selectedTagStyle : tagStyle,\n    children: tag\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 5\n  }, this);\n};\nconst BlogListPage = () => {\n  _s();\n  // 로딩 및 에러 표시 \n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  // 서버로부터 받은 포스트들을 저장할 상태\n  const [posts, setPosts] = useState([]);\n\n  // 선택된 태그 및 카테고리 정의 -전체 태그, 카테고리는 동적 추출 사용\n  const [selectedTags, setSelectedTags] = useState([]);\n  const [selectedCategory, setSelectedCategory] = useState('');\n  const [searchParams, setSearchParams] = useSearchParams();\n\n  // 페이지 이동\n  const navigate = useNavigate();\n\n  // 초기 포스트 페이지 로딩\n  useEffect(() => {\n    fetch('http://localhost:8000/posts/').then(response => {\n      if (!response.ok) {\n        throw new Error('Failed to fetch posts');\n      }\n      return response.json();\n    }).then(data => {\n      setPosts(data);\n    }).catch(error => {\n      setError(error.message);\n    }).finally(() => {\n      setLoading(false);\n    });\n  }, []);\n\n  // URL 쿼리 파라미터 값 변화에 따라 바로 렌더링하기\n  useEffect(() => {\n    // URL에서 tags와 cat 쿼리 파라미터 값 읽어오기\n    const tagsFromURL = searchParams.get('tags');\n    const categoryFromURL = searchParams.get('cat');\n\n    // 쿼리 파라미터가 없는 경우 빈 배열 또는 빈 문자열로 초기화\n    const tagsArray = tagsFromURL ? tagsFromURL.split('&') : [];\n    const category = categoryFromURL ? categoryFromURL : '';\n\n    // 컴포넌트 상태를 URL의 쿼리 파라미터에 맞게 업데이트\n    setSelectedTags(tagsArray);\n    setSelectedCategory(category);\n  }, [searchParams]); // searchParams 변화 감지\n\n  // 태그 선택 처리 함수\n  const handleTagChange = tag => {\n    const newSelectedTags = selectedTags.includes(tag) ? selectedTags.filter(t => t !== tag) : [...selectedTags, tag];\n    setSelectedTags(newSelectedTags);\n    setSearchParams({\n      tags: newSelectedTags.join('&'),\n      cat: selectedCategory\n    });\n  };\n\n  // 카테고리 선택 처리 함수\n  const handleCategoryChange = category => {\n    setSelectedCategory(category === 'ALL' ? '' : category);\n    setSearchParams({\n      tags: selectedTags.join('&'),\n      cat: category === 'ALL' ? '' : category\n    });\n  };\n\n  // 글 제목 클릭 시 해당 글의 상세 페이지로 이동하는 함수\n  const handlePostClick = postId => {\n    navigate(`/posts/${postId}`);\n  };\n\n  // // 태그 클릭 시 URL 업데이트\n  // const handleTagChange = tag => {\n  //     const newSelectedTags = selectedTags.includes(tag) ? selectedTags.filter(t => t !== tag) : [...selectedTags, tag];\n  //     setSelectedTags(newSelectedTags);\n  //     updateURL(newSelectedTags, selectedCategory);\n  // };\n\n  // // 카테고리 클릭 시 URL 업데이트\n  // const handleCategoryChange = category => {\n  //     setSelectedCategory(category === 'ALL' ? '' : category);\n  //     updateURL(selectedTags, category === 'ALL' ? '' : category);\n  // };\n\n  // // URL 업데이트\n  // const updateURL = (tags, category) => {\n  //     const tagsQuery = tags.join('&');\n  //     setSearchParams({ tags: tagsQuery, cat: category });\n  // };\n\n  // posts Data 필터링\n  const filteredPosts = posts.filter(post => {\n    const hasSelectedTags = selectedTags.length === 0 || selectedTags.every(tag => post.tags.includes(tag));\n    const hasSelectedCategory = !selectedCategory || post.categories.includes(selectedCategory);\n    return hasSelectedTags && hasSelectedCategory;\n  });\n\n  // const allTags = posts.reduce((acc, post) => [...acc, ...post.tags], []);\n  // const uniqueTags = [...new Set(allTags)];\n\n  const uniqueTags = [...new Set(posts.flatMap(post => post.tags))];\n  const uniqueCategories = [...new Set(posts.map(post => post.categories))];\n  if (loading) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"Loading...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 177,\n    columnNumber: 25\n  }, this);\n  if (error) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [\"Error: \", error]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 178,\n    columnNumber: 23\n  }, this);\n  return /*#__PURE__*/_jsxDEV(Wrapper, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"\\uBE14\\uB85C\\uADF8 \\uBA54\\uC778/\\uB9AC\\uC2A4\\uD2B8 \\uD398\\uC774\\uC9C0\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(TagContainer, {\n      children: uniqueTags.map((tag, tagIndex) => /*#__PURE__*/_jsxDEV(Tags, {\n        onClick: () => handleTagChange(tag),\n        style: {\n          marginRight: \"10px\",\n          cursor: 'pointer',\n          gap: \"10px\"\n        },\n        children: [\"#\", tag, selectedTags.includes(tag) ? ' (Selected)' : '']\n      }, tagIndex, true, {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 17\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(CategoryContainer, {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: uniqueCategories.map((category, index) => /*#__PURE__*/_jsxDEV(Tags, {\n          onClick: () => handleCategoryChange(category),\n          style: {\n            margin: \"10px\",\n            cursor: 'pointer'\n          },\n          children: selectedCategory === category ? `<Selected> ${category}` : category\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 197,\n          columnNumber: 17\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 195,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 194,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: filteredPosts.map((post, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        onClick: () => handlePostClick(post._id),\n        style: {\n          cursor: 'pointer'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: post.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 208,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n          children: post.outline\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 209,\n          columnNumber: 17\n        }, this), post.tags.map((tag, tagIndex) => /*#__PURE__*/_jsxDEV(Tags, {\n          style: {\n            marginRight: \"10px\",\n            cursor: 'pointer',\n            gap: \"10px\"\n          },\n          children: [\"#\", tag]\n        }, tagIndex, true, {\n          fileName: _jsxFileName,\n          lineNumber: 211,\n          columnNumber: 21\n        }, this))]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 207,\n        columnNumber: 17\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 205,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 181,\n    columnNumber: 9\n  }, this);\n};\n_s(BlogListPage, \"wuezmHMDAES01any9KF9eLk3xPc=\", false, function () {\n  return [useSearchParams, useNavigate];\n});\n_c5 = BlogListPage;\nexport default BlogListPage;\nvar _c, _c2, _c3, _c4, _c5;\n$RefreshReg$(_c, \"Wrapper\");\n$RefreshReg$(_c2, \"TagContainer\");\n$RefreshReg$(_c3, \"CategoryContainer\");\n$RefreshReg$(_c4, \"Tags\");\n$RefreshReg$(_c5, \"BlogListPage\");","map":{"version":3,"names":["React","useEffect","useState","useNavigate","useSearchParams","styled","createGlobalStyle","jsxDEV","_jsxDEV","Wrapper","div","_c","TagContainer","_c2","CategoryContainer","_c3","Tags","span","_c4","TagHover","backgroundColor","TagSelected","renderTag","tag","isSelected","handleClick","onClick","style","selectedTagStyle","tagStyle","children","fileName","_jsxFileName","lineNumber","columnNumber","BlogListPage","_s","loading","setLoading","error","setError","posts","setPosts","selectedTags","setSelectedTags","selectedCategory","setSelectedCategory","searchParams","setSearchParams","navigate","fetch","then","response","ok","Error","json","data","catch","message","finally","tagsFromURL","get","categoryFromURL","tagsArray","split","category","handleTagChange","newSelectedTags","includes","filter","t","tags","join","cat","handleCategoryChange","handlePostClick","postId","filteredPosts","post","hasSelectedTags","length","every","hasSelectedCategory","categories","uniqueTags","Set","flatMap","uniqueCategories","map","tagIndex","marginRight","cursor","gap","index","margin","_id","title","outline","_c5","$RefreshReg$"],"sources":["E:/Documents/2024-1 YBIGTA/Ybigta_BLOG/Ybigta-Blog/frontend/src/components/page/BlogListPage.jsx"],"sourcesContent":["import React from 'react';\r\nimport { useEffect, useState } from 'react';\r\nimport { useNavigate, useSearchParams } from 'react-router-dom';\r\nimport styled, { createGlobalStyle } from 'styled-components';\r\n\r\n\r\nconst Wrapper = styled.div`\r\n    display: flex;\r\n    flex-direction: column;\r\n    padding: 40px;\r\n`;\r\n\r\nconst TagContainer = styled.div`\r\n    display: flex;\r\n    flex-direction: row;\r\n    flex-wrap: wrap;\r\n    align-items: center;\r\n    justify-content: center;\r\n    //width: 600px;\r\n    gap: 7px;\r\n`;\r\n\r\nconst CategoryContainer = styled.div`\r\n    display: flex;\r\n    flex-direction: row;\r\n    flex-wrap: wrap;\r\n    align-items: center;\r\n    justify-content: center;\r\n    //width: 600px;\r\n    gap: 7px;\r\n`;\r\n\r\nconst Tags = styled.span`\r\n    padding-top: 3px;\r\n    padding-bottom: 3px;\r\n    padding-right: 8px;\r\n    padding-left: 8px;\r\n    background-color: #EBEBEB;\r\n    text-align: center;\r\n    font-size: 13px;\r\n    justify-content: center;\r\n    color: #666666;\r\n    border-radius: 5px;\r\n\r\n    transition: background-color 0.3s; // 색깔 변화 애니메이션\r\n`;\r\n\r\n// 마우스 오버 시 스타일\r\nconst TagHover = {\r\n    ...Tags,\r\n    backgroundColor: \"#d6d6d6\", // 마우스 오버시 배경색\r\n };\r\n  \r\n// 선택된 상태의 스타일\r\nconst TagSelected = {\r\n...Tags,\r\nbackgroundColor: \"#4CAF50\", // 선택된 상태의 배경색\r\n};\r\n\r\n// 태그 및 카테고리 렌더링 시 선택 상태에 따라 스타일 적용\r\nconst renderTag = (tag, isSelected, handleClick) => {\r\nreturn (\r\n    <div onClick={handleClick} style={isSelected ? selectedTagStyle : tagStyle}>\r\n    {tag}\r\n    </div>\r\n);\r\n};\r\n\r\n  \r\nconst BlogListPage = () => {\r\n\r\n    // 로딩 및 에러 표시 \r\n    const [loading, setLoading] = useState(true);\r\n    const [error, setError] = useState(null);\r\n\r\n    // 서버로부터 받은 포스트들을 저장할 상태\r\n    const [posts, setPosts] = useState([]); \r\n\r\n    // 선택된 태그 및 카테고리 정의 -전체 태그, 카테고리는 동적 추출 사용\r\n    const [selectedTags, setSelectedTags] = useState([]);\r\n    const [selectedCategory, setSelectedCategory] = useState('');\r\n\r\n    const [searchParams, setSearchParams] = useSearchParams();\r\n\r\n    // 페이지 이동\r\n    const navigate = useNavigate(); \r\n\r\n    // 초기 포스트 페이지 로딩\r\n    useEffect(() => {\r\n        fetch('http://localhost:8000/posts/')\r\n        .then(response => {\r\n            if (!response.ok) {\r\n            throw new Error('Failed to fetch posts');\r\n            }\r\n            return response.json();\r\n        })\r\n        .then(data => {\r\n            setPosts(data);\r\n        })\r\n        .catch(error => {\r\n            setError(error.message);\r\n        })\r\n        .finally(() => {\r\n            setLoading(false);\r\n        });\r\n    }, []);\r\n\r\n    // URL 쿼리 파라미터 값 변화에 따라 바로 렌더링하기\r\n    useEffect(() => {\r\n        // URL에서 tags와 cat 쿼리 파라미터 값 읽어오기\r\n        const tagsFromURL = searchParams.get('tags');\r\n        const categoryFromURL = searchParams.get('cat');\r\n    \r\n        // 쿼리 파라미터가 없는 경우 빈 배열 또는 빈 문자열로 초기화\r\n        const tagsArray = tagsFromURL ? tagsFromURL.split('&') : [];\r\n        const category = categoryFromURL ? categoryFromURL : '';\r\n    \r\n        // 컴포넌트 상태를 URL의 쿼리 파라미터에 맞게 업데이트\r\n        setSelectedTags(tagsArray);\r\n        setSelectedCategory(category);\r\n    }, [searchParams]); // searchParams 변화 감지\r\n    \r\n\r\n    // 태그 선택 처리 함수\r\n    const handleTagChange = (tag) => {\r\n        const newSelectedTags = selectedTags.includes(tag) \r\n            ? selectedTags.filter(t => t !== tag) \r\n            : [...selectedTags, tag];\r\n        setSelectedTags(newSelectedTags);\r\n        setSearchParams({ tags: newSelectedTags.join('&'), cat: selectedCategory });\r\n    };\r\n\r\n    // 카테고리 선택 처리 함수\r\n    const handleCategoryChange = (category) => {\r\n        setSelectedCategory(category === 'ALL' ? '' : category);\r\n        setSearchParams({ tags: selectedTags.join('&'), cat: category === 'ALL' ? '' : category });\r\n    };\r\n\r\n\r\n    // 글 제목 클릭 시 해당 글의 상세 페이지로 이동하는 함수\r\n    const handlePostClick = (postId) => {\r\n        navigate(`/posts/${postId}`); \r\n      };\r\n\r\n    // // 태그 클릭 시 URL 업데이트\r\n    // const handleTagChange = tag => {\r\n    //     const newSelectedTags = selectedTags.includes(tag) ? selectedTags.filter(t => t !== tag) : [...selectedTags, tag];\r\n    //     setSelectedTags(newSelectedTags);\r\n    //     updateURL(newSelectedTags, selectedCategory);\r\n    // };\r\n\r\n    // // 카테고리 클릭 시 URL 업데이트\r\n    // const handleCategoryChange = category => {\r\n    //     setSelectedCategory(category === 'ALL' ? '' : category);\r\n    //     updateURL(selectedTags, category === 'ALL' ? '' : category);\r\n    // };\r\n\r\n    // // URL 업데이트\r\n    // const updateURL = (tags, category) => {\r\n    //     const tagsQuery = tags.join('&');\r\n    //     setSearchParams({ tags: tagsQuery, cat: category });\r\n    // };\r\n\r\n    // posts Data 필터링\r\n    const filteredPosts = posts.filter(post => {\r\n        const hasSelectedTags = selectedTags.length === 0 || selectedTags.every(tag => post.tags.includes(tag));\r\n        const hasSelectedCategory = !selectedCategory || post.categories.includes(selectedCategory);\r\n        return hasSelectedTags && hasSelectedCategory;\r\n    });\r\n\r\n    // const allTags = posts.reduce((acc, post) => [...acc, ...post.tags], []);\r\n    // const uniqueTags = [...new Set(allTags)];\r\n    \r\n    const uniqueTags = [...new Set(posts.flatMap(post => post.tags))];\r\n    const uniqueCategories = [...new Set(posts.map(post => post.categories))];\r\n\r\n    if (loading) return <div>Loading...</div>;\r\n    if (error) return <div>Error: {error}</div>;\r\n\r\n    return (\r\n        <Wrapper>\r\n            <h1>블로그 메인/리스트 페이지</h1>\r\n        \r\n            {/* 태그 렌더링 */}\r\n            <TagContainer>\r\n            {uniqueTags.map((tag, tagIndex) => (\r\n                <Tags key={tagIndex} onClick={() => handleTagChange(tag)} style={{marginRight: \"10px\", cursor: 'pointer', gap: \"10px\" }}>\r\n                #{tag}{selectedTags.includes(tag) ? ' (Selected)' : ''}\r\n                </Tags>     \r\n            ))}\r\n            </TagContainer>\r\n        \r\n            {/* 카테고리 버튼 렌더링 */}\r\n            <CategoryContainer>\r\n            <div>\r\n                {uniqueCategories.map((category, index) => (\r\n                <Tags key={index} onClick={() => handleCategoryChange(category)} style={{margin: \"10px\", cursor: 'pointer'}}>\r\n                    {selectedCategory === category ? `<Selected> ${category}` : category}\r\n                </Tags>\r\n                ))}\r\n            </div>\r\n            </CategoryContainer>\r\n        \r\n            {/* 포스트 목록 렌더링 및 포스트로 이동 */}\r\n            <div>\r\n            {filteredPosts.map((post, index) => (\r\n                <div key={index} onClick={() => handlePostClick(post._id)} style={{cursor: 'pointer'}}>\r\n                <h2>{post.title}</h2>\r\n                <h4>{post.outline}</h4>\r\n                {post.tags.map((tag, tagIndex) => (\r\n                    <Tags key={tagIndex} style={{marginRight: \"10px\", cursor: 'pointer', gap: \"10px\" }}>\r\n                    #{tag}\r\n                    </Tags>\r\n                ))}\r\n                </div>\r\n            ))}\r\n            </div>\r\n        \r\n        </Wrapper>\r\n        );\r\n      \r\n};\r\n\r\nexport default BlogListPage;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}