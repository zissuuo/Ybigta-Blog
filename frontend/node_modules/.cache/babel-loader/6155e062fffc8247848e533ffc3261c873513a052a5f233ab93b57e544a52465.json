{"ast":null,"code":"var _jsxFileName = \"E:\\\\Documents\\\\2024-1 YBIGTA\\\\Ybigta_BLOG\\\\blog_git\\\\Ybigta-Blog\\\\frontend\\\\src\\\\components\\\\page\\\\ContentPage.jsx\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { useParams } from 'react-router-dom';\nimport styled, { createGlobalStyle } from 'styled-components';\nimport { useEffect, useState } from 'react';\nimport ReactMarkdown from 'react-markdown';\nimport remarkGfm from 'remark-gfm';\nimport { Prism as SyntaxHighlighter } from 'react-syntax-highlighter';\n// 원하는 스타일 테마를 선택하세요. 예: vs, xcode, prism, atomDark 등\nimport { prism } from 'react-syntax-highlighter/dist/esm/styles/prism';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Wrapper = styled.div`\n    display: flex;\n    flex-direction: column;\n    padding: 40px;\n`;\n_c = Wrapper;\nconst CodeBlock = ({\n  node,\n  inline,\n  className,\n  children,\n  ...props\n}) => {\n  const match = /language-(\\w+)/.exec(className || '');\n  return !inline && match ? /*#__PURE__*/_jsxDEV(SyntaxHighlighter, {\n    style: prism,\n    language: match[1],\n    PreTag: \"div\",\n    ...props,\n    children: String(children).replace(/\\n$/, '')\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 23,\n    columnNumber: 5\n  }, this) : /*#__PURE__*/_jsxDEV(\"code\", {\n    className: className,\n    ...props,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 5\n  }, this);\n};\n_c2 = CodeBlock;\nconst Image = ({\n  node,\n  ...props\n}) => /*#__PURE__*/_jsxDEV(\"img\", {\n  ...props,\n  style: {\n    flex: \"column\",\n    maxWidth: \"auto\",\n    height: \"450px\",\n    justifyItems: \"center\"\n  } // 이 부분을 조정하여 이미지 크기 스타일을 적용\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 35,\n  columnNumber: 5\n}, this);\n_c3 = Image;\nconst ContentPage = () => {\n  _s();\n  const {\n    postId\n  } = useParams(); // URL에서 postId 파라미터를 추출\n  const [posts, setPosts] = useState([]); // 서버로부터 받은 포스트들을 저장할 상태\n\n  useEffect(() => {\n    // 서버로부터 포스트 데이터를 가져옵니다.\n    fetch('http://localhost:8000/posts') // 이 URL은 예시이며, 실제 서버의 URL을 사용해야 합니다.\n    .then(response => response.json()).then(data => setPosts(data)).catch(error => console.log(error));\n  }, []);\n  return /*#__PURE__*/_jsxDEV(Wrapper, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: posts.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: posts[0].title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 13\n        }, this), posts[0].tags.map((tag, index) => /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"#\", tag]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 15\n        }, this) // 각 태그에 고유 key 값을 제공합니다.\n        ), /*#__PURE__*/_jsxDEV(ReactMarkdown, {\n          remarkPlugins: [remarkGfm],\n          components: {\n            code: CodeBlock,\n            img: Image\n          },\n          children: posts[0].content\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 5\n  }, this);\n};\n_s(ContentPage, \"0WH5Knhem6VGfvLUAzKeRfWC+ms=\", false, function () {\n  return [useParams];\n});\n_c4 = ContentPage;\nexport default ContentPage;\nvar _c, _c2, _c3, _c4;\n$RefreshReg$(_c, \"Wrapper\");\n$RefreshReg$(_c2, \"CodeBlock\");\n$RefreshReg$(_c3, \"Image\");\n$RefreshReg$(_c4, \"ContentPage\");","map":{"version":3,"names":["React","useNavigate","useParams","styled","createGlobalStyle","useEffect","useState","ReactMarkdown","remarkGfm","Prism","SyntaxHighlighter","prism","jsxDEV","_jsxDEV","Wrapper","div","_c","CodeBlock","node","inline","className","children","props","match","exec","style","language","PreTag","String","replace","fileName","_jsxFileName","lineNumber","columnNumber","_c2","Image","flex","maxWidth","height","justifyItems","_c3","ContentPage","_s","postId","posts","setPosts","fetch","then","response","json","data","catch","error","console","log","length","title","tags","map","tag","index","remarkPlugins","components","code","img","content","_c4","$RefreshReg$"],"sources":["E:/Documents/2024-1 YBIGTA/Ybigta_BLOG/blog_git/Ybigta-Blog/frontend/src/components/page/ContentPage.jsx"],"sourcesContent":["import React from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { useParams } from 'react-router-dom';\r\nimport styled, { createGlobalStyle } from 'styled-components';\r\nimport { useEffect, useState } from 'react';\r\nimport ReactMarkdown from 'react-markdown';\r\nimport remarkGfm from 'remark-gfm';\r\n\r\nimport { Prism as SyntaxHighlighter } from 'react-syntax-highlighter';\r\n// 원하는 스타일 테마를 선택하세요. 예: vs, xcode, prism, atomDark 등\r\nimport { prism } from 'react-syntax-highlighter/dist/esm/styles/prism';\r\n\r\n\r\nconst Wrapper = styled.div`\r\n    display: flex;\r\n    flex-direction: column;\r\n    padding: 40px;\r\n`;\r\n\r\nconst CodeBlock = ({node, inline, className, children, ...props}) => {\r\n  const match = /language-(\\w+)/.exec(className || '')\r\n  return !inline && match ? (\r\n    <SyntaxHighlighter style={prism} language={match[1]} PreTag=\"div\" {...props}>\r\n      {String(children).replace(/\\n$/, '')}\r\n    </SyntaxHighlighter>\r\n  ) : (\r\n    <code className={className} {...props}>\r\n      {children}\r\n    </code>\r\n  );\r\n};\r\n\r\n\r\nconst Image = ({node, ...props}) => (\r\n    <img\r\n      {...props}\r\n      style={{ flex: \"column\", maxWidth: \"auto\", height: \"450px\", justifyItems: \"center\" }} // 이 부분을 조정하여 이미지 크기 스타일을 적용\r\n    />\r\n  );\r\n\r\n\r\nconst ContentPage = () => {\r\n    const { postId } = useParams(); // URL에서 postId 파라미터를 추출\r\n    const [posts, setPosts] = useState([]); // 서버로부터 받은 포스트들을 저장할 상태\r\n    \r\n\r\n    useEffect(() => {\r\n      // 서버로부터 포스트 데이터를 가져옵니다.\r\n      fetch('http://localhost:8000/posts') // 이 URL은 예시이며, 실제 서버의 URL을 사용해야 합니다.\r\n        .then(response => response.json())\r\n        .then(data => setPosts(data))\r\n        .catch(error => console.log(error));\r\n    }, []);\r\n  \r\n    return (\r\n    <Wrapper>\r\n      <div>\r\n        {posts.length > 0 && (\r\n          <div>\r\n            <h2>{posts[0].title}</h2>\r\n            {posts[0].tags.map((tag, index) => (\r\n              <p key={index}>#{tag}</p> // 각 태그에 고유 key 값을 제공합니다.\r\n            ))}\r\n            <ReactMarkdown\r\n              remarkPlugins={[remarkGfm]}\r\n              components={{ code: CodeBlock, img: Image }}>\r\n              {posts[0].content}\r\n            </ReactMarkdown>\r\n          </div>\r\n        )}\r\n      </div>\r\n    </Wrapper>\r\n    );\r\n\r\n};\r\n\r\nexport default ContentPage;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}