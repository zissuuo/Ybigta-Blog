{"ast":null,"code":"/**\r\n * @typedef {import('mdast').Root} Root\r\n * @typedef {import('mdast-util-from-markdown').Options} FromMarkdownOptions\r\n * @typedef {import('unified').Parser<Root>} Parser\r\n * @typedef {import('unified').Processor<Root>} Processor\r\n */\n\n/**\r\n * @typedef {Omit<FromMarkdownOptions, 'extensions' | 'mdastExtensions'>} Options\r\n */\n\nimport { fromMarkdown } from 'mdast-util-from-markdown';\n\n/**\r\n * Aadd support for parsing from markdown.\r\n *\r\n * @param {Readonly<Options> | null | undefined} [options]\r\n *   Configuration (optional).\r\n * @returns {undefined}\r\n *   Nothing.\r\n */\nexport default function remarkParse(options) {\n  /** @type {Processor} */\n  // @ts-expect-error: TS in JSDoc generates wrong types if `this` is typed regularly.\n  const self = this;\n  self.parser = parser;\n\n  /**\r\n   * @type {Parser}\r\n   */\n  function parser(doc) {\n    return fromMarkdown(doc, {\n      ...self.data('settings'),\n      ...options,\n      // Note: these options are not in the readme.\n      // The goal is for them to be set by plugins on `data` instead of being\n      // passed by users.\n      extensions: self.data('micromarkExtensions') || [],\n      mdastExtensions: self.data('fromMarkdownExtensions') || []\n    });\n  }\n}","map":{"version":3,"names":["fromMarkdown","remarkParse","options","self","parser","doc","data","extensions","mdastExtensions"],"sources":["E:/Documents/2024-1 YBIGTA/React/blog_git/Ybigta-Blog/frontend/node_modules/remark-parse/lib/index.js"],"sourcesContent":["/**\r\n * @typedef {import('mdast').Root} Root\r\n * @typedef {import('mdast-util-from-markdown').Options} FromMarkdownOptions\r\n * @typedef {import('unified').Parser<Root>} Parser\r\n * @typedef {import('unified').Processor<Root>} Processor\r\n */\r\n\r\n/**\r\n * @typedef {Omit<FromMarkdownOptions, 'extensions' | 'mdastExtensions'>} Options\r\n */\r\n\r\nimport {fromMarkdown} from 'mdast-util-from-markdown'\r\n\r\n/**\r\n * Aadd support for parsing from markdown.\r\n *\r\n * @param {Readonly<Options> | null | undefined} [options]\r\n *   Configuration (optional).\r\n * @returns {undefined}\r\n *   Nothing.\r\n */\r\nexport default function remarkParse(options) {\r\n  /** @type {Processor} */\r\n  // @ts-expect-error: TS in JSDoc generates wrong types if `this` is typed regularly.\r\n  const self = this\r\n\r\n  self.parser = parser\r\n\r\n  /**\r\n   * @type {Parser}\r\n   */\r\n  function parser(doc) {\r\n    return fromMarkdown(doc, {\r\n      ...self.data('settings'),\r\n      ...options,\r\n      // Note: these options are not in the readme.\r\n      // The goal is for them to be set by plugins on `data` instead of being\r\n      // passed by users.\r\n      extensions: self.data('micromarkExtensions') || [],\r\n      mdastExtensions: self.data('fromMarkdownExtensions') || []\r\n    })\r\n  }\r\n}\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,SAAQA,YAAY,QAAO,0BAA0B;;AAErD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,SAASC,WAAWA,CAACC,OAAO,EAAE;EAC3C;EACA;EACA,MAAMC,IAAI,GAAG,IAAI;EAEjBA,IAAI,CAACC,MAAM,GAAGA,MAAM;;EAEpB;AACF;AACA;EACE,SAASA,MAAMA,CAACC,GAAG,EAAE;IACnB,OAAOL,YAAY,CAACK,GAAG,EAAE;MACvB,GAAGF,IAAI,CAACG,IAAI,CAAC,UAAU,CAAC;MACxB,GAAGJ,OAAO;MACV;MACA;MACA;MACAK,UAAU,EAAEJ,IAAI,CAACG,IAAI,CAAC,qBAAqB,CAAC,IAAI,EAAE;MAClDE,eAAe,EAAEL,IAAI,CAACG,IAAI,CAAC,wBAAwB,CAAC,IAAI;IAC1D,CAAC,CAAC;EACJ;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}