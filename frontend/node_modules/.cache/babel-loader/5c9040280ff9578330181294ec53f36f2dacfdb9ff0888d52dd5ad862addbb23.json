{"ast":null,"code":"/**\r\n * @typedef {import('mdast').Code} Code\r\n * @typedef {import('../types.js').State} State\r\n */\n\n/**\r\n * @param {Code} node\r\n * @param {State} state\r\n * @returns {boolean}\r\n */\nexport function formatCodeAsIndented(node, state) {\n  return Boolean(state.options.fences === false && node.value &&\n  // If there’s no info…\n  !node.lang &&\n  // And there’s a non-whitespace character…\n  /[^ \\r\\n]/.test(node.value) &&\n  // And the value doesn’t start or end in a blank…\n  !/^[\\t ]*(?:[\\r\\n]|$)|(?:^|[\\r\\n])[\\t ]*$/.test(node.value));\n}","map":{"version":3,"names":["formatCodeAsIndented","node","state","Boolean","options","fences","value","lang","test"],"sources":["E:/Documents/2024-1 YBIGTA/Ybigta_BLOG/Ybigta-Blog/frontend/node_modules/mdast-util-to-markdown/lib/util/format-code-as-indented.js"],"sourcesContent":["/**\r\n * @typedef {import('mdast').Code} Code\r\n * @typedef {import('../types.js').State} State\r\n */\r\n\r\n/**\r\n * @param {Code} node\r\n * @param {State} state\r\n * @returns {boolean}\r\n */\r\nexport function formatCodeAsIndented(node, state) {\r\n  return Boolean(\r\n    state.options.fences === false &&\r\n      node.value &&\r\n      // If there’s no info…\r\n      !node.lang &&\r\n      // And there’s a non-whitespace character…\r\n      /[^ \\r\\n]/.test(node.value) &&\r\n      // And the value doesn’t start or end in a blank…\r\n      !/^[\\t ]*(?:[\\r\\n]|$)|(?:^|[\\r\\n])[\\t ]*$/.test(node.value)\r\n  )\r\n}\r\n"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASA,oBAAoBA,CAACC,IAAI,EAAEC,KAAK,EAAE;EAChD,OAAOC,OAAO,CACZD,KAAK,CAACE,OAAO,CAACC,MAAM,KAAK,KAAK,IAC5BJ,IAAI,CAACK,KAAK;EACV;EACA,CAACL,IAAI,CAACM,IAAI;EACV;EACA,UAAU,CAACC,IAAI,CAACP,IAAI,CAACK,KAAK,CAAC;EAC3B;EACA,CAAC,yCAAyC,CAACE,IAAI,CAACP,IAAI,CAACK,KAAK,CAC9D,CAAC;AACH","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}