{"ast":null,"code":"/*\r\nLanguage: Clojure\r\nDescription: Clojure syntax (based on lisp.js)\r\nAuthor: mfornos\r\nWebsite: https://clojure.org\r\nCategory: lisp\r\n*/\n\n/** @type LanguageFn */\nfunction clojure(hljs) {\n  const SYMBOLSTART = 'a-zA-Z_\\\\-!.?+*=<>&#\\'';\n  const SYMBOL_RE = '[' + SYMBOLSTART + '][' + SYMBOLSTART + '0-9/;:]*';\n  const globals = 'def defonce defprotocol defstruct defmulti defmethod defn- defn defmacro deftype defrecord';\n  const keywords = {\n    $pattern: SYMBOL_RE,\n    'builtin-name':\n    // Clojure keywords\n    globals + ' ' + 'cond apply if-not if-let if not not= =|0 <|0 >|0 <=|0 >=|0 ==|0 +|0 /|0 *|0 -|0 rem ' + 'quot neg? pos? delay? symbol? keyword? true? false? integer? empty? coll? list? ' + 'set? ifn? fn? associative? sequential? sorted? counted? reversible? number? decimal? ' + 'class? distinct? isa? float? rational? reduced? ratio? odd? even? char? seq? vector? ' + 'string? map? nil? contains? zero? instance? not-every? not-any? libspec? -> ->> .. . ' + 'inc compare do dotimes mapcat take remove take-while drop letfn drop-last take-last ' + 'drop-while while intern condp case reduced cycle split-at split-with repeat replicate ' + 'iterate range merge zipmap declare line-seq sort comparator sort-by dorun doall nthnext ' + 'nthrest partition eval doseq await await-for let agent atom send send-off release-pending-sends ' + 'add-watch mapv filterv remove-watch agent-error restart-agent set-error-handler error-handler ' + 'set-error-mode! error-mode shutdown-agents quote var fn loop recur throw try monitor-enter ' + 'monitor-exit macroexpand macroexpand-1 for dosync and or ' + 'when when-not when-let comp juxt partial sequence memoize constantly complement identity assert ' + 'peek pop doto proxy first rest cons cast coll last butlast ' + 'sigs reify second ffirst fnext nfirst nnext meta with-meta ns in-ns create-ns import ' + 'refer keys select-keys vals key val rseq name namespace promise into transient persistent! conj! ' + 'assoc! dissoc! pop! disj! use class type num float double short byte boolean bigint biginteger ' + 'bigdec print-method print-dup throw-if printf format load compile get-in update-in pr pr-on newline ' + 'flush read slurp read-line subvec with-open memfn time re-find re-groups rand-int rand mod locking ' + 'assert-valid-fdecl alias resolve ref deref refset swap! reset! set-validator! compare-and-set! alter-meta! ' + 'reset-meta! commute get-validator alter ref-set ref-history-count ref-min-history ref-max-history ensure sync io! ' + 'new next conj set! to-array future future-call into-array aset gen-class reduce map filter find empty ' + 'hash-map hash-set sorted-map sorted-map-by sorted-set sorted-set-by vec vector seq flatten reverse assoc dissoc list ' + 'disj get union difference intersection extend extend-type extend-protocol int nth delay count concat chunk chunk-buffer ' + 'chunk-append chunk-first chunk-rest max min dec unchecked-inc-int unchecked-inc unchecked-dec-inc unchecked-dec unchecked-negate ' + 'unchecked-add-int unchecked-add unchecked-subtract-int unchecked-subtract chunk-next chunk-cons chunked-seq? prn vary-meta ' + 'lazy-seq spread list* str find-keyword keyword symbol gensym force rationalize'\n  };\n  const SIMPLE_NUMBER_RE = '[-+]?\\\\d+(\\\\.\\\\d+)?';\n  const SYMBOL = {\n    begin: SYMBOL_RE,\n    relevance: 0\n  };\n  const NUMBER = {\n    className: 'number',\n    begin: SIMPLE_NUMBER_RE,\n    relevance: 0\n  };\n  const STRING = hljs.inherit(hljs.QUOTE_STRING_MODE, {\n    illegal: null\n  });\n  const COMMENT = hljs.COMMENT(';', '$', {\n    relevance: 0\n  });\n  const LITERAL = {\n    className: 'literal',\n    begin: /\\b(true|false|nil)\\b/\n  };\n  const COLLECTION = {\n    begin: '[\\\\[\\\\{]',\n    end: '[\\\\]\\\\}]'\n  };\n  const HINT = {\n    className: 'comment',\n    begin: '\\\\^' + SYMBOL_RE\n  };\n  const HINT_COL = hljs.COMMENT('\\\\^\\\\{', '\\\\}');\n  const KEY = {\n    className: 'symbol',\n    begin: '[:]{1,2}' + SYMBOL_RE\n  };\n  const LIST = {\n    begin: '\\\\(',\n    end: '\\\\)'\n  };\n  const BODY = {\n    endsWithParent: true,\n    relevance: 0\n  };\n  const NAME = {\n    keywords: keywords,\n    className: 'name',\n    begin: SYMBOL_RE,\n    relevance: 0,\n    starts: BODY\n  };\n  const DEFAULT_CONTAINS = [LIST, STRING, HINT, HINT_COL, COMMENT, KEY, COLLECTION, NUMBER, LITERAL, SYMBOL];\n  const GLOBAL = {\n    beginKeywords: globals,\n    lexemes: SYMBOL_RE,\n    end: '(\\\\[|#|\\\\d|\"|:|\\\\{|\\\\)|\\\\(|$)',\n    contains: [{\n      className: 'title',\n      begin: SYMBOL_RE,\n      relevance: 0,\n      excludeEnd: true,\n      // we can only have a single title\n      endsParent: true\n    }].concat(DEFAULT_CONTAINS)\n  };\n  LIST.contains = [hljs.COMMENT('comment', ''), GLOBAL, NAME, BODY];\n  BODY.contains = DEFAULT_CONTAINS;\n  COLLECTION.contains = DEFAULT_CONTAINS;\n  HINT_COL.contains = [COLLECTION];\n  return {\n    name: 'Clojure',\n    aliases: ['clj'],\n    illegal: /\\S/,\n    contains: [LIST, STRING, HINT, HINT_COL, COMMENT, KEY, COLLECTION, NUMBER, LITERAL]\n  };\n}\nmodule.exports = clojure;","map":{"version":3,"names":["clojure","hljs","SYMBOLSTART","SYMBOL_RE","globals","keywords","$pattern","SIMPLE_NUMBER_RE","SYMBOL","begin","relevance","NUMBER","className","STRING","inherit","QUOTE_STRING_MODE","illegal","COMMENT","LITERAL","COLLECTION","end","HINT","HINT_COL","KEY","LIST","BODY","endsWithParent","NAME","starts","DEFAULT_CONTAINS","GLOBAL","beginKeywords","lexemes","contains","excludeEnd","endsParent","concat","name","aliases","module","exports"],"sources":["E:/Documents/2024-1 YBIGTA/Ybigta_BLOG/blog_git/Ybigta-Blog/frontend/node_modules/highlight.js/lib/languages/clojure.js"],"sourcesContent":["/*\r\nLanguage: Clojure\r\nDescription: Clojure syntax (based on lisp.js)\r\nAuthor: mfornos\r\nWebsite: https://clojure.org\r\nCategory: lisp\r\n*/\r\n\r\n/** @type LanguageFn */\r\nfunction clojure(hljs) {\r\n  const SYMBOLSTART = 'a-zA-Z_\\\\-!.?+*=<>&#\\'';\r\n  const SYMBOL_RE = '[' + SYMBOLSTART + '][' + SYMBOLSTART + '0-9/;:]*';\r\n  const globals = 'def defonce defprotocol defstruct defmulti defmethod defn- defn defmacro deftype defrecord';\r\n  const keywords = {\r\n    $pattern: SYMBOL_RE,\r\n    'builtin-name':\r\n      // Clojure keywords\r\n      globals + ' ' +\r\n      'cond apply if-not if-let if not not= =|0 <|0 >|0 <=|0 >=|0 ==|0 +|0 /|0 *|0 -|0 rem ' +\r\n      'quot neg? pos? delay? symbol? keyword? true? false? integer? empty? coll? list? ' +\r\n      'set? ifn? fn? associative? sequential? sorted? counted? reversible? number? decimal? ' +\r\n      'class? distinct? isa? float? rational? reduced? ratio? odd? even? char? seq? vector? ' +\r\n      'string? map? nil? contains? zero? instance? not-every? not-any? libspec? -> ->> .. . ' +\r\n      'inc compare do dotimes mapcat take remove take-while drop letfn drop-last take-last ' +\r\n      'drop-while while intern condp case reduced cycle split-at split-with repeat replicate ' +\r\n      'iterate range merge zipmap declare line-seq sort comparator sort-by dorun doall nthnext ' +\r\n      'nthrest partition eval doseq await await-for let agent atom send send-off release-pending-sends ' +\r\n      'add-watch mapv filterv remove-watch agent-error restart-agent set-error-handler error-handler ' +\r\n      'set-error-mode! error-mode shutdown-agents quote var fn loop recur throw try monitor-enter ' +\r\n      'monitor-exit macroexpand macroexpand-1 for dosync and or ' +\r\n      'when when-not when-let comp juxt partial sequence memoize constantly complement identity assert ' +\r\n      'peek pop doto proxy first rest cons cast coll last butlast ' +\r\n      'sigs reify second ffirst fnext nfirst nnext meta with-meta ns in-ns create-ns import ' +\r\n      'refer keys select-keys vals key val rseq name namespace promise into transient persistent! conj! ' +\r\n      'assoc! dissoc! pop! disj! use class type num float double short byte boolean bigint biginteger ' +\r\n      'bigdec print-method print-dup throw-if printf format load compile get-in update-in pr pr-on newline ' +\r\n      'flush read slurp read-line subvec with-open memfn time re-find re-groups rand-int rand mod locking ' +\r\n      'assert-valid-fdecl alias resolve ref deref refset swap! reset! set-validator! compare-and-set! alter-meta! ' +\r\n      'reset-meta! commute get-validator alter ref-set ref-history-count ref-min-history ref-max-history ensure sync io! ' +\r\n      'new next conj set! to-array future future-call into-array aset gen-class reduce map filter find empty ' +\r\n      'hash-map hash-set sorted-map sorted-map-by sorted-set sorted-set-by vec vector seq flatten reverse assoc dissoc list ' +\r\n      'disj get union difference intersection extend extend-type extend-protocol int nth delay count concat chunk chunk-buffer ' +\r\n      'chunk-append chunk-first chunk-rest max min dec unchecked-inc-int unchecked-inc unchecked-dec-inc unchecked-dec unchecked-negate ' +\r\n      'unchecked-add-int unchecked-add unchecked-subtract-int unchecked-subtract chunk-next chunk-cons chunked-seq? prn vary-meta ' +\r\n      'lazy-seq spread list* str find-keyword keyword symbol gensym force rationalize'\r\n  };\r\n\r\n  const SIMPLE_NUMBER_RE = '[-+]?\\\\d+(\\\\.\\\\d+)?';\r\n\r\n  const SYMBOL = {\r\n    begin: SYMBOL_RE,\r\n    relevance: 0\r\n  };\r\n  const NUMBER = {\r\n    className: 'number',\r\n    begin: SIMPLE_NUMBER_RE,\r\n    relevance: 0\r\n  };\r\n  const STRING = hljs.inherit(hljs.QUOTE_STRING_MODE, {\r\n    illegal: null\r\n  });\r\n  const COMMENT = hljs.COMMENT(\r\n    ';',\r\n    '$',\r\n    {\r\n      relevance: 0\r\n    }\r\n  );\r\n  const LITERAL = {\r\n    className: 'literal',\r\n    begin: /\\b(true|false|nil)\\b/\r\n  };\r\n  const COLLECTION = {\r\n    begin: '[\\\\[\\\\{]',\r\n    end: '[\\\\]\\\\}]'\r\n  };\r\n  const HINT = {\r\n    className: 'comment',\r\n    begin: '\\\\^' + SYMBOL_RE\r\n  };\r\n  const HINT_COL = hljs.COMMENT('\\\\^\\\\{', '\\\\}');\r\n  const KEY = {\r\n    className: 'symbol',\r\n    begin: '[:]{1,2}' + SYMBOL_RE\r\n  };\r\n  const LIST = {\r\n    begin: '\\\\(',\r\n    end: '\\\\)'\r\n  };\r\n  const BODY = {\r\n    endsWithParent: true,\r\n    relevance: 0\r\n  };\r\n  const NAME = {\r\n    keywords: keywords,\r\n    className: 'name',\r\n    begin: SYMBOL_RE,\r\n    relevance: 0,\r\n    starts: BODY\r\n  };\r\n  const DEFAULT_CONTAINS = [\r\n    LIST,\r\n    STRING,\r\n    HINT,\r\n    HINT_COL,\r\n    COMMENT,\r\n    KEY,\r\n    COLLECTION,\r\n    NUMBER,\r\n    LITERAL,\r\n    SYMBOL\r\n  ];\r\n\r\n  const GLOBAL = {\r\n    beginKeywords: globals,\r\n    lexemes: SYMBOL_RE,\r\n    end: '(\\\\[|#|\\\\d|\"|:|\\\\{|\\\\)|\\\\(|$)',\r\n    contains: [\r\n      {\r\n        className: 'title',\r\n        begin: SYMBOL_RE,\r\n        relevance: 0,\r\n        excludeEnd: true,\r\n        // we can only have a single title\r\n        endsParent: true\r\n      }\r\n    ].concat(DEFAULT_CONTAINS)\r\n  };\r\n\r\n  LIST.contains = [\r\n    hljs.COMMENT('comment', ''),\r\n    GLOBAL,\r\n    NAME,\r\n    BODY\r\n  ];\r\n  BODY.contains = DEFAULT_CONTAINS;\r\n  COLLECTION.contains = DEFAULT_CONTAINS;\r\n  HINT_COL.contains = [ COLLECTION ];\r\n\r\n  return {\r\n    name: 'Clojure',\r\n    aliases: [ 'clj' ],\r\n    illegal: /\\S/,\r\n    contains: [\r\n      LIST,\r\n      STRING,\r\n      HINT,\r\n      HINT_COL,\r\n      COMMENT,\r\n      KEY,\r\n      COLLECTION,\r\n      NUMBER,\r\n      LITERAL\r\n    ]\r\n  };\r\n}\r\n\r\nmodule.exports = clojure;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}