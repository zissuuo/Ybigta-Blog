{"ast":null,"code":"var _jsxFileName = \"E:\\\\Documents\\\\2024-1 YBIGTA\\\\Ybigta_BLOG\\\\Ybigta-Blog\\\\frontend\\\\src\\\\components\\\\page\\\\BlogListPage.jsx\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport styled, { createGlobalStyle } from 'styled-components';\nimport { useEffect, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Wrapper = styled.div`\n    display: flex;\n    flex-direction: column;\n    padding: 40px;\n`;\n_c = Wrapper;\nconst TagContainer = styled.div`\n    display: flex;\n    flex-direction: row;\n    flex-wrap: wrap;\n    align-items: center;\n    justify-content: center;\n    //width: 600px;\n    gap: 7px;\n`;\n_c2 = TagContainer;\nconst Tags = styled.span`\n    padding-top: 3px;\n    padding-bottom: 3px;\n    padding-right: 8px;\n    padding-left: 8px;\n    background-color: #EBEBEB;\n    text-align: center;\n    font-size: 13px;\n    justify-content: center;\n    color: #666666;\n    border-radius: 5px;\n`;\n_c3 = Tags;\nconst BlogListPage = () => {\n  _s();\n  // 로딩 및 에러 표시 \n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  // 서버로부터 받은 포스트들을 저장할 상태\n  const [posts, setPosts] = useState([]);\n\n  // 태그 및 카테고리 정의\n  const [tags, setTags] = useState([]);\n  const [categories, setCategories] = useState(['ALL', 'Data Analytics TEAM', 'Data Engineering TEAM', 'Data Science TEAM']);\n  const [selectedTags, setSelectedTags] = useState([]);\n  const [selectedCategory, setSelectedCategory] = useState('');\n  const [searchParams, setSearchParams] = useSearchParams();\n\n  // 페이지 이동\n  const navigate = useNavigate();\n  useEffect(() => {\n    // 초기 포스트 목록 로딩\n    const fetchInitialPosts = async () => {\n      try {\n        const response = await fetch('http://localhost:8000/posts/');\n        if (!response.ok) throw new Error('Failed to fetch posts');\n        const data = await response.json();\n        setPosts(data);\n      } catch (error) {\n        setError(error.message);\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchInitialPosts();\n  }, []); // 이 useEffect는 컴포넌트가 마운트될 때 한 번만 실행됩니다.\n\n  useEffect(() => {\n    // 사용자의 태그, 카테고리 선택에 따른 포스트 목록 업데이트\n    const fetchFilteredPosts = async () => {\n      try {\n        const response = await fetch(`http://localhost:8000/posts?${buildQueryString()}`);\n        if (!response.ok) throw new Error('Network response was not ok');\n        const data = await response.json();\n        setPosts(data);\n      } catch (error) {\n        setError(error.message);\n      } finally {\n        setLoading(false);\n      }\n    };\n    if (searchParams.toString()) {\n      // URL의 쿼리 파라미터가 변경될 때마다 실행\n      fetchFilteredPosts();\n    }\n  }, [searchParams]); // 이 useEffect는 searchParams의 변화에 따라 실행됩니다.\n\n  // 글 제목 클릭 시 해당 글의 상세 페이지로 이동하는 함수\n  const handlePostClick = postId => {\n    navigate(`/posts/${postId}`);\n  };\n\n  // 태그 버튼 클릭 시 해당 태그를 가진 글로 필터링하는 로직\n  // const filterPostsByTag = (tag) => {\n  //     navigate(`/tags/${encodeURIComponent(tag)}`);\n  //   };\n\n  // 상단 태그 버튼 클릭 시 이벤트\n  // const handleTagClick = (tag, event) => {\n  //     event.stopPropagation();\n  //     filterPostsByTag(tag);\n  // };\n\n  // const allTags = posts.reduce((acc, post) => [...acc, ...post.tags], []);\n  // const uniqueTags = [...new Set(allTags)];\n\n  return /*#__PURE__*/_jsxDEV(Wrapper, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"\\uBE14\\uB85C\\uADF8 \\uBA54\\uC778/\\uB9AC\\uC2A4\\uD2B8 \\uD398\\uC774\\uC9C0\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(TagContainer, {\n      children: uniqueTags.map((tag, tagIndex) => /*#__PURE__*/_jsxDEV(Tags, {\n        style: {\n          marginRight: \"10px\",\n          cursor: 'pointer',\n          gap: \"10px\"\n        },\n        onClick: event => handleTagClick(tag, event),\n        children: [\"#\", tag]\n      }, tagIndex, true, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 17\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: posts.map((post, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          onClick: () => handlePostClick(post._id),\n          style: {\n            cursor: 'pointer'\n          },\n          children: post.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n          children: post.outline\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 21\n        }, this), post.tags.map((tag, tagIndex) => /*#__PURE__*/_jsxDEV(Tags, {\n          style: {\n            marginRight: \"10px\",\n            cursor: 'pointer',\n            gap: \"10px\"\n          },\n          onClick: event => handleTagClick(tag, event),\n          children: [\"#\", tag]\n        }, tagIndex, true, {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 25\n        }, this))]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 17\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 115,\n    columnNumber: 5\n  }, this);\n};\n_s(BlogListPage, \"46qRWpAjijJiKSH0FRY+8c8d1Dc=\", true, function () {\n  return [useNavigate];\n});\n_c4 = BlogListPage;\nexport default BlogListPage;\nvar _c, _c2, _c3, _c4;\n$RefreshReg$(_c, \"Wrapper\");\n$RefreshReg$(_c2, \"TagContainer\");\n$RefreshReg$(_c3, \"Tags\");\n$RefreshReg$(_c4, \"BlogListPage\");","map":{"version":3,"names":["React","useNavigate","styled","createGlobalStyle","useEffect","useState","jsxDEV","_jsxDEV","Wrapper","div","_c","TagContainer","_c2","Tags","span","_c3","BlogListPage","_s","loading","setLoading","error","setError","posts","setPosts","tags","setTags","categories","setCategories","selectedTags","setSelectedTags","selectedCategory","setSelectedCategory","searchParams","setSearchParams","useSearchParams","navigate","fetchInitialPosts","response","fetch","ok","Error","data","json","message","fetchFilteredPosts","buildQueryString","toString","handlePostClick","postId","children","fileName","_jsxFileName","lineNumber","columnNumber","uniqueTags","map","tag","tagIndex","style","marginRight","cursor","gap","onClick","event","handleTagClick","post","index","_id","title","outline","_c4","$RefreshReg$"],"sources":["E:/Documents/2024-1 YBIGTA/Ybigta_BLOG/Ybigta-Blog/frontend/src/components/page/BlogListPage.jsx"],"sourcesContent":["import React from 'react';\r\nimport { useNavigate,  } from 'react-router-dom';\r\nimport styled, { createGlobalStyle } from 'styled-components';\r\nimport { useEffect, useState } from 'react';\r\n\r\nconst Wrapper = styled.div`\r\n    display: flex;\r\n    flex-direction: column;\r\n    padding: 40px;\r\n`;\r\n\r\nconst TagContainer = styled.div`\r\n    display: flex;\r\n    flex-direction: row;\r\n    flex-wrap: wrap;\r\n    align-items: center;\r\n    justify-content: center;\r\n    //width: 600px;\r\n    gap: 7px;\r\n`;\r\n\r\nconst Tags = styled.span`\r\n    padding-top: 3px;\r\n    padding-bottom: 3px;\r\n    padding-right: 8px;\r\n    padding-left: 8px;\r\n    background-color: #EBEBEB;\r\n    text-align: center;\r\n    font-size: 13px;\r\n    justify-content: center;\r\n    color: #666666;\r\n    border-radius: 5px;\r\n`;\r\n\r\nconst BlogListPage = () => {\r\n\r\n    // 로딩 및 에러 표시 \r\n    const [loading, setLoading] = useState(true);\r\n    const [error, setError] = useState(null);\r\n\r\n    // 서버로부터 받은 포스트들을 저장할 상태\r\n    const [posts, setPosts] = useState([]); \r\n\r\n    // 태그 및 카테고리 정의\r\n    const [tags, setTags] = useState([]);\r\n    const [categories, setCategories] = useState(['ALL', 'Data Analytics TEAM', 'Data Engineering TEAM', 'Data Science TEAM', ]);\r\n    const [selectedTags, setSelectedTags] = useState([]);\r\n    const [selectedCategory, setSelectedCategory] = useState('');\r\n\r\n    const [searchParams, setSearchParams] = useSearchParams();\r\n\r\n    // 페이지 이동\r\n    const navigate = useNavigate(); \r\n\r\n    useEffect(() => {\r\n        // 초기 포스트 목록 로딩\r\n        const fetchInitialPosts = async () => {\r\n          try {\r\n            const response = await fetch('http://localhost:8000/posts/');\r\n            if (!response.ok) throw new Error('Failed to fetch posts');\r\n            const data = await response.json();\r\n            setPosts(data);\r\n          } catch (error) {\r\n            setError(error.message);\r\n          } finally {\r\n            setLoading(false);\r\n          }\r\n        };\r\n        fetchInitialPosts();\r\n    }, []); // 이 useEffect는 컴포넌트가 마운트될 때 한 번만 실행됩니다.\r\n\r\n    useEffect(() => {\r\n        // 사용자의 태그, 카테고리 선택에 따른 포스트 목록 업데이트\r\n        const fetchFilteredPosts = async () => {\r\n            try {\r\n              const response = await fetch(`http://localhost:8000/posts?${buildQueryString()}`);\r\n              if (!response.ok) throw new Error('Network response was not ok');\r\n              const data = await response.json();\r\n              setPosts(data);\r\n            } catch (error) {\r\n              setError(error.message);\r\n            } finally {\r\n              setLoading(false);\r\n            }\r\n          };\r\n        \r\n          if (searchParams.toString()) {\r\n            // URL의 쿼리 파라미터가 변경될 때마다 실행\r\n            fetchFilteredPosts();\r\n          }\r\n    }, [searchParams]); // 이 useEffect는 searchParams의 변화에 따라 실행됩니다.\r\n\r\n\r\n    // 글 제목 클릭 시 해당 글의 상세 페이지로 이동하는 함수\r\n    const handlePostClick = (postId) => {\r\n        navigate(`/posts/${postId}`); \r\n      };\r\n\r\n    // 태그 버튼 클릭 시 해당 태그를 가진 글로 필터링하는 로직\r\n    // const filterPostsByTag = (tag) => {\r\n    //     navigate(`/tags/${encodeURIComponent(tag)}`);\r\n    //   };\r\n    \r\n    // 상단 태그 버튼 클릭 시 이벤트\r\n    // const handleTagClick = (tag, event) => {\r\n    //     event.stopPropagation();\r\n    //     filterPostsByTag(tag);\r\n    // };\r\n\r\n    // const allTags = posts.reduce((acc, post) => [...acc, ...post.tags], []);\r\n    // const uniqueTags = [...new Set(allTags)];\r\n\r\n\r\n    return (\r\n    <Wrapper>\r\n        <h1>블로그 메인/리스트 페이지</h1>\r\n        <TagContainer>\r\n            {uniqueTags.map((tag, tagIndex) => (\r\n                <Tags key={tagIndex} style={{marginRight: \"10px\", cursor: 'pointer', gap: \"10px\" }} onClick={(event) => handleTagClick(tag, event)}>\r\n                    #{tag}\r\n                </Tags>     \r\n            ))}\r\n        </TagContainer>\r\n        <div>\r\n            {posts.map((post, index) => (\r\n                <div key={index}>\r\n                    <h2 onClick={() => handlePostClick(post._id)} style={{ cursor: 'pointer' }}>\r\n                        {post.title}\r\n                    </h2>\r\n                    <h4>{post.outline}</h4>\r\n                    {post.tags.map((tag, tagIndex) => (\r\n                        <Tags key={tagIndex} style={{marginRight: \"10px\", cursor: 'pointer', gap: \"10px\" }} onClick={(event) => handleTagClick(tag, event)}>\r\n                            #{tag}\r\n                        </Tags>\r\n                    ))}\r\n                </div>\r\n            ))}\r\n        </div>\r\n    </Wrapper>\r\n    );\r\n};\r\n\r\nexport default BlogListPage;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}