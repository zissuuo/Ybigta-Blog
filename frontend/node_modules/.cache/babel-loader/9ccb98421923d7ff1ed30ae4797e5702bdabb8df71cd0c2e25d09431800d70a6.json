{"ast":null,"code":"var _jsxFileName = \"E:\\\\Documents\\\\2024-1 YBIGTA\\\\Ybigta_BLOG\\\\Ybigta-Blog\\\\frontend\\\\src\\\\components\\\\page\\\\BlogListPage.jsx\",\n  _s = $RefreshSig$();\nimport React from \"react\";\nimport { useEffect, useState } from \"react\";\nimport { useNavigate, useSearchParams } from \"react-router-dom\";\nimport styled, { createGlobalStyle } from \"styled-components\";\nimport Pagination from \"react-js-pagination\";\n\n// Styled Components\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Wrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  padding: 40px;\n`;\n_c = Wrapper;\nconst TagContainer = styled.div`\n  display: flex;\n  flex-direction: row;\n  flex-wrap: wrap;\n  align-items: center;\n  justify-content: center;\n  //width: 600px;\n  gap: 7px;\n`;\n_c2 = TagContainer;\nconst CategoryContainer = styled.div`\n  display: flex;\n  flex-direction: row;\n  flex-wrap: wrap;\n  align-items: center;\n  justify-content: center;\n  //width: 600px;\n  gap: 7px;\n`;\n_c3 = CategoryContainer;\nconst Tags = styled.span`\n  padding-top: 3px;\n  padding-bottom: 3px;\n  padding-right: 8px;\n  padding-left: 8px;\n  background-color: #ebebeb;\n  text-align: center;\n  font-size: 13px;\n  justify-content: center;\n  color: #666666;\n  border-radius: 5px;\n`;\n_c4 = Tags;\nconst PaginationContainer = styled.div`\n  .pagination {\n    display: flex;\n    list-style: none;\n    padding: 0;\n  }\n\n  .pagination li {\n    margin: 0 5px;\n  }\n\n  .pagination li a {\n    text-decoration: none;\n    color: black;\n    background-color: white;\n    padding: 8px 12px;\n    border-radius: 50%; /* 둥근 모양 */\n    transition: background-color 0.3s, color 0.3s;\n  }\n\n  .pagination li a:hover {\n    background-color: #f0f0f0; /* 호버 시 배경색 변경 */\n  }\n\n  .pagination li.disabled a {\n    color: #d3d3d3;\n  }\n`;\n\n// Main Page\n_c5 = PaginationContainer;\nconst BlogListPage = () => {\n  _s();\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [posts, setPosts] = useState([]);\n  const [currentPage, setCurrentPage] = useState(1); // 현재 1페이지에서 시작\n  const [postsPerPage, setPostsPerPage] = useState(5); // 한 페이지당 글 수\n  const [totalItemsCount, setTotalItemsCount] = useState(0); // 총 글 수\n\n  const [selectedTags, setSelectedTags] = useState([]);\n  const [selectedCategory, setSelectedCategory] = useState(\"\");\n  const [searchParams, setSearchParams] = useSearchParams();\n  const [allTags, setAllTags] = useState([]);\n  const [allCategories, setAllCategories] = useState([]);\n\n  // 페이지 이동\n  const navigate = useNavigate();\n\n  // 날짜 정렬\n  const sortPostsByDate = posts => {\n    return posts.sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt));\n  };\n\n  // 페이지네이션\n  useEffect(() => {\n    // 필터링 조건을 URLSearchParams 객체로 만듭니다.\n    const params = new URLSearchParams({\n      page: currentPage,\n      per_page: postsPerPage,\n      tags: selectedTags.join(\",\"),\n      cat: selectedCategory\n    }).toString();\n\n    // 초기 포스트 페이지 로딩\n    fetch(`http://localhost:8000/posts/?${params}`).then(response => {\n      if (!response.ok) {\n        throw new Error(\"Failed to fetch posts\");\n      }\n      return response.json();\n    }).then(data => {\n      // const sortedPosts = sortPostsByDate(data.items); // 받아온 데이터를 날짜 순으로 정렬\n      // setPosts(sortedPosts);\n      setPosts(data.items);\n      setTotalItemsCount(data.total); // 총 포스팅 수 \n      setCurrentPage(currentPage); // 현재 페이지 업데이트\n    }).catch(error => {\n      setError(error.message);\n    }).finally(() => {\n      setLoading(false);\n    });\n  }, [currentPage, postsPerPage, selectedTags, selectedCategory]);\n\n  // 페이지 변경 핸들러\n  const handlePageChange = pageNumber => {\n    setSearchParams({\n      ...Object.fromEntries(searchParams.entries()),\n      page: pageNumber\n    });\n  };\n\n  // 필터링 초기화\n  const resetFilters = () => {\n    setSelectedTags([]);\n    setSelectedCategory(\"\");\n    setSearchParams({});\n  };\n\n  // // URL 쿼리 파라미터 값 변화에 따라 바로 렌더링하기\n  // useEffect(() => {\n  //   // URL에서 tags와 cat 쿼리 파라미터 값 읽어오기\n  //   const tagsFromURL = searchParams.get(\"tags\");\n  //   const categoryFromURL = searchParams.get(\"cat\");\n  //   const pageFromURL = searchParams.get(\"page\")\n\n  //   // 쿼리 파라미터가 없는 경우 빈 배열 또는 빈 문자열로 초기화\n  //   const tagsArray = tagsFromURL ? tagsFromURL.split(\"&\") : [];\n  //   const category = categoryFromURL ? categoryFromURL : \"\";\n  //   const pageX = pageFromURL? pageFromURL : \"\";\n\n  //   // 컴포넌트 상태를 URL의 쿼리 파라미터에 맞게 업데이트\n  //   setSelectedTags(tagsArray);\n  //   setSelectedCategory(category);\n  //   setCurrentPage(pageX)\n  // }, [searchParams]); // searchParams 변화 감지\n\n  // 글 제목 클릭 시 해당 글의 상세 페이지로 이동하는 함수\n  const handlePostClick = postId => {\n    navigate(`/posts/${postId}`);\n  };\n\n  // 태그 단일선택 처리 (공통사용)\n  const handleTagClick = (tag, event) => {\n    event.stopPropagation();\n    navigate(`/?tags=${tag}`);\n  };\n\n  // 태그 다중선택 처리\n  const handleTagChange = tag => {\n    const newSelectedTags = selectedTags.includes(tag) ? selectedTags.filter(t => t !== tag) : [...selectedTags, tag];\n    setSelectedTags(newSelectedTags);\n    // setSearchParams({ tags: newSelectedTags.join(\"&\"), cat: selectedCategory });\n\n    setSearchParams({\n      ...Object.fromEntries(searchParams.entries()),\n      tags: newSelectedTags.join(\",\"),\n      page: '1' // 태그 변경 시 페이지를 1로 리셋\n    });\n  };\n\n  // 카테고리 선택 처리\n  const handleCategoryChange = category => {\n    const isDeselecting = selectedCategory === category || category === \"ALL\";\n    const newCategory = isDeselecting ? \"\" : category;\n    setSelectedCategory(newCategory);\n\n    // 새로운 URLSearchParams 객체 생성\n    const newSearchParams = new URLSearchParams();\n\n    // 태그가 선택되어 있는 경우, 새로운 쿼리 파라미터에 추가\n    if (selectedTags.length > 0) {\n      newSearchParams.set(\"tags\", selectedTags.join(\",\"));\n    }\n\n    // 카테고리가 선택되어 있지 않거나 'ALL'이 선택된 경우, 카테고리를 제외 (newCategory가 \"\"일 때)\n    // 그렇지 않은 경우, 선택된 카테고리를 쿼리 파라미터에 추가\n    if (newCategory !== \"\") {\n      newSearchParams.set(\"cat\", newCategory);\n    }\n\n    // 페이지 번호를 1로 설정하여 항상 첫 페이지에서 필터링 결과를 보여주도록 함\n    newSearchParams.set(\"page\", \"1\");\n\n    // URL의 쿼리 파라미터를 업데이트\n    setSearchParams(newSearchParams);\n  };\n\n  //   // 카테고리 선택 처리\n  //   const handleCategoryChange = (category) => {\n  //     const isDeselecting = selectedCategory === category || category === \"ALL\";\n  //     const newCategory = isDeselecting ? \"\" : category;\n  //     setSelectedCategory(newCategory);\n\n  //     if (newCategory === \"\") {\n  //       setSearchParams(\n  //         selectedTags.length > 0 ? { tags: selectedTags.join(\"&\") } : {}\n  //       );\n  //     } else {\n  //       setSearchParams({ tags: selectedTags.join(\"&\"), cat: newCategory });\n  //     }\n  //   };\n\n  // // posts Data 필터링\n  // const filteredPosts = posts.filter((post) => {\n  //   const hasSelectedTags =\n  //     selectedTags.length === 0 ||\n  //     selectedTags.every((tag) => post.tags.includes(tag));\n  //   const hasSelectedCategory =\n  //     !selectedCategory || post.categories.includes(selectedCategory);\n  //   return hasSelectedTags && hasSelectedCategory;\n  // // });\n\n  // const uniqueTags = [...new Set(posts.flatMap((post) => post.tags))];\n  // const uniqueCategories = [...new Set(posts.map((post) => post.categories))];\n\n  if (loading) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"Loading...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 246,\n    columnNumber: 23\n  }, this);\n  if (error) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [\"Error: \", error]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 247,\n    columnNumber: 21\n  }, this);\n  return /*#__PURE__*/_jsxDEV(Wrapper, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      onClick: resetFilters,\n      style: {\n        cursor: \"pointer\"\n      },\n      children: \"\\uBE14\\uB85C\\uADF8 \\uBA54\\uC778/\\uB9AC\\uC2A4\\uD2B8 \\uD398\\uC774\\uC9C0\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 253,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TagContainer, {\n      children: allTags.map((tag, tagIndex) => /*#__PURE__*/_jsxDEV(Tags, {\n        onClick: () => handleTagChange(tag),\n        style: {\n          marginRight: \"10px\",\n          cursor: \"pointer\",\n          gap: \"10px\"\n        },\n        children: [\"#\", tag, selectedTags.includes(tag) ? \" (Selected)\" : \"\"]\n      }, tagIndex, true, {\n        fileName: _jsxFileName,\n        lineNumber: 260,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 258,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CategoryContainer, {\n      children: allCategories.map((category, index) => /*#__PURE__*/_jsxDEV(Tags, {\n        onClick: () => handleCategoryChange(category),\n        style: {\n          marginRight: \"10px\",\n          cursor: \"pointer\",\n          gap: \"10px\"\n        },\n        children: selectedCategory === category ? `${category} (Selected)` : category\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 274,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 272,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: posts.map((post, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          onClick: () => handlePostClick(post._id),\n          style: {\n            cursor: \"pointer\"\n          },\n          children: post.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 291,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            display: \"flex\",\n            alignItems: \"center\",\n            fontSize: \"16px\",\n            fontWeight: \"bold\",\n            color: \"gray\"\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            children: post.author\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 308,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n            src: post.profileImagePath,\n            alt: \"Author's profile\",\n            style: {\n              width: \"30px\",\n              height: \"30px\",\n              borderRadius: \"50%\"\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 309,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            style: {\n              margin: \"0 10px\",\n              fontWeight: \"bold\",\n              color: \"lightgray\"\n            },\n            children: new Date(post.createdAt).toLocaleDateString()\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 314,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 299,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n          children: post.outline\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 325,\n          columnNumber: 13\n        }, this), post.tags.map((tag, tagIndex) => /*#__PURE__*/_jsxDEV(Tags, {\n          onClick: event => handleTagClick(tag, event),\n          style: {\n            marginRight: \"10px\",\n            cursor: \"pointer\",\n            gap: \"10px\"\n          },\n          children: [\"#\", tag]\n        }, tagIndex, true, {\n          fileName: _jsxFileName,\n          lineNumber: 329,\n          columnNumber: 15\n        }, this))]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 289,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 287,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(PaginationContainer, {\n      children: /*#__PURE__*/_jsxDEV(Pagination, {\n        activePage: currentPage,\n        itemsCountPerPage: postsPerPage,\n        totalItemsCount: totalItemsCount,\n        pageRangeDisplayed: postsPerPage,\n        onChange: handlePageChange,\n        itemClass: \"page-item\",\n        linkClass: \"page-link\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 342,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 341,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 252,\n    columnNumber: 5\n  }, this);\n};\n_s(BlogListPage, \"EDSjZyaxnbxgbEy/Vs2GdL9JL3I=\", false, function () {\n  return [useSearchParams, useNavigate];\n});\n_c6 = BlogListPage;\nexport default BlogListPage;\nvar _c, _c2, _c3, _c4, _c5, _c6;\n$RefreshReg$(_c, \"Wrapper\");\n$RefreshReg$(_c2, \"TagContainer\");\n$RefreshReg$(_c3, \"CategoryContainer\");\n$RefreshReg$(_c4, \"Tags\");\n$RefreshReg$(_c5, \"PaginationContainer\");\n$RefreshReg$(_c6, \"BlogListPage\");","map":{"version":3,"names":["React","useEffect","useState","useNavigate","useSearchParams","styled","createGlobalStyle","Pagination","jsxDEV","_jsxDEV","Wrapper","div","_c","TagContainer","_c2","CategoryContainer","_c3","Tags","span","_c4","PaginationContainer","_c5","BlogListPage","_s","loading","setLoading","error","setError","posts","setPosts","currentPage","setCurrentPage","postsPerPage","setPostsPerPage","totalItemsCount","setTotalItemsCount","selectedTags","setSelectedTags","selectedCategory","setSelectedCategory","searchParams","setSearchParams","allTags","setAllTags","allCategories","setAllCategories","navigate","sortPostsByDate","sort","a","b","Date","createdAt","params","URLSearchParams","page","per_page","tags","join","cat","toString","fetch","then","response","ok","Error","json","data","items","total","catch","message","finally","handlePageChange","pageNumber","Object","fromEntries","entries","resetFilters","handlePostClick","postId","handleTagClick","tag","event","stopPropagation","handleTagChange","newSelectedTags","includes","filter","t","handleCategoryChange","category","isDeselecting","newCategory","newSearchParams","length","set","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","style","cursor","map","tagIndex","marginRight","gap","index","post","_id","title","display","alignItems","fontSize","fontWeight","color","author","src","profileImagePath","alt","width","height","borderRadius","margin","toLocaleDateString","outline","activePage","itemsCountPerPage","pageRangeDisplayed","onChange","itemClass","linkClass","_c6","$RefreshReg$"],"sources":["E:/Documents/2024-1 YBIGTA/Ybigta_BLOG/Ybigta-Blog/frontend/src/components/page/BlogListPage.jsx"],"sourcesContent":["import React from \"react\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { useNavigate, useSearchParams } from \"react-router-dom\";\r\nimport styled, { createGlobalStyle } from \"styled-components\";\r\nimport Pagination from \"react-js-pagination\"\r\n\r\n// Styled Components\r\nconst Wrapper = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  padding: 40px;\r\n`;\r\n\r\nconst TagContainer = styled.div`\r\n  display: flex;\r\n  flex-direction: row;\r\n  flex-wrap: wrap;\r\n  align-items: center;\r\n  justify-content: center;\r\n  //width: 600px;\r\n  gap: 7px;\r\n`;\r\n\r\nconst CategoryContainer = styled.div`\r\n  display: flex;\r\n  flex-direction: row;\r\n  flex-wrap: wrap;\r\n  align-items: center;\r\n  justify-content: center;\r\n  //width: 600px;\r\n  gap: 7px;\r\n`;\r\n\r\nconst Tags = styled.span`\r\n  padding-top: 3px;\r\n  padding-bottom: 3px;\r\n  padding-right: 8px;\r\n  padding-left: 8px;\r\n  background-color: #ebebeb;\r\n  text-align: center;\r\n  font-size: 13px;\r\n  justify-content: center;\r\n  color: #666666;\r\n  border-radius: 5px;\r\n`;\r\n\r\nconst PaginationContainer = styled.div`\r\n  .pagination {\r\n    display: flex;\r\n    list-style: none;\r\n    padding: 0;\r\n  }\r\n\r\n  .pagination li {\r\n    margin: 0 5px;\r\n  }\r\n\r\n  .pagination li a {\r\n    text-decoration: none;\r\n    color: black;\r\n    background-color: white;\r\n    padding: 8px 12px;\r\n    border-radius: 50%; /* 둥근 모양 */\r\n    transition: background-color 0.3s, color 0.3s;\r\n  }\r\n\r\n  .pagination li a:hover {\r\n    background-color: #f0f0f0; /* 호버 시 배경색 변경 */\r\n  }\r\n\r\n  .pagination li.disabled a {\r\n    color: #d3d3d3;\r\n  }\r\n`;\r\n\r\n\r\n// Main Page\r\nconst BlogListPage = () => {\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n\r\n  const [posts, setPosts] = useState([]);\r\n  const [currentPage, setCurrentPage] = useState(1); // 현재 1페이지에서 시작\r\n  const [postsPerPage, setPostsPerPage] = useState(5); // 한 페이지당 글 수\r\n  const [totalItemsCount, setTotalItemsCount] = useState(0); // 총 글 수\r\n\r\n  const [selectedTags, setSelectedTags] = useState([]);\r\n  const [selectedCategory, setSelectedCategory] = useState(\"\");\r\n  const [searchParams, setSearchParams] = useSearchParams();\r\n  const [allTags, setAllTags] = useState([]);\r\n  const [allCategories, setAllCategories] = useState([]);\r\n\r\n  // 페이지 이동\r\n  const navigate = useNavigate();\r\n\r\n  // 날짜 정렬\r\n  const sortPostsByDate = (posts) => {\r\n    return posts.sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt));\r\n  };\r\n\r\n  // 페이지네이션\r\n  useEffect(() => {\r\n    // 필터링 조건을 URLSearchParams 객체로 만듭니다.\r\n    const params = new URLSearchParams({\r\n      page: currentPage,\r\n      per_page: postsPerPage,\r\n      tags: selectedTags.join(\",\"),\r\n      cat: selectedCategory,\r\n    }).toString();\r\n\r\n    // 초기 포스트 페이지 로딩\r\n    fetch(`http://localhost:8000/posts/?${params}`)\r\n      .then((response) => {\r\n        if (!response.ok) {\r\n          throw new Error(\"Failed to fetch posts\");\r\n        }\r\n        return response.json();\r\n      })\r\n      .then((data) => {\r\n        // const sortedPosts = sortPostsByDate(data.items); // 받아온 데이터를 날짜 순으로 정렬\r\n        // setPosts(sortedPosts);\r\n        setPosts(data.items)\r\n        setTotalItemsCount(data.total); // 총 포스팅 수 \r\n        setCurrentPage(currentPage); // 현재 페이지 업데이트\r\n      })\r\n      .catch((error) => {\r\n        setError(error.message);\r\n      })\r\n      .finally(() => {\r\n        setLoading(false);\r\n      });\r\n  }, [currentPage, postsPerPage, selectedTags, selectedCategory]);\r\n\r\n  // 페이지 변경 핸들러\r\n  const handlePageChange = (pageNumber) => {\r\n    setSearchParams({ ...Object.fromEntries(searchParams.entries()), page: pageNumber });\r\n  };\r\n\r\n  \r\n  // 필터링 초기화\r\n  const resetFilters = () => {\r\n    setSelectedTags([]);\r\n    setSelectedCategory(\"\");\r\n    setSearchParams({});\r\n  };\r\n\r\n  // // URL 쿼리 파라미터 값 변화에 따라 바로 렌더링하기\r\n  // useEffect(() => {\r\n  //   // URL에서 tags와 cat 쿼리 파라미터 값 읽어오기\r\n  //   const tagsFromURL = searchParams.get(\"tags\");\r\n  //   const categoryFromURL = searchParams.get(\"cat\");\r\n  //   const pageFromURL = searchParams.get(\"page\")\r\n\r\n  //   // 쿼리 파라미터가 없는 경우 빈 배열 또는 빈 문자열로 초기화\r\n  //   const tagsArray = tagsFromURL ? tagsFromURL.split(\"&\") : [];\r\n  //   const category = categoryFromURL ? categoryFromURL : \"\";\r\n  //   const pageX = pageFromURL? pageFromURL : \"\";\r\n\r\n  //   // 컴포넌트 상태를 URL의 쿼리 파라미터에 맞게 업데이트\r\n  //   setSelectedTags(tagsArray);\r\n  //   setSelectedCategory(category);\r\n  //   setCurrentPage(pageX)\r\n  // }, [searchParams]); // searchParams 변화 감지\r\n\r\n  // 글 제목 클릭 시 해당 글의 상세 페이지로 이동하는 함수\r\n  const handlePostClick = (postId) => {\r\n    navigate(`/posts/${postId}`);\r\n  };\r\n\r\n  // 태그 단일선택 처리 (공통사용)\r\n  const handleTagClick = (tag, event) => {\r\n    event.stopPropagation();\r\n    navigate(`/?tags=${tag}`);\r\n  };\r\n\r\n  // 태그 다중선택 처리\r\n  const handleTagChange = (tag) => {\r\n    const newSelectedTags = selectedTags.includes(tag)\r\n      ? selectedTags.filter((t) => t !== tag)\r\n      : [...selectedTags, tag];\r\n    setSelectedTags(newSelectedTags);\r\n    // setSearchParams({ tags: newSelectedTags.join(\"&\"), cat: selectedCategory });\r\n    \r\n    setSearchParams({ \r\n        ...Object.fromEntries(searchParams.entries()), \r\n        tags: newSelectedTags.join(\",\"), \r\n        page: '1'  // 태그 변경 시 페이지를 1로 리셋\r\n    });\r\n  };\r\n\r\n  // 카테고리 선택 처리\r\nconst handleCategoryChange = (category) => {\r\n    const isDeselecting = selectedCategory === category || category === \"ALL\";\r\n    const newCategory = isDeselecting ? \"\" : category;\r\n    setSelectedCategory(newCategory);\r\n  \r\n    // 새로운 URLSearchParams 객체 생성\r\n    const newSearchParams = new URLSearchParams();\r\n  \r\n    // 태그가 선택되어 있는 경우, 새로운 쿼리 파라미터에 추가\r\n    if (selectedTags.length > 0) {\r\n      newSearchParams.set(\"tags\", selectedTags.join(\",\"));\r\n    }\r\n  \r\n    // 카테고리가 선택되어 있지 않거나 'ALL'이 선택된 경우, 카테고리를 제외 (newCategory가 \"\"일 때)\r\n    // 그렇지 않은 경우, 선택된 카테고리를 쿼리 파라미터에 추가\r\n    if (newCategory !== \"\") {\r\n      newSearchParams.set(\"cat\", newCategory);\r\n    }\r\n  \r\n    // 페이지 번호를 1로 설정하여 항상 첫 페이지에서 필터링 결과를 보여주도록 함\r\n    newSearchParams.set(\"page\", \"1\");\r\n  \r\n    // URL의 쿼리 파라미터를 업데이트\r\n    setSearchParams(newSearchParams);\r\n  };\r\n  \r\n//   // 카테고리 선택 처리\r\n//   const handleCategoryChange = (category) => {\r\n//     const isDeselecting = selectedCategory === category || category === \"ALL\";\r\n//     const newCategory = isDeselecting ? \"\" : category;\r\n//     setSelectedCategory(newCategory);\r\n\r\n//     if (newCategory === \"\") {\r\n//       setSearchParams(\r\n//         selectedTags.length > 0 ? { tags: selectedTags.join(\"&\") } : {}\r\n//       );\r\n//     } else {\r\n//       setSearchParams({ tags: selectedTags.join(\"&\"), cat: newCategory });\r\n//     }\r\n//   };\r\n\r\n  // // posts Data 필터링\r\n  // const filteredPosts = posts.filter((post) => {\r\n  //   const hasSelectedTags =\r\n  //     selectedTags.length === 0 ||\r\n  //     selectedTags.every((tag) => post.tags.includes(tag));\r\n  //   const hasSelectedCategory =\r\n  //     !selectedCategory || post.categories.includes(selectedCategory);\r\n  //   return hasSelectedTags && hasSelectedCategory;\r\n  // // });\r\n\r\n  // const uniqueTags = [...new Set(posts.flatMap((post) => post.tags))];\r\n  // const uniqueCategories = [...new Set(posts.map((post) => post.categories))];\r\n\r\n  if (loading) return <div>Loading...</div>;\r\n  if (error) return <div>Error: {error}</div>;\r\n\r\n\r\n\r\n  return (\r\n    <Wrapper>\r\n      <h1 onClick={resetFilters} style={{ cursor: \"pointer\" }}>\r\n        블로그 메인/리스트 페이지\r\n      </h1>\r\n\r\n      {/* 태그 렌더링 - 다중 선택 */}\r\n      <TagContainer>\r\n        {allTags.map((tag, tagIndex) => (\r\n          <Tags\r\n            key={tagIndex}\r\n            onClick={() => handleTagChange(tag)}\r\n            style={{ marginRight: \"10px\", cursor: \"pointer\", gap: \"10px\" }}\r\n          >\r\n            #{tag}\r\n            {selectedTags.includes(tag) ? \" (Selected)\" : \"\"}\r\n          </Tags>\r\n        ))}\r\n      </TagContainer>\r\n\r\n      {/* 카테고리 버튼 렌더링 */}\r\n      <CategoryContainer>\r\n        {allCategories.map((category, index) => (\r\n          <Tags\r\n            key={index}\r\n            onClick={() => handleCategoryChange(category)}\r\n            style={{ marginRight: \"10px\", cursor: \"pointer\", gap: \"10px\" }}\r\n          >\r\n            {selectedCategory === category\r\n              ? `${category} (Selected)`\r\n              : category}\r\n          </Tags>\r\n        ))}\r\n      </CategoryContainer>\r\n\r\n      {/* 포스트 목록 렌더링 및 각종 click 이동 이벤트 */}\r\n      <div>\r\n        {posts.map((post, index) => (\r\n          <div key={index}>\r\n            {/* 제목 클릭 시 포스트로 이동 */}\r\n            <h2\r\n              onClick={() => handlePostClick(post._id)}\r\n              style={{ cursor: \"pointer\" }}\r\n            >\r\n              {post.title}\r\n            </h2>\r\n\r\n            {/* 작성자, 프사, 날짜, 아웃라인 */}\r\n            <div\r\n              style={{\r\n                display: \"flex\",\r\n                alignItems: \"center\",\r\n                fontSize: \"16px\",\r\n                fontWeight: \"bold\",\r\n                color: \"gray\",\r\n              }}\r\n            >\r\n              <span>{post.author}</span>\r\n              <img\r\n                src={post.profileImagePath}\r\n                alt=\"Author's profile\"\r\n                style={{ width: \"30px\", height: \"30px\", borderRadius: \"50%\" }}\r\n              />\r\n              <span\r\n                style={{\r\n                  margin: \"0 10px\",\r\n                  fontWeight: \"bold\",\r\n                  color: \"lightgray\",\r\n                }}\r\n              >\r\n                {new Date(post.createdAt).toLocaleDateString()}\r\n              </span>\r\n            </div>\r\n\r\n            <h4>{post.outline}</h4>\r\n\r\n            {/* 태그 및 단일 필터링 */}\r\n            {post.tags.map((tag, tagIndex) => (\r\n              <Tags\r\n                key={tagIndex}\r\n                onClick={(event) => handleTagClick(tag, event)}\r\n                style={{ marginRight: \"10px\", cursor: \"pointer\", gap: \"10px\" }}\r\n              >\r\n                #{tag}\r\n              </Tags>\r\n            ))}\r\n          </div>\r\n        ))}\r\n      </div>\r\n      {/* 페이지네이션 컨트롤 */}\r\n      <PaginationContainer>\r\n        <Pagination\r\n          activePage={currentPage}\r\n          itemsCountPerPage={postsPerPage}\r\n          totalItemsCount={totalItemsCount}\r\n          pageRangeDisplayed={postsPerPage}\r\n          onChange={handlePageChange}\r\n          itemClass=\"page-item\"\r\n          linkClass=\"page-link\"\r\n        />\r\n      </PaginationContainer>\r\n    </Wrapper>\r\n  );\r\n};\r\n\r\nexport default BlogListPage;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}