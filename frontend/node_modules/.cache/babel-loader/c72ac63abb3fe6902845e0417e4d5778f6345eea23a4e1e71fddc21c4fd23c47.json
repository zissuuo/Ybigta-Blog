{"ast":null,"code":"var _jsxFileName = \"E:\\\\Documents\\\\2024-1 YBIGTA\\\\Ybigta_BLOG\\\\Ybigta-Blog\\\\frontend\\\\src\\\\components\\\\page\\\\BlogListPage.jsx\",\n  _s = $RefreshSig$();\nimport React from \"react\";\nimport { useEffect, useState } from \"react\";\nimport { useNavigate, useSearchParams } from \"react-router-dom\";\nimport styled, { createGlobalStyle } from \"styled-components\";\nimport Pagination from \"react-js-pagination\";\n\n// Styled Components\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Wrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  padding: 40px;\n`;\n_c = Wrapper;\nconst TagContainer = styled.div`\n  display: flex;\n  flex-direction: row;\n  flex-wrap: wrap;\n  align-items: center;\n  justify-content: center;\n  //width: 600px;\n  gap: 7px;\n`;\n_c2 = TagContainer;\nconst CategoryContainer = styled.div`\n  display: flex;\n  flex-direction: row;\n  flex-wrap: wrap;\n  align-items: center;\n  justify-content: center;\n  //width: 600px;\n  gap: 7px;\n`;\n_c3 = CategoryContainer;\nconst Tags = styled.span`\n  padding-top: 3px;\n  padding-bottom: 3px;\n  padding-right: 8px;\n  padding-left: 8px;\n  background-color: #ebebeb;\n  text-align: center;\n  font-size: 13px;\n  justify-content: center;\n  color: #666666;\n  border-radius: 5px;\n`;\n_c4 = Tags;\nconst PaginationContainer = styled.div`\n  .pagination {\n    display: flex;\n    list-style: none;\n    padding: 0;\n  }\n\n  .pagination li {\n    margin: 0 5px;\n  }\n\n  .pagination li a {\n    text-decoration: none;\n    color: black;\n    background-color: white;\n    padding: 8px 12px;\n    border-radius: 50%; /* 둥근 모양 */\n    transition: background-color 0.3s, color 0.3s;\n  }\n\n  .pagination li a:hover {\n    background-color: #f0f0f0; /* 호버 시 배경색 변경 */\n  }\n\n  .pagination li.active a {\n    background-color: #e0e0e0; /* 현재 페이지를 나타내는 회색 원 */\n    color: black;\n    border: none;\n    pointer-events: none;\n  }\n\n  .pagination li.disabled a {\n    color: #d3d3d3;\n  }\n`;\n\n// Main Page\n_c5 = PaginationContainer;\nconst BlogListPage = () => {\n  _s();\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [posts, setPosts] = useState([]);\n  const [currentPage, setCurrentPage] = useState(1); // 현재 1페이지에서 시작\n  const [postsPerPage, setPostsPerPage] = useState(5); // 한 페이지당 글 수\n  const [totalItemsCount, setTotalItemsCount] = useState(0); // 총 글 수\n\n  const [selectedTags, setSelectedTags] = useState([]);\n  const [selectedCategory, setSelectedCategory] = useState(\"\");\n  const [searchParams, setSearchParams] = useSearchParams();\n\n  // 페이지 이동\n  const navigate = useNavigate();\n\n  // 날짜 정렬\n  const sortPostsByDate = posts => {\n    return posts.sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt));\n  };\n\n  // 페이지네이션\n  useEffect(() => {\n    // 필터링 조건을 URLSearchParams 객체로 만듭니다.\n    const params = new URLSearchParams({\n      page: currentPage,\n      per_page: postsPerPage,\n      tags: selectedTags.join(\",\"),\n      cat: selectedCategory\n    }).toString();\n\n    // 초기 포스트 페이지 로딩\n    fetch(\"http://localhost:8000/posts/?${params}\").then(response => {\n      if (!response.ok) {\n        throw new Error(\"Failed to fetch posts\");\n      }\n      return response.json();\n    }).then(data => {\n      const sortedPosts = sortPostsByDate(data.items); // 받아온 데이터를 날짜 순으로 정렬\n      setPosts(sortedPosts);\n      setTotalItemsCount(data.totalPages); // 총 포스팅 수 \n      setCurrentPage(data.page); // 현재 페이지 업데이트\n    }).catch(error => {\n      setError(error.message);\n    }).finally(() => {\n      setLoading(false);\n    });\n  }, []);\n\n  // 페이지 변경 핸들러\n  const handlePageChange = pageNumber => {\n    setSearchParams({\n      ...Object.fromEntries(searchParams.entries()),\n      pageNumber\n    });\n  };\n\n  // 필터링 초기화\n  const resetFilters = () => {\n    setSelectedTags([]);\n    setSelectedCategory(\"\");\n    setSearchParams({});\n  };\n\n  // URL 쿼리 파라미터 값 변화에 따라 바로 렌더링하기\n  useEffect(() => {\n    // URL에서 tags와 cat 쿼리 파라미터 값 읽어오기\n    const tagsFromURL = searchParams.get(\"tags\");\n    const categoryFromURL = searchParams.get(\"cat\");\n\n    // 쿼리 파라미터가 없는 경우 빈 배열 또는 빈 문자열로 초기화\n    const tagsArray = tagsFromURL ? tagsFromURL.split(\"&\") : [];\n    const category = categoryFromURL ? categoryFromURL : \"\";\n\n    // 컴포넌트 상태를 URL의 쿼리 파라미터에 맞게 업데이트\n    setSelectedTags(tagsArray);\n    setSelectedCategory(category);\n  }, [searchParams]); // searchParams 변화 감지\n\n  // 글 제목 클릭 시 해당 글의 상세 페이지로 이동하는 함수\n  const handlePostClick = postId => {\n    navigate(`/posts/${postId}`);\n  };\n\n  // 태그 단일선택 처리 (공통사용)\n  const handleTagClick = (tag, event) => {\n    event.stopPropagation();\n    navigate(`/?tags=${tag}`);\n  };\n\n  // 태그 다중선택 처리\n  const handleTagChange = tag => {\n    const newSelectedTags = selectedTags.includes(tag) ? selectedTags.filter(t => t !== tag) : [...selectedTags, tag];\n    setSelectedTags(newSelectedTags);\n    setSearchParams({\n      tags: newSelectedTags.join(\"&\"),\n      cat: selectedCategory\n    });\n  };\n\n  // 카테고리 선택 처리\n  const handleCategoryChange = category => {\n    const isDeselecting = selectedCategory === category || category === \"ALL\";\n    const newCategory = isDeselecting ? \"\" : category;\n    setSelectedCategory(newCategory);\n    if (newCategory === \"\") {\n      setSearchParams(selectedTags.length > 0 ? {\n        tags: selectedTags.join(\"&\")\n      } : {});\n    } else {\n      setSearchParams({\n        tags: selectedTags.join(\"&\"),\n        cat: newCategory\n      });\n    }\n  };\n\n  // posts Data 필터링\n  const filteredPosts = posts.filter(post => {\n    const hasSelectedTags = selectedTags.length === 0 || selectedTags.every(tag => post.tags.includes(tag));\n    const hasSelectedCategory = !selectedCategory || post.categories.includes(selectedCategory);\n    return hasSelectedTags && hasSelectedCategory;\n  });\n  const uniqueTags = [...new Set(posts.flatMap(post => post.tags))];\n  const uniqueCategories = [...new Set(posts.map(post => post.categories))];\n  if (loading) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"Loading...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 214,\n    columnNumber: 23\n  }, this);\n  if (error) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [\"Error: \", error]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 215,\n    columnNumber: 21\n  }, this);\n  return /*#__PURE__*/_jsxDEV(Wrapper, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      onClick: resetFilters,\n      style: {\n        cursor: \"pointer\"\n      },\n      children: \"\\uBE14\\uB85C\\uADF8 \\uBA54\\uC778/\\uB9AC\\uC2A4\\uD2B8 \\uD398\\uC774\\uC9C0\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 221,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TagContainer, {\n      children: uniqueTags.map((tag, tagIndex) => /*#__PURE__*/_jsxDEV(Tags, {\n        onClick: () => handleTagChange(tag),\n        style: {\n          marginRight: \"10px\",\n          cursor: \"pointer\",\n          gap: \"10px\"\n        },\n        children: [\"#\", tag, selectedTags.includes(tag) ? \" (Selected)\" : \"\"]\n      }, tagIndex, true, {\n        fileName: _jsxFileName,\n        lineNumber: 228,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 226,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CategoryContainer, {\n      children: uniqueCategories.map((category, index) => /*#__PURE__*/_jsxDEV(Tags, {\n        onClick: () => handleCategoryChange(category),\n        style: {\n          marginRight: \"10px\",\n          cursor: \"pointer\",\n          gap: \"10px\"\n        },\n        children: selectedCategory === category ? `${category} (Selected)` : category\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 242,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 240,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: filteredPosts.map((post, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(PaginationContainer, {\n          children: /*#__PURE__*/_jsxDEV(Pagination, {\n            activePage: currentPage,\n            itemsCountPerPage: postsPerPage,\n            totalItemsCount: totalItemsCount,\n            pageRangeDisplayed: postsPerPage,\n            onChange: handlePageChange,\n            itemClass: \"page-item\",\n            linkClass: \"page-link\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 260,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 259,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n          onClick: () => handlePostClick(post._id),\n          style: {\n            cursor: \"pointer\"\n          },\n          children: post.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 271,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            display: \"flex\",\n            alignItems: \"center\",\n            fontSize: \"16px\",\n            fontWeight: \"bold\",\n            color: \"gray\"\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            children: post.author\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 288,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n            src: post.profileImagePath,\n            alt: \"Author's profile\",\n            style: {\n              width: \"30px\",\n              height: \"30px\",\n              borderRadius: \"50%\"\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 289,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            style: {\n              margin: \"0 10px\",\n              fontWeight: \"bold\",\n              color: \"lightgray\"\n            },\n            children: new Date(post.createdAt).toLocaleDateString()\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 294,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 279,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n          children: post.outline\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 305,\n          columnNumber: 13\n        }, this), post.tags.map((tag, tagIndex) => /*#__PURE__*/_jsxDEV(Tags, {\n          onClick: event => handleTagClick(tag, event),\n          style: {\n            marginRight: \"10px\",\n            cursor: \"pointer\",\n            gap: \"10px\"\n          },\n          children: [\"#\", tag]\n        }, tagIndex, true, {\n          fileName: _jsxFileName,\n          lineNumber: 309,\n          columnNumber: 15\n        }, this))]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 257,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 255,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 220,\n    columnNumber: 5\n  }, this);\n};\n_s(BlogListPage, \"OGuXXfSFH1VgD7eUg8oHFUqTbQI=\", false, function () {\n  return [useSearchParams, useNavigate];\n});\n_c6 = BlogListPage;\nexport default BlogListPage;\nvar _c, _c2, _c3, _c4, _c5, _c6;\n$RefreshReg$(_c, \"Wrapper\");\n$RefreshReg$(_c2, \"TagContainer\");\n$RefreshReg$(_c3, \"CategoryContainer\");\n$RefreshReg$(_c4, \"Tags\");\n$RefreshReg$(_c5, \"PaginationContainer\");\n$RefreshReg$(_c6, \"BlogListPage\");","map":{"version":3,"names":["React","useEffect","useState","useNavigate","useSearchParams","styled","createGlobalStyle","Pagination","jsxDEV","_jsxDEV","Wrapper","div","_c","TagContainer","_c2","CategoryContainer","_c3","Tags","span","_c4","PaginationContainer","_c5","BlogListPage","_s","loading","setLoading","error","setError","posts","setPosts","currentPage","setCurrentPage","postsPerPage","setPostsPerPage","totalItemsCount","setTotalItemsCount","selectedTags","setSelectedTags","selectedCategory","setSelectedCategory","searchParams","setSearchParams","navigate","sortPostsByDate","sort","a","b","Date","createdAt","params","URLSearchParams","page","per_page","tags","join","cat","toString","fetch","then","response","ok","Error","json","data","sortedPosts","items","totalPages","catch","message","finally","handlePageChange","pageNumber","Object","fromEntries","entries","resetFilters","tagsFromURL","get","categoryFromURL","tagsArray","split","category","handlePostClick","postId","handleTagClick","tag","event","stopPropagation","handleTagChange","newSelectedTags","includes","filter","t","handleCategoryChange","isDeselecting","newCategory","length","filteredPosts","post","hasSelectedTags","every","hasSelectedCategory","categories","uniqueTags","Set","flatMap","uniqueCategories","map","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","style","cursor","tagIndex","marginRight","gap","index","activePage","itemsCountPerPage","pageRangeDisplayed","onChange","itemClass","linkClass","_id","title","display","alignItems","fontSize","fontWeight","color","author","src","profileImagePath","alt","width","height","borderRadius","margin","toLocaleDateString","outline","_c6","$RefreshReg$"],"sources":["E:/Documents/2024-1 YBIGTA/Ybigta_BLOG/Ybigta-Blog/frontend/src/components/page/BlogListPage.jsx"],"sourcesContent":["import React from \"react\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { useNavigate, useSearchParams } from \"react-router-dom\";\r\nimport styled, { createGlobalStyle } from \"styled-components\";\r\nimport Pagination from \"react-js-pagination\"\r\n\r\n// Styled Components\r\nconst Wrapper = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  padding: 40px;\r\n`;\r\n\r\nconst TagContainer = styled.div`\r\n  display: flex;\r\n  flex-direction: row;\r\n  flex-wrap: wrap;\r\n  align-items: center;\r\n  justify-content: center;\r\n  //width: 600px;\r\n  gap: 7px;\r\n`;\r\n\r\nconst CategoryContainer = styled.div`\r\n  display: flex;\r\n  flex-direction: row;\r\n  flex-wrap: wrap;\r\n  align-items: center;\r\n  justify-content: center;\r\n  //width: 600px;\r\n  gap: 7px;\r\n`;\r\n\r\nconst Tags = styled.span`\r\n  padding-top: 3px;\r\n  padding-bottom: 3px;\r\n  padding-right: 8px;\r\n  padding-left: 8px;\r\n  background-color: #ebebeb;\r\n  text-align: center;\r\n  font-size: 13px;\r\n  justify-content: center;\r\n  color: #666666;\r\n  border-radius: 5px;\r\n`;\r\n\r\nconst PaginationContainer = styled.div`\r\n  .pagination {\r\n    display: flex;\r\n    list-style: none;\r\n    padding: 0;\r\n  }\r\n\r\n  .pagination li {\r\n    margin: 0 5px;\r\n  }\r\n\r\n  .pagination li a {\r\n    text-decoration: none;\r\n    color: black;\r\n    background-color: white;\r\n    padding: 8px 12px;\r\n    border-radius: 50%; /* 둥근 모양 */\r\n    transition: background-color 0.3s, color 0.3s;\r\n  }\r\n\r\n  .pagination li a:hover {\r\n    background-color: #f0f0f0; /* 호버 시 배경색 변경 */\r\n  }\r\n\r\n  .pagination li.active a {\r\n    background-color: #e0e0e0; /* 현재 페이지를 나타내는 회색 원 */\r\n    color: black;\r\n    border: none;\r\n    pointer-events: none;\r\n  }\r\n\r\n  .pagination li.disabled a {\r\n    color: #d3d3d3;\r\n  }\r\n`;\r\n\r\n\r\n// Main Page\r\nconst BlogListPage = () => {\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n\r\n  const [posts, setPosts] = useState([]);\r\n  const [currentPage, setCurrentPage] = useState(1); // 현재 1페이지에서 시작\r\n  const [postsPerPage, setPostsPerPage] = useState(5); // 한 페이지당 글 수\r\n  const [totalItemsCount, setTotalItemsCount] = useState(0); // 총 글 수\r\n\r\n  const [selectedTags, setSelectedTags] = useState([]);\r\n  const [selectedCategory, setSelectedCategory] = useState(\"\");\r\n  const [searchParams, setSearchParams] = useSearchParams();\r\n\r\n  // 페이지 이동\r\n  const navigate = useNavigate();\r\n\r\n  // 날짜 정렬\r\n  const sortPostsByDate = (posts) => {\r\n    return posts.sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt));\r\n  };\r\n\r\n  // 페이지네이션\r\n  useEffect(() => {\r\n    // 필터링 조건을 URLSearchParams 객체로 만듭니다.\r\n    const params = new URLSearchParams({\r\n      page: currentPage,\r\n      per_page: postsPerPage,\r\n      tags: selectedTags.join(\",\"),\r\n      cat: selectedCategory,\r\n    }).toString();\r\n\r\n    // 초기 포스트 페이지 로딩\r\n    fetch(\"http://localhost:8000/posts/?${params}\")\r\n      .then((response) => {\r\n        if (!response.ok) {\r\n          throw new Error(\"Failed to fetch posts\");\r\n        }\r\n        return response.json();\r\n      })\r\n      .then((data) => {\r\n        const sortedPosts = sortPostsByDate(data.items); // 받아온 데이터를 날짜 순으로 정렬\r\n        setPosts(sortedPosts);\r\n        setTotalItemsCount(data.totalPages); // 총 포스팅 수 \r\n        setCurrentPage(data.page); // 현재 페이지 업데이트\r\n      })\r\n      .catch((error) => {\r\n        setError(error.message);\r\n      })\r\n      .finally(() => {\r\n        setLoading(false);\r\n      });\r\n  }, []);\r\n\r\n  // 페이지 변경 핸들러\r\n  const handlePageChange = (pageNumber) => {\r\n    setSearchParams({ ...Object.fromEntries(searchParams.entries()), pageNumber });\r\n  };\r\n\r\n  \r\n  // 필터링 초기화\r\n  const resetFilters = () => {\r\n    setSelectedTags([]);\r\n    setSelectedCategory(\"\");\r\n    setSearchParams({});\r\n  };\r\n\r\n  // URL 쿼리 파라미터 값 변화에 따라 바로 렌더링하기\r\n  useEffect(() => {\r\n    // URL에서 tags와 cat 쿼리 파라미터 값 읽어오기\r\n    const tagsFromURL = searchParams.get(\"tags\");\r\n    const categoryFromURL = searchParams.get(\"cat\");\r\n\r\n    // 쿼리 파라미터가 없는 경우 빈 배열 또는 빈 문자열로 초기화\r\n    const tagsArray = tagsFromURL ? tagsFromURL.split(\"&\") : [];\r\n    const category = categoryFromURL ? categoryFromURL : \"\";\r\n\r\n    // 컴포넌트 상태를 URL의 쿼리 파라미터에 맞게 업데이트\r\n    setSelectedTags(tagsArray);\r\n    setSelectedCategory(category);\r\n  }, [searchParams]); // searchParams 변화 감지\r\n\r\n  // 글 제목 클릭 시 해당 글의 상세 페이지로 이동하는 함수\r\n  const handlePostClick = (postId) => {\r\n    navigate(`/posts/${postId}`);\r\n  };\r\n\r\n  // 태그 단일선택 처리 (공통사용)\r\n  const handleTagClick = (tag, event) => {\r\n    event.stopPropagation();\r\n    navigate(`/?tags=${tag}`);\r\n  };\r\n\r\n  // 태그 다중선택 처리\r\n  const handleTagChange = (tag) => {\r\n    const newSelectedTags = selectedTags.includes(tag)\r\n      ? selectedTags.filter((t) => t !== tag)\r\n      : [...selectedTags, tag];\r\n    setSelectedTags(newSelectedTags);\r\n    setSearchParams({ tags: newSelectedTags.join(\"&\"), cat: selectedCategory });\r\n  };\r\n\r\n  // 카테고리 선택 처리\r\n  const handleCategoryChange = (category) => {\r\n    const isDeselecting = selectedCategory === category || category === \"ALL\";\r\n    const newCategory = isDeselecting ? \"\" : category;\r\n    setSelectedCategory(newCategory);\r\n\r\n    if (newCategory === \"\") {\r\n      setSearchParams(\r\n        selectedTags.length > 0 ? { tags: selectedTags.join(\"&\") } : {}\r\n      );\r\n    } else {\r\n      setSearchParams({ tags: selectedTags.join(\"&\"), cat: newCategory });\r\n    }\r\n  };\r\n\r\n  // posts Data 필터링\r\n  const filteredPosts = posts.filter((post) => {\r\n    const hasSelectedTags =\r\n      selectedTags.length === 0 ||\r\n      selectedTags.every((tag) => post.tags.includes(tag));\r\n    const hasSelectedCategory =\r\n      !selectedCategory || post.categories.includes(selectedCategory);\r\n    return hasSelectedTags && hasSelectedCategory;\r\n  });\r\n\r\n  const uniqueTags = [...new Set(posts.flatMap((post) => post.tags))];\r\n  const uniqueCategories = [...new Set(posts.map((post) => post.categories))];\r\n\r\n  if (loading) return <div>Loading...</div>;\r\n  if (error) return <div>Error: {error}</div>;\r\n\r\n\r\n\r\n  return (\r\n    <Wrapper>\r\n      <h1 onClick={resetFilters} style={{ cursor: \"pointer\" }}>\r\n        블로그 메인/리스트 페이지\r\n      </h1>\r\n\r\n      {/* 태그 렌더링 - 다중 선택 */}\r\n      <TagContainer>\r\n        {uniqueTags.map((tag, tagIndex) => (\r\n          <Tags\r\n            key={tagIndex}\r\n            onClick={() => handleTagChange(tag)}\r\n            style={{ marginRight: \"10px\", cursor: \"pointer\", gap: \"10px\" }}\r\n          >\r\n            #{tag}\r\n            {selectedTags.includes(tag) ? \" (Selected)\" : \"\"}\r\n          </Tags>\r\n        ))}\r\n      </TagContainer>\r\n\r\n      {/* 카테고리 버튼 렌더링 */}\r\n      <CategoryContainer>\r\n        {uniqueCategories.map((category, index) => (\r\n          <Tags\r\n            key={index}\r\n            onClick={() => handleCategoryChange(category)}\r\n            style={{ marginRight: \"10px\", cursor: \"pointer\", gap: \"10px\" }}\r\n          >\r\n            {selectedCategory === category\r\n              ? `${category} (Selected)`\r\n              : category}\r\n          </Tags>\r\n        ))}\r\n      </CategoryContainer>\r\n\r\n      {/* 포스트 목록 렌더링 및 각종 click 이동 이벤트 */}\r\n      <div>\r\n        {filteredPosts.map((post, index) => (\r\n          <div key={index}>\r\n            {/* 페이지네이션 컨트롤 */}\r\n            <PaginationContainer>\r\n              <Pagination\r\n                activePage={currentPage}\r\n                itemsCountPerPage={postsPerPage}\r\n                totalItemsCount={totalItemsCount}\r\n                pageRangeDisplayed={postsPerPage}\r\n                onChange={handlePageChange}\r\n                itemClass=\"page-item\"\r\n                linkClass=\"page-link\"\r\n              />\r\n            </PaginationContainer>\r\n            {/* 제목 클릭 시 포스트로 이동 */}\r\n            <h2\r\n              onClick={() => handlePostClick(post._id)}\r\n              style={{ cursor: \"pointer\" }}\r\n            >\r\n              {post.title}\r\n            </h2>\r\n\r\n            {/* 작성자, 프사, 날짜, 아웃라인 */}\r\n            <div\r\n              style={{\r\n                display: \"flex\",\r\n                alignItems: \"center\",\r\n                fontSize: \"16px\",\r\n                fontWeight: \"bold\",\r\n                color: \"gray\",\r\n              }}\r\n            >\r\n              <span>{post.author}</span>\r\n              <img\r\n                src={post.profileImagePath}\r\n                alt=\"Author's profile\"\r\n                style={{ width: \"30px\", height: \"30px\", borderRadius: \"50%\" }}\r\n              />\r\n              <span\r\n                style={{\r\n                  margin: \"0 10px\",\r\n                  fontWeight: \"bold\",\r\n                  color: \"lightgray\",\r\n                }}\r\n              >\r\n                {new Date(post.createdAt).toLocaleDateString()}\r\n              </span>\r\n            </div>\r\n\r\n            <h4>{post.outline}</h4>\r\n\r\n            {/* 태그 및 단일 필터링 */}\r\n            {post.tags.map((tag, tagIndex) => (\r\n              <Tags\r\n                key={tagIndex}\r\n                onClick={(event) => handleTagClick(tag, event)}\r\n                style={{ marginRight: \"10px\", cursor: \"pointer\", gap: \"10px\" }}\r\n              >\r\n                #{tag}\r\n              </Tags>\r\n            ))}\r\n          </div>\r\n        ))}\r\n      </div>\r\n    </Wrapper>\r\n  );\r\n};\r\n\r\nexport default BlogListPage;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}