{"ast":null,"code":"/**\r\n * @typedef {import('mdast').Link} Link\r\n * @typedef {import('../types.js').State} State\r\n */\n\nimport { toString } from 'mdast-util-to-string';\n\n/**\r\n * @param {Link} node\r\n * @param {State} state\r\n * @returns {boolean}\r\n */\nexport function formatLinkAsAutolink(node, state) {\n  const raw = toString(node);\n  return Boolean(!state.options.resourceLink &&\n  // If there’s a url…\n  node.url &&\n  // And there’s a no title…\n  !node.title &&\n  // And the content of `node` is a single text node…\n  node.children && node.children.length === 1 && node.children[0].type === 'text' && (\n  // And if the url is the same as the content…\n  raw === node.url || 'mailto:' + raw === node.url) &&\n  // And that starts w/ a protocol…\n  /^[a-z][a-z+.-]+:/i.test(node.url) &&\n  // And that doesn’t contain ASCII control codes (character escapes and\n  // references don’t work), space, or angle brackets…\n  !/[\\0- <>\\u007F]/.test(node.url));\n}","map":{"version":3,"names":["toString","formatLinkAsAutolink","node","state","raw","Boolean","options","resourceLink","url","title","children","length","type","test"],"sources":["C:/Users/rjalr/OneDrive/바탕 화면/ybigta/ybigta_blog_2/Ybigta-Blog/frontend/node_modules/mdast-util-to-markdown/lib/util/format-link-as-autolink.js"],"sourcesContent":["/**\r\n * @typedef {import('mdast').Link} Link\r\n * @typedef {import('../types.js').State} State\r\n */\r\n\r\nimport {toString} from 'mdast-util-to-string'\r\n\r\n/**\r\n * @param {Link} node\r\n * @param {State} state\r\n * @returns {boolean}\r\n */\r\nexport function formatLinkAsAutolink(node, state) {\r\n  const raw = toString(node)\r\n\r\n  return Boolean(\r\n    !state.options.resourceLink &&\r\n      // If there’s a url…\r\n      node.url &&\r\n      // And there’s a no title…\r\n      !node.title &&\r\n      // And the content of `node` is a single text node…\r\n      node.children &&\r\n      node.children.length === 1 &&\r\n      node.children[0].type === 'text' &&\r\n      // And if the url is the same as the content…\r\n      (raw === node.url || 'mailto:' + raw === node.url) &&\r\n      // And that starts w/ a protocol…\r\n      /^[a-z][a-z+.-]+:/i.test(node.url) &&\r\n      // And that doesn’t contain ASCII control codes (character escapes and\r\n      // references don’t work), space, or angle brackets…\r\n      !/[\\0- <>\\u007F]/.test(node.url)\r\n  )\r\n}\r\n"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA,SAAQA,QAAQ,QAAO,sBAAsB;;AAE7C;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,oBAAoBA,CAACC,IAAI,EAAEC,KAAK,EAAE;EAChD,MAAMC,GAAG,GAAGJ,QAAQ,CAACE,IAAI,CAAC;EAE1B,OAAOG,OAAO,CACZ,CAACF,KAAK,CAACG,OAAO,CAACC,YAAY;EACzB;EACAL,IAAI,CAACM,GAAG;EACR;EACA,CAACN,IAAI,CAACO,KAAK;EACX;EACAP,IAAI,CAACQ,QAAQ,IACbR,IAAI,CAACQ,QAAQ,CAACC,MAAM,KAAK,CAAC,IAC1BT,IAAI,CAACQ,QAAQ,CAAC,CAAC,CAAC,CAACE,IAAI,KAAK,MAAM;EAChC;EACCR,GAAG,KAAKF,IAAI,CAACM,GAAG,IAAI,SAAS,GAAGJ,GAAG,KAAKF,IAAI,CAACM,GAAG,CAAC;EAClD;EACA,mBAAmB,CAACK,IAAI,CAACX,IAAI,CAACM,GAAG,CAAC;EAClC;EACA;EACA,CAAC,gBAAgB,CAACK,IAAI,CAACX,IAAI,CAACM,GAAG,CACnC,CAAC;AACH","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}