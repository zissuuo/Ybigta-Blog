{"ast":null,"code":"/**\r\n * @typedef {import('micromark-util-types').Code} Code\r\n */\n\nimport { codes } from 'micromark-util-symbol';\n\n/**\r\n * Check whether the character code represents an ASCII alpha (`a` through `z`,\r\n * case insensitive).\r\n *\r\n * An **ASCII alpha** is an ASCII upper alpha or ASCII lower alpha.\r\n *\r\n * An **ASCII upper alpha** is a character in the inclusive range U+0041 (`A`)\r\n * to U+005A (`Z`).\r\n *\r\n * An **ASCII lower alpha** is a character in the inclusive range U+0061 (`a`)\r\n * to U+007A (`z`).\r\n *\r\n * @param code\r\n *   Code.\r\n * @returns {boolean}\r\n *   Whether it matches.\r\n */\nexport const asciiAlpha = regexCheck(/[A-Za-z]/);\n\n/**\r\n * Check whether the character code represents an ASCII alphanumeric (`a`\r\n * through `z`, case insensitive, or `0` through `9`).\r\n *\r\n * An **ASCII alphanumeric** is an ASCII digit (see `asciiDigit`) or ASCII alpha\r\n * (see `asciiAlpha`).\r\n *\r\n * @param code\r\n *   Code.\r\n * @returns {boolean}\r\n *   Whether it matches.\r\n */\nexport const asciiAlphanumeric = regexCheck(/[\\dA-Za-z]/);\n\n/**\r\n * Check whether the character code represents an ASCII atext.\r\n *\r\n * atext is an ASCII alphanumeric (see `asciiAlphanumeric`), or a character in\r\n * the inclusive ranges U+0023 NUMBER SIGN (`#`) to U+0027 APOSTROPHE (`'`),\r\n * U+002A ASTERISK (`*`), U+002B PLUS SIGN (`+`), U+002D DASH (`-`), U+002F\r\n * SLASH (`/`), U+003D EQUALS TO (`=`), U+003F QUESTION MARK (`?`), U+005E\r\n * CARET (`^`) to U+0060 GRAVE ACCENT (`` ` ``), or U+007B LEFT CURLY BRACE\r\n * (`{`) to U+007E TILDE (`~`).\r\n *\r\n * See:\r\n * **\\[RFC5322]**:\r\n * [Internet Message Format](https://tools.ietf.org/html/rfc5322).\r\n * P. Resnick.\r\n * IETF.\r\n *\r\n * @param code\r\n *   Code.\r\n * @returns {boolean}\r\n *   Whether it matches.\r\n */\nexport const asciiAtext = regexCheck(/[#-'*+\\--9=?A-Z^-~]/);\n\n/**\r\n * Check whether a character code is an ASCII control character.\r\n *\r\n * An **ASCII control** is a character in the inclusive range U+0000 NULL (NUL)\r\n * to U+001F (US), or U+007F (DEL).\r\n *\r\n * @param {Code} code\r\n *   Code.\r\n * @returns {boolean}\r\n *   Whether it matches.\r\n */\nexport function asciiControl(code) {\n  return (\n    // Special whitespace codes (which have negative values), C0 and Control\n    // character DEL\n    code !== null && (code < codes.space || code === codes.del)\n  );\n}\n\n/**\r\n * Check whether the character code represents an ASCII digit (`0` through `9`).\r\n *\r\n * An **ASCII digit** is a character in the inclusive range U+0030 (`0`) to\r\n * U+0039 (`9`).\r\n *\r\n * @param code\r\n *   Code.\r\n * @returns {boolean}\r\n *   Whether it matches.\r\n */\nexport const asciiDigit = regexCheck(/\\d/);\n\n/**\r\n * Check whether the character code represents an ASCII hex digit (`a` through\r\n * `f`, case insensitive, or `0` through `9`).\r\n *\r\n * An **ASCII hex digit** is an ASCII digit (see `asciiDigit`), ASCII upper hex\r\n * digit, or an ASCII lower hex digit.\r\n *\r\n * An **ASCII upper hex digit** is a character in the inclusive range U+0041\r\n * (`A`) to U+0046 (`F`).\r\n *\r\n * An **ASCII lower hex digit** is a character in the inclusive range U+0061\r\n * (`a`) to U+0066 (`f`).\r\n *\r\n * @param code\r\n *   Code.\r\n * @returns {boolean}\r\n *   Whether it matches.\r\n */\nexport const asciiHexDigit = regexCheck(/[\\dA-Fa-f]/);\n\n/**\r\n * Check whether the character code represents ASCII punctuation.\r\n *\r\n * An **ASCII punctuation** is a character in the inclusive ranges U+0021\r\n * EXCLAMATION MARK (`!`) to U+002F SLASH (`/`), U+003A COLON (`:`) to U+0040 AT\r\n * SIGN (`@`), U+005B LEFT SQUARE BRACKET (`[`) to U+0060 GRAVE ACCENT\r\n * (`` ` ``), or U+007B LEFT CURLY BRACE (`{`) to U+007E TILDE (`~`).\r\n *\r\n * @param code\r\n *   Code.\r\n * @returns {boolean}\r\n *   Whether it matches.\r\n */\nexport const asciiPunctuation = regexCheck(/[!-/:-@[-`{-~]/);\n\n/**\r\n * Check whether a character code is a markdown line ending.\r\n *\r\n * A **markdown line ending** is the virtual characters M-0003 CARRIAGE RETURN\r\n * LINE FEED (CRLF), M-0004 LINE FEED (LF) and M-0005 CARRIAGE RETURN (CR).\r\n *\r\n * In micromark, the actual character U+000A LINE FEED (LF) and U+000D CARRIAGE\r\n * RETURN (CR) are replaced by these virtual characters depending on whether\r\n * they occurred together.\r\n *\r\n * @param {Code} code\r\n *   Code.\r\n * @returns {boolean}\r\n *   Whether it matches.\r\n */\nexport function markdownLineEnding(code) {\n  return code !== null && code < codes.horizontalTab;\n}\n\n/**\r\n * Check whether a character code is a markdown line ending (see\r\n * `markdownLineEnding`) or markdown space (see `markdownSpace`).\r\n *\r\n * @param {Code} code\r\n *   Code.\r\n * @returns {boolean}\r\n *   Whether it matches.\r\n */\nexport function markdownLineEndingOrSpace(code) {\n  return code !== null && (code < codes.nul || code === codes.space);\n}\n\n/**\r\n * Check whether a character code is a markdown space.\r\n *\r\n * A **markdown space** is the concrete character U+0020 SPACE (SP) and the\r\n * virtual characters M-0001 VIRTUAL SPACE (VS) and M-0002 HORIZONTAL TAB (HT).\r\n *\r\n * In micromark, the actual character U+0009 CHARACTER TABULATION (HT) is\r\n * replaced by one M-0002 HORIZONTAL TAB (HT) and between 0 and 3 M-0001 VIRTUAL\r\n * SPACE (VS) characters, depending on the column at which the tab occurred.\r\n *\r\n * @param {Code} code\r\n *   Code.\r\n * @returns {boolean}\r\n *   Whether it matches.\r\n */\nexport function markdownSpace(code) {\n  return code === codes.horizontalTab || code === codes.virtualSpace || code === codes.space;\n}\n\n// Size note: removing ASCII from the regex and using `asciiPunctuation` here\n// In fact adds to the bundle size.\n/**\r\n * Check whether the character code represents Unicode punctuation.\r\n *\r\n * A **Unicode punctuation** is a character in the Unicode `Pc` (Punctuation,\r\n * Connector), `Pd` (Punctuation, Dash), `Pe` (Punctuation, Close), `Pf`\r\n * (Punctuation, Final quote), `Pi` (Punctuation, Initial quote), `Po`\r\n * (Punctuation, Other), or `Ps` (Punctuation, Open) categories, or an ASCII\r\n * punctuation (see `asciiPunctuation`).\r\n *\r\n * See:\r\n * **\\[UNICODE]**:\r\n * [The Unicode Standard](https://www.unicode.org/versions/).\r\n * Unicode Consortium.\r\n *\r\n * @param code\r\n *   Code.\r\n * @returns\r\n *   Whether it matches.\r\n */\nexport const unicodePunctuation = regexCheck(/\\p{P}|\\p{S}/u);\n\n/**\r\n * Check whether the character code represents Unicode whitespace.\r\n *\r\n * Note that this does handle micromark specific markdown whitespace characters.\r\n * See `markdownLineEndingOrSpace` to check that.\r\n *\r\n * A **Unicode whitespace** is a character in the Unicode `Zs` (Separator,\r\n * Space) category, or U+0009 CHARACTER TABULATION (HT), U+000A LINE FEED (LF),\r\n * U+000C (FF), or U+000D CARRIAGE RETURN (CR) (**\\[UNICODE]**).\r\n *\r\n * See:\r\n * **\\[UNICODE]**:\r\n * [The Unicode Standard](https://www.unicode.org/versions/).\r\n * Unicode Consortium.\r\n *\r\n * @param code\r\n *   Code.\r\n * @returns\r\n *   Whether it matches.\r\n */\nexport const unicodeWhitespace = regexCheck(/\\s/);\n\n/**\r\n * Create a code check from a regex.\r\n *\r\n * @param {RegExp} regex\r\n * @returns {(code: Code) => boolean}\r\n */\nfunction regexCheck(regex) {\n  return check;\n\n  /**\r\n   * Check whether a code matches the bound regex.\r\n   *\r\n   * @param {Code} code\r\n   *   Character code.\r\n   * @returns {boolean}\r\n   *   Whether the character code matches the bound regex.\r\n   */\n  function check(code) {\n    return code !== null && code > -1 && regex.test(String.fromCharCode(code));\n  }\n}","map":{"version":3,"names":["codes","asciiAlpha","regexCheck","asciiAlphanumeric","asciiAtext","asciiControl","code","space","del","asciiDigit","asciiHexDigit","asciiPunctuation","markdownLineEnding","horizontalTab","markdownLineEndingOrSpace","nul","markdownSpace","virtualSpace","unicodePunctuation","unicodeWhitespace","regex","check","test","String","fromCharCode"],"sources":["E:/Documents/2024-1 YBIGTA/Ybigta_BLOG/blog_git/Ybigta-Blog/frontend/node_modules/micromark-util-character/dev/index.js"],"sourcesContent":["/**\r\n * @typedef {import('micromark-util-types').Code} Code\r\n */\r\n\r\nimport {codes} from 'micromark-util-symbol'\r\n\r\n/**\r\n * Check whether the character code represents an ASCII alpha (`a` through `z`,\r\n * case insensitive).\r\n *\r\n * An **ASCII alpha** is an ASCII upper alpha or ASCII lower alpha.\r\n *\r\n * An **ASCII upper alpha** is a character in the inclusive range U+0041 (`A`)\r\n * to U+005A (`Z`).\r\n *\r\n * An **ASCII lower alpha** is a character in the inclusive range U+0061 (`a`)\r\n * to U+007A (`z`).\r\n *\r\n * @param code\r\n *   Code.\r\n * @returns {boolean}\r\n *   Whether it matches.\r\n */\r\nexport const asciiAlpha = regexCheck(/[A-Za-z]/)\r\n\r\n/**\r\n * Check whether the character code represents an ASCII alphanumeric (`a`\r\n * through `z`, case insensitive, or `0` through `9`).\r\n *\r\n * An **ASCII alphanumeric** is an ASCII digit (see `asciiDigit`) or ASCII alpha\r\n * (see `asciiAlpha`).\r\n *\r\n * @param code\r\n *   Code.\r\n * @returns {boolean}\r\n *   Whether it matches.\r\n */\r\nexport const asciiAlphanumeric = regexCheck(/[\\dA-Za-z]/)\r\n\r\n/**\r\n * Check whether the character code represents an ASCII atext.\r\n *\r\n * atext is an ASCII alphanumeric (see `asciiAlphanumeric`), or a character in\r\n * the inclusive ranges U+0023 NUMBER SIGN (`#`) to U+0027 APOSTROPHE (`'`),\r\n * U+002A ASTERISK (`*`), U+002B PLUS SIGN (`+`), U+002D DASH (`-`), U+002F\r\n * SLASH (`/`), U+003D EQUALS TO (`=`), U+003F QUESTION MARK (`?`), U+005E\r\n * CARET (`^`) to U+0060 GRAVE ACCENT (`` ` ``), or U+007B LEFT CURLY BRACE\r\n * (`{`) to U+007E TILDE (`~`).\r\n *\r\n * See:\r\n * **\\[RFC5322]**:\r\n * [Internet Message Format](https://tools.ietf.org/html/rfc5322).\r\n * P. Resnick.\r\n * IETF.\r\n *\r\n * @param code\r\n *   Code.\r\n * @returns {boolean}\r\n *   Whether it matches.\r\n */\r\nexport const asciiAtext = regexCheck(/[#-'*+\\--9=?A-Z^-~]/)\r\n\r\n/**\r\n * Check whether a character code is an ASCII control character.\r\n *\r\n * An **ASCII control** is a character in the inclusive range U+0000 NULL (NUL)\r\n * to U+001F (US), or U+007F (DEL).\r\n *\r\n * @param {Code} code\r\n *   Code.\r\n * @returns {boolean}\r\n *   Whether it matches.\r\n */\r\nexport function asciiControl(code) {\r\n  return (\r\n    // Special whitespace codes (which have negative values), C0 and Control\r\n    // character DEL\r\n    code !== null && (code < codes.space || code === codes.del)\r\n  )\r\n}\r\n\r\n/**\r\n * Check whether the character code represents an ASCII digit (`0` through `9`).\r\n *\r\n * An **ASCII digit** is a character in the inclusive range U+0030 (`0`) to\r\n * U+0039 (`9`).\r\n *\r\n * @param code\r\n *   Code.\r\n * @returns {boolean}\r\n *   Whether it matches.\r\n */\r\nexport const asciiDigit = regexCheck(/\\d/)\r\n\r\n/**\r\n * Check whether the character code represents an ASCII hex digit (`a` through\r\n * `f`, case insensitive, or `0` through `9`).\r\n *\r\n * An **ASCII hex digit** is an ASCII digit (see `asciiDigit`), ASCII upper hex\r\n * digit, or an ASCII lower hex digit.\r\n *\r\n * An **ASCII upper hex digit** is a character in the inclusive range U+0041\r\n * (`A`) to U+0046 (`F`).\r\n *\r\n * An **ASCII lower hex digit** is a character in the inclusive range U+0061\r\n * (`a`) to U+0066 (`f`).\r\n *\r\n * @param code\r\n *   Code.\r\n * @returns {boolean}\r\n *   Whether it matches.\r\n */\r\nexport const asciiHexDigit = regexCheck(/[\\dA-Fa-f]/)\r\n\r\n/**\r\n * Check whether the character code represents ASCII punctuation.\r\n *\r\n * An **ASCII punctuation** is a character in the inclusive ranges U+0021\r\n * EXCLAMATION MARK (`!`) to U+002F SLASH (`/`), U+003A COLON (`:`) to U+0040 AT\r\n * SIGN (`@`), U+005B LEFT SQUARE BRACKET (`[`) to U+0060 GRAVE ACCENT\r\n * (`` ` ``), or U+007B LEFT CURLY BRACE (`{`) to U+007E TILDE (`~`).\r\n *\r\n * @param code\r\n *   Code.\r\n * @returns {boolean}\r\n *   Whether it matches.\r\n */\r\nexport const asciiPunctuation = regexCheck(/[!-/:-@[-`{-~]/)\r\n\r\n/**\r\n * Check whether a character code is a markdown line ending.\r\n *\r\n * A **markdown line ending** is the virtual characters M-0003 CARRIAGE RETURN\r\n * LINE FEED (CRLF), M-0004 LINE FEED (LF) and M-0005 CARRIAGE RETURN (CR).\r\n *\r\n * In micromark, the actual character U+000A LINE FEED (LF) and U+000D CARRIAGE\r\n * RETURN (CR) are replaced by these virtual characters depending on whether\r\n * they occurred together.\r\n *\r\n * @param {Code} code\r\n *   Code.\r\n * @returns {boolean}\r\n *   Whether it matches.\r\n */\r\nexport function markdownLineEnding(code) {\r\n  return code !== null && code < codes.horizontalTab\r\n}\r\n\r\n/**\r\n * Check whether a character code is a markdown line ending (see\r\n * `markdownLineEnding`) or markdown space (see `markdownSpace`).\r\n *\r\n * @param {Code} code\r\n *   Code.\r\n * @returns {boolean}\r\n *   Whether it matches.\r\n */\r\nexport function markdownLineEndingOrSpace(code) {\r\n  return code !== null && (code < codes.nul || code === codes.space)\r\n}\r\n\r\n/**\r\n * Check whether a character code is a markdown space.\r\n *\r\n * A **markdown space** is the concrete character U+0020 SPACE (SP) and the\r\n * virtual characters M-0001 VIRTUAL SPACE (VS) and M-0002 HORIZONTAL TAB (HT).\r\n *\r\n * In micromark, the actual character U+0009 CHARACTER TABULATION (HT) is\r\n * replaced by one M-0002 HORIZONTAL TAB (HT) and between 0 and 3 M-0001 VIRTUAL\r\n * SPACE (VS) characters, depending on the column at which the tab occurred.\r\n *\r\n * @param {Code} code\r\n *   Code.\r\n * @returns {boolean}\r\n *   Whether it matches.\r\n */\r\nexport function markdownSpace(code) {\r\n  return (\r\n    code === codes.horizontalTab ||\r\n    code === codes.virtualSpace ||\r\n    code === codes.space\r\n  )\r\n}\r\n\r\n// Size note: removing ASCII from the regex and using `asciiPunctuation` here\r\n// In fact adds to the bundle size.\r\n/**\r\n * Check whether the character code represents Unicode punctuation.\r\n *\r\n * A **Unicode punctuation** is a character in the Unicode `Pc` (Punctuation,\r\n * Connector), `Pd` (Punctuation, Dash), `Pe` (Punctuation, Close), `Pf`\r\n * (Punctuation, Final quote), `Pi` (Punctuation, Initial quote), `Po`\r\n * (Punctuation, Other), or `Ps` (Punctuation, Open) categories, or an ASCII\r\n * punctuation (see `asciiPunctuation`).\r\n *\r\n * See:\r\n * **\\[UNICODE]**:\r\n * [The Unicode Standard](https://www.unicode.org/versions/).\r\n * Unicode Consortium.\r\n *\r\n * @param code\r\n *   Code.\r\n * @returns\r\n *   Whether it matches.\r\n */\r\nexport const unicodePunctuation = regexCheck(/\\p{P}|\\p{S}/u)\r\n\r\n/**\r\n * Check whether the character code represents Unicode whitespace.\r\n *\r\n * Note that this does handle micromark specific markdown whitespace characters.\r\n * See `markdownLineEndingOrSpace` to check that.\r\n *\r\n * A **Unicode whitespace** is a character in the Unicode `Zs` (Separator,\r\n * Space) category, or U+0009 CHARACTER TABULATION (HT), U+000A LINE FEED (LF),\r\n * U+000C (FF), or U+000D CARRIAGE RETURN (CR) (**\\[UNICODE]**).\r\n *\r\n * See:\r\n * **\\[UNICODE]**:\r\n * [The Unicode Standard](https://www.unicode.org/versions/).\r\n * Unicode Consortium.\r\n *\r\n * @param code\r\n *   Code.\r\n * @returns\r\n *   Whether it matches.\r\n */\r\nexport const unicodeWhitespace = regexCheck(/\\s/)\r\n\r\n/**\r\n * Create a code check from a regex.\r\n *\r\n * @param {RegExp} regex\r\n * @returns {(code: Code) => boolean}\r\n */\r\nfunction regexCheck(regex) {\r\n  return check\r\n\r\n  /**\r\n   * Check whether a code matches the bound regex.\r\n   *\r\n   * @param {Code} code\r\n   *   Character code.\r\n   * @returns {boolean}\r\n   *   Whether the character code matches the bound regex.\r\n   */\r\n  function check(code) {\r\n    return code !== null && code > -1 && regex.test(String.fromCharCode(code))\r\n  }\r\n}\r\n"],"mappings":"AAAA;AACA;AACA;;AAEA,SAAQA,KAAK,QAAO,uBAAuB;;AAE3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,UAAU,GAAGC,UAAU,CAAC,UAAU,CAAC;;AAEhD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,iBAAiB,GAAGD,UAAU,CAAC,YAAY,CAAC;;AAEzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAME,UAAU,GAAGF,UAAU,CAAC,qBAAqB,CAAC;;AAE3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASG,YAAYA,CAACC,IAAI,EAAE;EACjC;IACE;IACA;IACAA,IAAI,KAAK,IAAI,KAAKA,IAAI,GAAGN,KAAK,CAACO,KAAK,IAAID,IAAI,KAAKN,KAAK,CAACQ,GAAG;EAAC;AAE/D;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,UAAU,GAAGP,UAAU,CAAC,IAAI,CAAC;;AAE1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMQ,aAAa,GAAGR,UAAU,CAAC,YAAY,CAAC;;AAErD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMS,gBAAgB,GAAGT,UAAU,CAAC,gBAAgB,CAAC;;AAE5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASU,kBAAkBA,CAACN,IAAI,EAAE;EACvC,OAAOA,IAAI,KAAK,IAAI,IAAIA,IAAI,GAAGN,KAAK,CAACa,aAAa;AACpD;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,yBAAyBA,CAACR,IAAI,EAAE;EAC9C,OAAOA,IAAI,KAAK,IAAI,KAAKA,IAAI,GAAGN,KAAK,CAACe,GAAG,IAAIT,IAAI,KAAKN,KAAK,CAACO,KAAK,CAAC;AACpE;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASS,aAAaA,CAACV,IAAI,EAAE;EAClC,OACEA,IAAI,KAAKN,KAAK,CAACa,aAAa,IAC5BP,IAAI,KAAKN,KAAK,CAACiB,YAAY,IAC3BX,IAAI,KAAKN,KAAK,CAACO,KAAK;AAExB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMW,kBAAkB,GAAGhB,UAAU,CAAC,cAAc,CAAC;;AAE5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMiB,iBAAiB,GAAGjB,UAAU,CAAC,IAAI,CAAC;;AAEjD;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,UAAUA,CAACkB,KAAK,EAAE;EACzB,OAAOC,KAAK;;EAEZ;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EACE,SAASA,KAAKA,CAACf,IAAI,EAAE;IACnB,OAAOA,IAAI,KAAK,IAAI,IAAIA,IAAI,GAAG,CAAC,CAAC,IAAIc,KAAK,CAACE,IAAI,CAACC,MAAM,CAACC,YAAY,CAAClB,IAAI,CAAC,CAAC;EAC5E;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}