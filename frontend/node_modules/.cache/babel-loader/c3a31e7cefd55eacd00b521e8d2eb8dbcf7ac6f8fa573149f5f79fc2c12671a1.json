{"ast":null,"code":"var _jsxFileName = \"/Users/kimjisu/Desktop/ybigblog/frontend/src/components/page/ContentPage.jsx\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport styled, { createGlobalStyle } from 'styled-components';\nimport { useEffect, useState } from 'react';\nimport ReactMarkdown from 'react-markdown';\nimport remarkGfm from 'remark-gfm';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Wrapper = styled.div`\n    display: flex;\n    flex-direction: column;\n    padding-top: 40px;\n`;\nconst ContentPage = () => {\n  _s();\n  const [posts, setPosts] = useState([]); // 서버로부터 받은 포스트들을 저장할 상태\n\n  useEffect(() => {\n    // 서버로부터 포스트 데이터를 가져옵니다.\n    fetch('http://localhost:8000/posts') // 이 URL은 예시이며, 실제 서버의 URL을 사용해야 합니다.\n    .then(response => response.json()).then(data => setPosts(data)).catch(error => console.log(error));\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"\\uD3EC\\uC2A4\\uD2B8 \\uB0B4\\uC6A9 \\uD398\\uC774\\uC9C0\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 9\n    }, this), posts.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: posts[0].title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: posts[0].tags[0]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(ReactMarkdown, {\n        remarkPlugins: [remarkGfm],\n        children: posts[0].content\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 11\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 7\n  }, this);\n};\n_s(ContentPage, \"bG8V4duoIfO0BEPgauWMVT5Qvyw=\");\n_c = ContentPage;\nexport default ContentPage;\nvar _c;\n$RefreshReg$(_c, \"ContentPage\");","map":{"version":3,"names":["React","useNavigate","styled","createGlobalStyle","useEffect","useState","ReactMarkdown","remarkGfm","jsxDEV","_jsxDEV","Wrapper","div","ContentPage","_s","posts","setPosts","fetch","then","response","json","data","catch","error","console","log","children","fileName","_jsxFileName","lineNumber","columnNumber","length","title","tags","remarkPlugins","content","_c","$RefreshReg$"],"sources":["/Users/kimjisu/Desktop/ybigblog/frontend/src/components/page/ContentPage.jsx"],"sourcesContent":["import React from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport styled, { createGlobalStyle } from 'styled-components';\nimport { useEffect, useState } from 'react';\nimport ReactMarkdown from 'react-markdown';\nimport remarkGfm from 'remark-gfm';\n\n\nconst Wrapper = styled.div`\n    display: flex;\n    flex-direction: column;\n    padding-top: 40px;\n`;\n\n\nconst ContentPage = () => {\n\n    const [posts, setPosts] = useState([]); // 서버로부터 받은 포스트들을 저장할 상태\n\n    useEffect(() => {\n      // 서버로부터 포스트 데이터를 가져옵니다.\n      fetch('http://localhost:8000/posts') // 이 URL은 예시이며, 실제 서버의 URL을 사용해야 합니다.\n        .then(response => response.json())\n        .then(data => setPosts(data))\n        .catch(error => console.log(error));\n    }, []);\n  \n    return (\n      <div>\n        <h1>포스트 내용 페이지</h1>\n        {posts.length > 0 && (\n          <div>\n            <h2>{posts[0].title}</h2>\n            <p>{posts[0].tags[0]}</p>\n            <ReactMarkdown remarkPlugins={[remarkGfm]}>\n              {posts[0].content}\n            </ReactMarkdown>\n          </div>\n        )}\n      </div>\n    );\n\n};\n\nexport default ContentPage;"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,WAAW,QAAQ,kBAAkB;AAC9C,OAAOC,MAAM,IAAIC,iBAAiB,QAAQ,mBAAmB;AAC7D,SAASC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC3C,OAAOC,aAAa,MAAM,gBAAgB;AAC1C,OAAOC,SAAS,MAAM,YAAY;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAGnC,MAAMC,OAAO,GAAGR,MAAM,CAACS,GAAI;AAC3B;AACA;AACA;AACA,CAAC;AAGD,MAAMC,WAAW,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAEtB,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;;EAExCD,SAAS,CAAC,MAAM;IACd;IACAY,KAAK,CAAC,6BAA6B,CAAC,CAAC;IAAA,CAClCC,IAAI,CAACC,QAAQ,IAAIA,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC,CACjCF,IAAI,CAACG,IAAI,IAAIL,QAAQ,CAACK,IAAI,CAAC,CAAC,CAC5BC,KAAK,CAACC,KAAK,IAAIC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC,CAAC;EACvC,CAAC,EAAE,EAAE,CAAC;EAEN,oBACEb,OAAA;IAAAgB,QAAA,gBACEhB,OAAA;MAAAgB,QAAA,EAAI;IAAU;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,EAClBf,KAAK,CAACgB,MAAM,GAAG,CAAC,iBACfrB,OAAA;MAAAgB,QAAA,gBACEhB,OAAA;QAAAgB,QAAA,EAAKX,KAAK,CAAC,CAAC,CAAC,CAACiB;MAAK;QAAAL,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CAAC,eACzBpB,OAAA;QAAAgB,QAAA,EAAIX,KAAK,CAAC,CAAC,CAAC,CAACkB,IAAI,CAAC,CAAC;MAAC;QAAAN,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACzBpB,OAAA,CAACH,aAAa;QAAC2B,aAAa,EAAE,CAAC1B,SAAS,CAAE;QAAAkB,QAAA,EACvCX,KAAK,CAAC,CAAC,CAAC,CAACoB;MAAO;QAAAR,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACJ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACb,CACN;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAGZ,CAAC;AAAChB,EAAA,CA3BID,WAAW;AAAAuB,EAAA,GAAXvB,WAAW;AA6BjB,eAAeA,WAAW;AAAC,IAAAuB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}