{"ast":null,"code":"export default function escapeStringRegexp(string) {\n  if (typeof string !== 'string') {\n    throw new TypeError('Expected a string');\n  }\n\n  // Escape characters with special meaning either inside or outside character sets.\n  // Use a simple backslash escape when it’s always valid, and a `\\xnn` escape when the simpler form would be disallowed by Unicode patterns’ stricter grammar.\n  return string.replace(/[|\\\\{}()[\\]^$+*?.]/g, '\\\\$&').replace(/-/g, '\\\\x2d');\n}","map":{"version":3,"names":["escapeStringRegexp","string","TypeError","replace"],"sources":["C:/Users/rjalr/OneDrive/바탕 화면/ybigta/ybigta_blog_2/Ybigta-Blog/frontend/node_modules/mdast-util-find-and-replace/node_modules/escape-string-regexp/index.js"],"sourcesContent":["export default function escapeStringRegexp(string) {\r\n\tif (typeof string !== 'string') {\r\n\t\tthrow new TypeError('Expected a string');\r\n\t}\r\n\r\n\t// Escape characters with special meaning either inside or outside character sets.\r\n\t// Use a simple backslash escape when it’s always valid, and a `\\xnn` escape when the simpler form would be disallowed by Unicode patterns’ stricter grammar.\r\n\treturn string\r\n\t\t.replace(/[|\\\\{}()[\\]^$+*?.]/g, '\\\\$&')\r\n\t\t.replace(/-/g, '\\\\x2d');\r\n}\r\n"],"mappings":"AAAA,eAAe,SAASA,kBAAkBA,CAACC,MAAM,EAAE;EAClD,IAAI,OAAOA,MAAM,KAAK,QAAQ,EAAE;IAC/B,MAAM,IAAIC,SAAS,CAAC,mBAAmB,CAAC;EACzC;;EAEA;EACA;EACA,OAAOD,MAAM,CACXE,OAAO,CAAC,qBAAqB,EAAE,MAAM,CAAC,CACtCA,OAAO,CAAC,IAAI,EAAE,OAAO,CAAC;AACzB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}