{"ast":null,"code":"/**\r\n * @typedef {import('micromark-util-types').Event} Event\r\n * @typedef {import('micromark-util-types').Resolver} Resolver\r\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\r\n */\n\n/**\r\n * Call all `resolveAll`s.\r\n *\r\n * @param {Array<{resolveAll?: Resolver | undefined}>} constructs\r\n *   List of constructs, optionally with `resolveAll`s.\r\n * @param {Array<Event>} events\r\n *   List of events.\r\n * @param {TokenizeContext} context\r\n *   Context used by `tokenize`.\r\n * @returns {Array<Event>}\r\n *   Changed events.\r\n */\nexport function resolveAll(constructs, events, context) {\n  /** @type {Array<Resolver>} */\n  const called = [];\n  let index = -1;\n  while (++index < constructs.length) {\n    const resolve = constructs[index].resolveAll;\n    if (resolve && !called.includes(resolve)) {\n      events = resolve(events, context);\n      called.push(resolve);\n    }\n  }\n  return events;\n}","map":{"version":3,"names":["resolveAll","constructs","events","context","called","index","length","resolve","includes","push"],"sources":["E:/Documents/2024-1 YBIGTA/React/blog_git/Ybigta-Blog/frontend/node_modules/micromark-util-resolve-all/index.js"],"sourcesContent":["/**\r\n * @typedef {import('micromark-util-types').Event} Event\r\n * @typedef {import('micromark-util-types').Resolver} Resolver\r\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\r\n */\r\n\r\n/**\r\n * Call all `resolveAll`s.\r\n *\r\n * @param {Array<{resolveAll?: Resolver | undefined}>} constructs\r\n *   List of constructs, optionally with `resolveAll`s.\r\n * @param {Array<Event>} events\r\n *   List of events.\r\n * @param {TokenizeContext} context\r\n *   Context used by `tokenize`.\r\n * @returns {Array<Event>}\r\n *   Changed events.\r\n */\r\nexport function resolveAll(constructs, events, context) {\r\n  /** @type {Array<Resolver>} */\r\n  const called = []\r\n  let index = -1\r\n\r\n  while (++index < constructs.length) {\r\n    const resolve = constructs[index].resolveAll\r\n\r\n    if (resolve && !called.includes(resolve)) {\r\n      events = resolve(events, context)\r\n      called.push(resolve)\r\n    }\r\n  }\r\n\r\n  return events\r\n}\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASA,UAAUA,CAACC,UAAU,EAAEC,MAAM,EAAEC,OAAO,EAAE;EACtD;EACA,MAAMC,MAAM,GAAG,EAAE;EACjB,IAAIC,KAAK,GAAG,CAAC,CAAC;EAEd,OAAO,EAAEA,KAAK,GAAGJ,UAAU,CAACK,MAAM,EAAE;IAClC,MAAMC,OAAO,GAAGN,UAAU,CAACI,KAAK,CAAC,CAACL,UAAU;IAE5C,IAAIO,OAAO,IAAI,CAACH,MAAM,CAACI,QAAQ,CAACD,OAAO,CAAC,EAAE;MACxCL,MAAM,GAAGK,OAAO,CAACL,MAAM,EAAEC,OAAO,CAAC;MACjCC,MAAM,CAACK,IAAI,CAACF,OAAO,CAAC;IACtB;EACF;EAEA,OAAOL,MAAM;AACf","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}