{"ast":null,"code":"/**\r\n * @typedef {import('mdast').InlineCode} InlineCode\r\n * @typedef {import('mdast').Table} Table\r\n * @typedef {import('mdast').TableCell} TableCell\r\n * @typedef {import('mdast').TableRow} TableRow\r\n *\r\n * @typedef {import('markdown-table').Options} MarkdownTableOptions\r\n *\r\n * @typedef {import('mdast-util-from-markdown').CompileContext} CompileContext\r\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\r\n * @typedef {import('mdast-util-from-markdown').Handle} FromMarkdownHandle\r\n *\r\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\r\n * @typedef {import('mdast-util-to-markdown').Handle} ToMarkdownHandle\r\n * @typedef {import('mdast-util-to-markdown').State} State\r\n * @typedef {import('mdast-util-to-markdown').Info} Info\r\n */\n\n/**\r\n * @typedef Options\r\n *   Configuration.\r\n * @property {boolean | null | undefined} [tableCellPadding=true]\r\n *   Whether to add a space of padding between delimiters and cells (default:\r\n *   `true`).\r\n * @property {boolean | null | undefined} [tablePipeAlign=true]\r\n *   Whether to align the delimiters (default: `true`).\r\n * @property {MarkdownTableOptions['stringLength'] | null | undefined} [stringLength]\r\n *   Function to detect the length of table cell content, used when aligning\r\n *   the delimiters between cells (optional).\r\n */\n\nimport { ok as assert } from 'devlop';\nimport { markdownTable } from 'markdown-table';\nimport { defaultHandlers } from 'mdast-util-to-markdown';\n\n/**\r\n * Create an extension for `mdast-util-from-markdown` to enable GFM tables in\r\n * markdown.\r\n *\r\n * @returns {FromMarkdownExtension}\r\n *   Extension for `mdast-util-from-markdown` to enable GFM tables.\r\n */\nexport function gfmTableFromMarkdown() {\n  return {\n    enter: {\n      table: enterTable,\n      tableData: enterCell,\n      tableHeader: enterCell,\n      tableRow: enterRow\n    },\n    exit: {\n      codeText: exitCodeText,\n      table: exitTable,\n      tableData: exit,\n      tableHeader: exit,\n      tableRow: exit\n    }\n  };\n}\n\n/**\r\n * @this {CompileContext}\r\n * @type {FromMarkdownHandle}\r\n */\nfunction enterTable(token) {\n  const align = token._align;\n  assert(align, 'expected `_align` on table');\n  this.enter({\n    type: 'table',\n    align: align.map(function (d) {\n      return d === 'none' ? null : d;\n    }),\n    children: []\n  }, token);\n  this.data.inTable = true;\n}\n\n/**\r\n * @this {CompileContext}\r\n * @type {FromMarkdownHandle}\r\n */\nfunction exitTable(token) {\n  this.exit(token);\n  this.data.inTable = undefined;\n}\n\n/**\r\n * @this {CompileContext}\r\n * @type {FromMarkdownHandle}\r\n */\nfunction enterRow(token) {\n  this.enter({\n    type: 'tableRow',\n    children: []\n  }, token);\n}\n\n/**\r\n * @this {CompileContext}\r\n * @type {FromMarkdownHandle}\r\n */\nfunction exit(token) {\n  this.exit(token);\n}\n\n/**\r\n * @this {CompileContext}\r\n * @type {FromMarkdownHandle}\r\n */\nfunction enterCell(token) {\n  this.enter({\n    type: 'tableCell',\n    children: []\n  }, token);\n}\n\n// Overwrite the default code text data handler to unescape escaped pipes when\n// they are in tables.\n/**\r\n * @this {CompileContext}\r\n * @type {FromMarkdownHandle}\r\n */\nfunction exitCodeText(token) {\n  let value = this.resume();\n  if (this.data.inTable) {\n    value = value.replace(/\\\\([\\\\|])/g, replace);\n  }\n  const node = this.stack[this.stack.length - 1];\n  assert(node.type === 'inlineCode');\n  node.value = value;\n  this.exit(token);\n}\n\n/**\r\n * @param {string} $0\r\n * @param {string} $1\r\n * @returns {string}\r\n */\nfunction replace($0, $1) {\n  // Pipes work, backslashes don’t (but can’t escape pipes).\n  return $1 === '|' ? $1 : $0;\n}\n\n/**\r\n * Create an extension for `mdast-util-to-markdown` to enable GFM tables in\r\n * markdown.\r\n *\r\n * @param {Options | null | undefined} [options]\r\n *   Configuration.\r\n * @returns {ToMarkdownExtension}\r\n *   Extension for `mdast-util-to-markdown` to enable GFM tables.\r\n */\nexport function gfmTableToMarkdown(options) {\n  const settings = options || {};\n  const padding = settings.tableCellPadding;\n  const alignDelimiters = settings.tablePipeAlign;\n  const stringLength = settings.stringLength;\n  const around = padding ? ' ' : '|';\n  return {\n    unsafe: [{\n      character: '\\r',\n      inConstruct: 'tableCell'\n    }, {\n      character: '\\n',\n      inConstruct: 'tableCell'\n    },\n    // A pipe, when followed by a tab or space (padding), or a dash or colon\n    // (unpadded delimiter row), could result in a table.\n    {\n      atBreak: true,\n      character: '|',\n      after: '[\\t :-]'\n    },\n    // A pipe in a cell must be encoded.\n    {\n      character: '|',\n      inConstruct: 'tableCell'\n    },\n    // A colon must be followed by a dash, in which case it could start a\n    // delimiter row.\n    {\n      atBreak: true,\n      character: ':',\n      after: '-'\n    },\n    // A delimiter row can also start with a dash, when followed by more\n    // dashes, a colon, or a pipe.\n    // This is a stricter version than the built in check for lists, thematic\n    // breaks, and setex heading underlines though:\n    // <https://github.com/syntax-tree/mdast-util-to-markdown/blob/51a2038/lib/unsafe.js#L57>\n    {\n      atBreak: true,\n      character: '-',\n      after: '[:|-]'\n    }],\n    handlers: {\n      inlineCode: inlineCodeWithTable,\n      table: handleTable,\n      tableCell: handleTableCell,\n      tableRow: handleTableRow\n    }\n  };\n\n  /**\r\n   * @type {ToMarkdownHandle}\r\n   * @param {Table} node\r\n   */\n  function handleTable(node, _, state, info) {\n    return serializeData(handleTableAsData(node, state, info), node.align);\n  }\n\n  /**\r\n   * This function isn’t really used normally, because we handle rows at the\r\n   * table level.\r\n   * But, if someone passes in a table row, this ensures we make somewhat sense.\r\n   *\r\n   * @type {ToMarkdownHandle}\r\n   * @param {TableRow} node\r\n   */\n  function handleTableRow(node, _, state, info) {\n    const row = handleTableRowAsData(node, state, info);\n    const value = serializeData([row]);\n    // `markdown-table` will always add an align row\n    return value.slice(0, value.indexOf('\\n'));\n  }\n\n  /**\r\n   * @type {ToMarkdownHandle}\r\n   * @param {TableCell} node\r\n   */\n  function handleTableCell(node, _, state, info) {\n    const exit = state.enter('tableCell');\n    const subexit = state.enter('phrasing');\n    const value = state.containerPhrasing(node, {\n      ...info,\n      before: around,\n      after: around\n    });\n    subexit();\n    exit();\n    return value;\n  }\n\n  /**\r\n   * @param {Array<Array<string>>} matrix\r\n   * @param {Array<string | null | undefined> | null | undefined} [align]\r\n   */\n  function serializeData(matrix, align) {\n    return markdownTable(matrix, {\n      align,\n      // @ts-expect-error: `markdown-table` types should support `null`.\n      alignDelimiters,\n      // @ts-expect-error: `markdown-table` types should support `null`.\n      padding,\n      // @ts-expect-error: `markdown-table` types should support `null`.\n      stringLength\n    });\n  }\n\n  /**\r\n   * @param {Table} node\r\n   * @param {State} state\r\n   * @param {Info} info\r\n   */\n  function handleTableAsData(node, state, info) {\n    const children = node.children;\n    let index = -1;\n    /** @type {Array<Array<string>>} */\n    const result = [];\n    const subexit = state.enter('table');\n    while (++index < children.length) {\n      result[index] = handleTableRowAsData(children[index], state, info);\n    }\n    subexit();\n    return result;\n  }\n\n  /**\r\n   * @param {TableRow} node\r\n   * @param {State} state\r\n   * @param {Info} info\r\n   */\n  function handleTableRowAsData(node, state, info) {\n    const children = node.children;\n    let index = -1;\n    /** @type {Array<string>} */\n    const result = [];\n    const subexit = state.enter('tableRow');\n    while (++index < children.length) {\n      // Note: the positional info as used here is incorrect.\n      // Making it correct would be impossible due to aligning cells?\n      // And it would need copy/pasting `markdown-table` into this project.\n      result[index] = handleTableCell(children[index], node, state, info);\n    }\n    subexit();\n    return result;\n  }\n\n  /**\r\n   * @type {ToMarkdownHandle}\r\n   * @param {InlineCode} node\r\n   */\n  function inlineCodeWithTable(node, parent, state) {\n    let value = defaultHandlers.inlineCode(node, parent, state);\n    if (state.stack.includes('tableCell')) {\n      value = value.replace(/\\|/g, '\\\\$&');\n    }\n    return value;\n  }\n}","map":{"version":3,"names":["ok","assert","markdownTable","defaultHandlers","gfmTableFromMarkdown","enter","table","enterTable","tableData","enterCell","tableHeader","tableRow","enterRow","exit","codeText","exitCodeText","exitTable","token","align","_align","type","map","d","children","data","inTable","undefined","value","resume","replace","node","stack","length","$0","$1","gfmTableToMarkdown","options","settings","padding","tableCellPadding","alignDelimiters","tablePipeAlign","stringLength","around","unsafe","character","inConstruct","atBreak","after","handlers","inlineCode","inlineCodeWithTable","handleTable","tableCell","handleTableCell","handleTableRow","_","state","info","serializeData","handleTableAsData","row","handleTableRowAsData","slice","indexOf","subexit","containerPhrasing","before","matrix","index","result","parent","includes"],"sources":["E:/Documents/2024-1 YBIGTA/React/blog_git/Ybigta-Blog/frontend/node_modules/mdast-util-gfm-table/lib/index.js"],"sourcesContent":["/**\r\n * @typedef {import('mdast').InlineCode} InlineCode\r\n * @typedef {import('mdast').Table} Table\r\n * @typedef {import('mdast').TableCell} TableCell\r\n * @typedef {import('mdast').TableRow} TableRow\r\n *\r\n * @typedef {import('markdown-table').Options} MarkdownTableOptions\r\n *\r\n * @typedef {import('mdast-util-from-markdown').CompileContext} CompileContext\r\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\r\n * @typedef {import('mdast-util-from-markdown').Handle} FromMarkdownHandle\r\n *\r\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\r\n * @typedef {import('mdast-util-to-markdown').Handle} ToMarkdownHandle\r\n * @typedef {import('mdast-util-to-markdown').State} State\r\n * @typedef {import('mdast-util-to-markdown').Info} Info\r\n */\r\n\r\n/**\r\n * @typedef Options\r\n *   Configuration.\r\n * @property {boolean | null | undefined} [tableCellPadding=true]\r\n *   Whether to add a space of padding between delimiters and cells (default:\r\n *   `true`).\r\n * @property {boolean | null | undefined} [tablePipeAlign=true]\r\n *   Whether to align the delimiters (default: `true`).\r\n * @property {MarkdownTableOptions['stringLength'] | null | undefined} [stringLength]\r\n *   Function to detect the length of table cell content, used when aligning\r\n *   the delimiters between cells (optional).\r\n */\r\n\r\nimport {ok as assert} from 'devlop'\r\nimport {markdownTable} from 'markdown-table'\r\nimport {defaultHandlers} from 'mdast-util-to-markdown'\r\n\r\n/**\r\n * Create an extension for `mdast-util-from-markdown` to enable GFM tables in\r\n * markdown.\r\n *\r\n * @returns {FromMarkdownExtension}\r\n *   Extension for `mdast-util-from-markdown` to enable GFM tables.\r\n */\r\nexport function gfmTableFromMarkdown() {\r\n  return {\r\n    enter: {\r\n      table: enterTable,\r\n      tableData: enterCell,\r\n      tableHeader: enterCell,\r\n      tableRow: enterRow\r\n    },\r\n    exit: {\r\n      codeText: exitCodeText,\r\n      table: exitTable,\r\n      tableData: exit,\r\n      tableHeader: exit,\r\n      tableRow: exit\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * @this {CompileContext}\r\n * @type {FromMarkdownHandle}\r\n */\r\nfunction enterTable(token) {\r\n  const align = token._align\r\n  assert(align, 'expected `_align` on table')\r\n  this.enter(\r\n    {\r\n      type: 'table',\r\n      align: align.map(function (d) {\r\n        return d === 'none' ? null : d\r\n      }),\r\n      children: []\r\n    },\r\n    token\r\n  )\r\n  this.data.inTable = true\r\n}\r\n\r\n/**\r\n * @this {CompileContext}\r\n * @type {FromMarkdownHandle}\r\n */\r\nfunction exitTable(token) {\r\n  this.exit(token)\r\n  this.data.inTable = undefined\r\n}\r\n\r\n/**\r\n * @this {CompileContext}\r\n * @type {FromMarkdownHandle}\r\n */\r\nfunction enterRow(token) {\r\n  this.enter({type: 'tableRow', children: []}, token)\r\n}\r\n\r\n/**\r\n * @this {CompileContext}\r\n * @type {FromMarkdownHandle}\r\n */\r\nfunction exit(token) {\r\n  this.exit(token)\r\n}\r\n\r\n/**\r\n * @this {CompileContext}\r\n * @type {FromMarkdownHandle}\r\n */\r\nfunction enterCell(token) {\r\n  this.enter({type: 'tableCell', children: []}, token)\r\n}\r\n\r\n// Overwrite the default code text data handler to unescape escaped pipes when\r\n// they are in tables.\r\n/**\r\n * @this {CompileContext}\r\n * @type {FromMarkdownHandle}\r\n */\r\nfunction exitCodeText(token) {\r\n  let value = this.resume()\r\n\r\n  if (this.data.inTable) {\r\n    value = value.replace(/\\\\([\\\\|])/g, replace)\r\n  }\r\n\r\n  const node = this.stack[this.stack.length - 1]\r\n  assert(node.type === 'inlineCode')\r\n  node.value = value\r\n  this.exit(token)\r\n}\r\n\r\n/**\r\n * @param {string} $0\r\n * @param {string} $1\r\n * @returns {string}\r\n */\r\nfunction replace($0, $1) {\r\n  // Pipes work, backslashes don’t (but can’t escape pipes).\r\n  return $1 === '|' ? $1 : $0\r\n}\r\n\r\n/**\r\n * Create an extension for `mdast-util-to-markdown` to enable GFM tables in\r\n * markdown.\r\n *\r\n * @param {Options | null | undefined} [options]\r\n *   Configuration.\r\n * @returns {ToMarkdownExtension}\r\n *   Extension for `mdast-util-to-markdown` to enable GFM tables.\r\n */\r\nexport function gfmTableToMarkdown(options) {\r\n  const settings = options || {}\r\n  const padding = settings.tableCellPadding\r\n  const alignDelimiters = settings.tablePipeAlign\r\n  const stringLength = settings.stringLength\r\n  const around = padding ? ' ' : '|'\r\n\r\n  return {\r\n    unsafe: [\r\n      {character: '\\r', inConstruct: 'tableCell'},\r\n      {character: '\\n', inConstruct: 'tableCell'},\r\n      // A pipe, when followed by a tab or space (padding), or a dash or colon\r\n      // (unpadded delimiter row), could result in a table.\r\n      {atBreak: true, character: '|', after: '[\\t :-]'},\r\n      // A pipe in a cell must be encoded.\r\n      {character: '|', inConstruct: 'tableCell'},\r\n      // A colon must be followed by a dash, in which case it could start a\r\n      // delimiter row.\r\n      {atBreak: true, character: ':', after: '-'},\r\n      // A delimiter row can also start with a dash, when followed by more\r\n      // dashes, a colon, or a pipe.\r\n      // This is a stricter version than the built in check for lists, thematic\r\n      // breaks, and setex heading underlines though:\r\n      // <https://github.com/syntax-tree/mdast-util-to-markdown/blob/51a2038/lib/unsafe.js#L57>\r\n      {atBreak: true, character: '-', after: '[:|-]'}\r\n    ],\r\n    handlers: {\r\n      inlineCode: inlineCodeWithTable,\r\n      table: handleTable,\r\n      tableCell: handleTableCell,\r\n      tableRow: handleTableRow\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @type {ToMarkdownHandle}\r\n   * @param {Table} node\r\n   */\r\n  function handleTable(node, _, state, info) {\r\n    return serializeData(handleTableAsData(node, state, info), node.align)\r\n  }\r\n\r\n  /**\r\n   * This function isn’t really used normally, because we handle rows at the\r\n   * table level.\r\n   * But, if someone passes in a table row, this ensures we make somewhat sense.\r\n   *\r\n   * @type {ToMarkdownHandle}\r\n   * @param {TableRow} node\r\n   */\r\n  function handleTableRow(node, _, state, info) {\r\n    const row = handleTableRowAsData(node, state, info)\r\n    const value = serializeData([row])\r\n    // `markdown-table` will always add an align row\r\n    return value.slice(0, value.indexOf('\\n'))\r\n  }\r\n\r\n  /**\r\n   * @type {ToMarkdownHandle}\r\n   * @param {TableCell} node\r\n   */\r\n  function handleTableCell(node, _, state, info) {\r\n    const exit = state.enter('tableCell')\r\n    const subexit = state.enter('phrasing')\r\n    const value = state.containerPhrasing(node, {\r\n      ...info,\r\n      before: around,\r\n      after: around\r\n    })\r\n    subexit()\r\n    exit()\r\n    return value\r\n  }\r\n\r\n  /**\r\n   * @param {Array<Array<string>>} matrix\r\n   * @param {Array<string | null | undefined> | null | undefined} [align]\r\n   */\r\n  function serializeData(matrix, align) {\r\n    return markdownTable(matrix, {\r\n      align,\r\n      // @ts-expect-error: `markdown-table` types should support `null`.\r\n      alignDelimiters,\r\n      // @ts-expect-error: `markdown-table` types should support `null`.\r\n      padding,\r\n      // @ts-expect-error: `markdown-table` types should support `null`.\r\n      stringLength\r\n    })\r\n  }\r\n\r\n  /**\r\n   * @param {Table} node\r\n   * @param {State} state\r\n   * @param {Info} info\r\n   */\r\n  function handleTableAsData(node, state, info) {\r\n    const children = node.children\r\n    let index = -1\r\n    /** @type {Array<Array<string>>} */\r\n    const result = []\r\n    const subexit = state.enter('table')\r\n\r\n    while (++index < children.length) {\r\n      result[index] = handleTableRowAsData(children[index], state, info)\r\n    }\r\n\r\n    subexit()\r\n\r\n    return result\r\n  }\r\n\r\n  /**\r\n   * @param {TableRow} node\r\n   * @param {State} state\r\n   * @param {Info} info\r\n   */\r\n  function handleTableRowAsData(node, state, info) {\r\n    const children = node.children\r\n    let index = -1\r\n    /** @type {Array<string>} */\r\n    const result = []\r\n    const subexit = state.enter('tableRow')\r\n\r\n    while (++index < children.length) {\r\n      // Note: the positional info as used here is incorrect.\r\n      // Making it correct would be impossible due to aligning cells?\r\n      // And it would need copy/pasting `markdown-table` into this project.\r\n      result[index] = handleTableCell(children[index], node, state, info)\r\n    }\r\n\r\n    subexit()\r\n\r\n    return result\r\n  }\r\n\r\n  /**\r\n   * @type {ToMarkdownHandle}\r\n   * @param {InlineCode} node\r\n   */\r\n  function inlineCodeWithTable(node, parent, state) {\r\n    let value = defaultHandlers.inlineCode(node, parent, state)\r\n\r\n    if (state.stack.includes('tableCell')) {\r\n      value = value.replace(/\\|/g, '\\\\$&')\r\n    }\r\n\r\n    return value\r\n  }\r\n}\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAAQA,EAAE,IAAIC,MAAM,QAAO,QAAQ;AACnC,SAAQC,aAAa,QAAO,gBAAgB;AAC5C,SAAQC,eAAe,QAAO,wBAAwB;;AAEtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,oBAAoBA,CAAA,EAAG;EACrC,OAAO;IACLC,KAAK,EAAE;MACLC,KAAK,EAAEC,UAAU;MACjBC,SAAS,EAAEC,SAAS;MACpBC,WAAW,EAAED,SAAS;MACtBE,QAAQ,EAAEC;IACZ,CAAC;IACDC,IAAI,EAAE;MACJC,QAAQ,EAAEC,YAAY;MACtBT,KAAK,EAAEU,SAAS;MAChBR,SAAS,EAAEK,IAAI;MACfH,WAAW,EAAEG,IAAI;MACjBF,QAAQ,EAAEE;IACZ;EACF,CAAC;AACH;;AAEA;AACA;AACA;AACA;AACA,SAASN,UAAUA,CAACU,KAAK,EAAE;EACzB,MAAMC,KAAK,GAAGD,KAAK,CAACE,MAAM;EAC1BlB,MAAM,CAACiB,KAAK,EAAE,4BAA4B,CAAC;EAC3C,IAAI,CAACb,KAAK,CACR;IACEe,IAAI,EAAE,OAAO;IACbF,KAAK,EAAEA,KAAK,CAACG,GAAG,CAAC,UAAUC,CAAC,EAAE;MAC5B,OAAOA,CAAC,KAAK,MAAM,GAAG,IAAI,GAAGA,CAAC;IAChC,CAAC,CAAC;IACFC,QAAQ,EAAE;EACZ,CAAC,EACDN,KACF,CAAC;EACD,IAAI,CAACO,IAAI,CAACC,OAAO,GAAG,IAAI;AAC1B;;AAEA;AACA;AACA;AACA;AACA,SAAST,SAASA,CAACC,KAAK,EAAE;EACxB,IAAI,CAACJ,IAAI,CAACI,KAAK,CAAC;EAChB,IAAI,CAACO,IAAI,CAACC,OAAO,GAAGC,SAAS;AAC/B;;AAEA;AACA;AACA;AACA;AACA,SAASd,QAAQA,CAACK,KAAK,EAAE;EACvB,IAAI,CAACZ,KAAK,CAAC;IAACe,IAAI,EAAE,UAAU;IAAEG,QAAQ,EAAE;EAAE,CAAC,EAAEN,KAAK,CAAC;AACrD;;AAEA;AACA;AACA;AACA;AACA,SAASJ,IAAIA,CAACI,KAAK,EAAE;EACnB,IAAI,CAACJ,IAAI,CAACI,KAAK,CAAC;AAClB;;AAEA;AACA;AACA;AACA;AACA,SAASR,SAASA,CAACQ,KAAK,EAAE;EACxB,IAAI,CAACZ,KAAK,CAAC;IAACe,IAAI,EAAE,WAAW;IAAEG,QAAQ,EAAE;EAAE,CAAC,EAAEN,KAAK,CAAC;AACtD;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAASF,YAAYA,CAACE,KAAK,EAAE;EAC3B,IAAIU,KAAK,GAAG,IAAI,CAACC,MAAM,CAAC,CAAC;EAEzB,IAAI,IAAI,CAACJ,IAAI,CAACC,OAAO,EAAE;IACrBE,KAAK,GAAGA,KAAK,CAACE,OAAO,CAAC,YAAY,EAAEA,OAAO,CAAC;EAC9C;EAEA,MAAMC,IAAI,GAAG,IAAI,CAACC,KAAK,CAAC,IAAI,CAACA,KAAK,CAACC,MAAM,GAAG,CAAC,CAAC;EAC9C/B,MAAM,CAAC6B,IAAI,CAACV,IAAI,KAAK,YAAY,CAAC;EAClCU,IAAI,CAACH,KAAK,GAAGA,KAAK;EAClB,IAAI,CAACd,IAAI,CAACI,KAAK,CAAC;AAClB;;AAEA;AACA;AACA;AACA;AACA;AACA,SAASY,OAAOA,CAACI,EAAE,EAAEC,EAAE,EAAE;EACvB;EACA,OAAOA,EAAE,KAAK,GAAG,GAAGA,EAAE,GAAGD,EAAE;AAC7B;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASE,kBAAkBA,CAACC,OAAO,EAAE;EAC1C,MAAMC,QAAQ,GAAGD,OAAO,IAAI,CAAC,CAAC;EAC9B,MAAME,OAAO,GAAGD,QAAQ,CAACE,gBAAgB;EACzC,MAAMC,eAAe,GAAGH,QAAQ,CAACI,cAAc;EAC/C,MAAMC,YAAY,GAAGL,QAAQ,CAACK,YAAY;EAC1C,MAAMC,MAAM,GAAGL,OAAO,GAAG,GAAG,GAAG,GAAG;EAElC,OAAO;IACLM,MAAM,EAAE,CACN;MAACC,SAAS,EAAE,IAAI;MAAEC,WAAW,EAAE;IAAW,CAAC,EAC3C;MAACD,SAAS,EAAE,IAAI;MAAEC,WAAW,EAAE;IAAW,CAAC;IAC3C;IACA;IACA;MAACC,OAAO,EAAE,IAAI;MAAEF,SAAS,EAAE,GAAG;MAAEG,KAAK,EAAE;IAAS,CAAC;IACjD;IACA;MAACH,SAAS,EAAE,GAAG;MAAEC,WAAW,EAAE;IAAW,CAAC;IAC1C;IACA;IACA;MAACC,OAAO,EAAE,IAAI;MAAEF,SAAS,EAAE,GAAG;MAAEG,KAAK,EAAE;IAAG,CAAC;IAC3C;IACA;IACA;IACA;IACA;IACA;MAACD,OAAO,EAAE,IAAI;MAAEF,SAAS,EAAE,GAAG;MAAEG,KAAK,EAAE;IAAO,CAAC,CAChD;IACDC,QAAQ,EAAE;MACRC,UAAU,EAAEC,mBAAmB;MAC/B7C,KAAK,EAAE8C,WAAW;MAClBC,SAAS,EAAEC,eAAe;MAC1B3C,QAAQ,EAAE4C;IACZ;EACF,CAAC;;EAED;AACF;AACA;AACA;EACE,SAASH,WAAWA,CAACtB,IAAI,EAAE0B,CAAC,EAAEC,KAAK,EAAEC,IAAI,EAAE;IACzC,OAAOC,aAAa,CAACC,iBAAiB,CAAC9B,IAAI,EAAE2B,KAAK,EAAEC,IAAI,CAAC,EAAE5B,IAAI,CAACZ,KAAK,CAAC;EACxE;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EACE,SAASqC,cAAcA,CAACzB,IAAI,EAAE0B,CAAC,EAAEC,KAAK,EAAEC,IAAI,EAAE;IAC5C,MAAMG,GAAG,GAAGC,oBAAoB,CAAChC,IAAI,EAAE2B,KAAK,EAAEC,IAAI,CAAC;IACnD,MAAM/B,KAAK,GAAGgC,aAAa,CAAC,CAACE,GAAG,CAAC,CAAC;IAClC;IACA,OAAOlC,KAAK,CAACoC,KAAK,CAAC,CAAC,EAAEpC,KAAK,CAACqC,OAAO,CAAC,IAAI,CAAC,CAAC;EAC5C;;EAEA;AACF;AACA;AACA;EACE,SAASV,eAAeA,CAACxB,IAAI,EAAE0B,CAAC,EAAEC,KAAK,EAAEC,IAAI,EAAE;IAC7C,MAAM7C,IAAI,GAAG4C,KAAK,CAACpD,KAAK,CAAC,WAAW,CAAC;IACrC,MAAM4D,OAAO,GAAGR,KAAK,CAACpD,KAAK,CAAC,UAAU,CAAC;IACvC,MAAMsB,KAAK,GAAG8B,KAAK,CAACS,iBAAiB,CAACpC,IAAI,EAAE;MAC1C,GAAG4B,IAAI;MACPS,MAAM,EAAExB,MAAM;MACdK,KAAK,EAAEL;IACT,CAAC,CAAC;IACFsB,OAAO,CAAC,CAAC;IACTpD,IAAI,CAAC,CAAC;IACN,OAAOc,KAAK;EACd;;EAEA;AACF;AACA;AACA;EACE,SAASgC,aAAaA,CAACS,MAAM,EAAElD,KAAK,EAAE;IACpC,OAAOhB,aAAa,CAACkE,MAAM,EAAE;MAC3BlD,KAAK;MACL;MACAsB,eAAe;MACf;MACAF,OAAO;MACP;MACAI;IACF,CAAC,CAAC;EACJ;;EAEA;AACF;AACA;AACA;AACA;EACE,SAASkB,iBAAiBA,CAAC9B,IAAI,EAAE2B,KAAK,EAAEC,IAAI,EAAE;IAC5C,MAAMnC,QAAQ,GAAGO,IAAI,CAACP,QAAQ;IAC9B,IAAI8C,KAAK,GAAG,CAAC,CAAC;IACd;IACA,MAAMC,MAAM,GAAG,EAAE;IACjB,MAAML,OAAO,GAAGR,KAAK,CAACpD,KAAK,CAAC,OAAO,CAAC;IAEpC,OAAO,EAAEgE,KAAK,GAAG9C,QAAQ,CAACS,MAAM,EAAE;MAChCsC,MAAM,CAACD,KAAK,CAAC,GAAGP,oBAAoB,CAACvC,QAAQ,CAAC8C,KAAK,CAAC,EAAEZ,KAAK,EAAEC,IAAI,CAAC;IACpE;IAEAO,OAAO,CAAC,CAAC;IAET,OAAOK,MAAM;EACf;;EAEA;AACF;AACA;AACA;AACA;EACE,SAASR,oBAAoBA,CAAChC,IAAI,EAAE2B,KAAK,EAAEC,IAAI,EAAE;IAC/C,MAAMnC,QAAQ,GAAGO,IAAI,CAACP,QAAQ;IAC9B,IAAI8C,KAAK,GAAG,CAAC,CAAC;IACd;IACA,MAAMC,MAAM,GAAG,EAAE;IACjB,MAAML,OAAO,GAAGR,KAAK,CAACpD,KAAK,CAAC,UAAU,CAAC;IAEvC,OAAO,EAAEgE,KAAK,GAAG9C,QAAQ,CAACS,MAAM,EAAE;MAChC;MACA;MACA;MACAsC,MAAM,CAACD,KAAK,CAAC,GAAGf,eAAe,CAAC/B,QAAQ,CAAC8C,KAAK,CAAC,EAAEvC,IAAI,EAAE2B,KAAK,EAAEC,IAAI,CAAC;IACrE;IAEAO,OAAO,CAAC,CAAC;IAET,OAAOK,MAAM;EACf;;EAEA;AACF;AACA;AACA;EACE,SAASnB,mBAAmBA,CAACrB,IAAI,EAAEyC,MAAM,EAAEd,KAAK,EAAE;IAChD,IAAI9B,KAAK,GAAGxB,eAAe,CAAC+C,UAAU,CAACpB,IAAI,EAAEyC,MAAM,EAAEd,KAAK,CAAC;IAE3D,IAAIA,KAAK,CAAC1B,KAAK,CAACyC,QAAQ,CAAC,WAAW,CAAC,EAAE;MACrC7C,KAAK,GAAGA,KAAK,CAACE,OAAO,CAAC,KAAK,EAAE,MAAM,CAAC;IACtC;IAEA,OAAOF,KAAK;EACd;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}