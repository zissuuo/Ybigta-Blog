{"ast":null,"code":"var _jsxFileName = \"E:\\\\Documents\\\\2024-1 YBIGTA\\\\Ybigta_BLOG\\\\Ybigta-Blog\\\\frontend\\\\src\\\\components\\\\page\\\\BlogListPage.jsx\",\n  _s = $RefreshSig$();\nimport React from \"react\";\nimport { useEffect, useState } from \"react\";\nimport { useNavigate, useSearchParams } from \"react-router-dom\";\nimport styled, { createGlobalStyle } from \"styled-components\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Wrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  padding: 40px;\n`;\n_c = Wrapper;\nconst TagContainer = styled.div`\n  display: flex;\n  flex-direction: row;\n  flex-wrap: wrap;\n  align-items: center;\n  justify-content: center;\n  //width: 600px;\n  gap: 7px;\n`;\n_c2 = TagContainer;\nconst CategoryContainer = styled.div`\n  display: flex;\n  flex-direction: row;\n  flex-wrap: wrap;\n  align-items: center;\n  justify-content: center;\n  //width: 600px;\n  gap: 7px;\n`;\n_c3 = CategoryContainer;\nconst Tags = styled.span`\n  padding-top: 3px;\n  padding-bottom: 3px;\n  padding-right: 8px;\n  padding-left: 8px;\n  background-color: #ebebeb;\n  text-align: center;\n  font-size: 13px;\n  justify-content: center;\n  color: #666666;\n  border-radius: 5px;\n`;\n_c4 = Tags;\nconst BlogListPage = () => {\n  _s();\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [posts, setPosts] = useState([]);\n  const [selectedTags, setSelectedTags] = useState([]);\n  const [selectedCategory, setSelectedCategory] = useState(\"\");\n  const [currentPage, setCurrentPage] = useState(1);\n  const [searchParams, setSearchParams] = useSearchParams();\n\n  // 페이지 변경 처리\n  const handlePageClick = data => {\n    let selectedPage = data.selected + 1;\n    setCurrentPage(selectedPage);\n    // 페이지 변경 시 쿼리 파라미터 업데이트 및 데이터 재요청\n    const searchParams = new URLSearchParams(window.location.search);\n    searchParams.set('page', selectedPage);\n    navigate(`/?${searchParams}`);\n  };\n\n  // 페이지 이동\n  const navigate = useNavigate();\n\n  // 필터링 초기화\n  const resetFilters = () => {\n    setSelectedTags([]);\n    setSelectedCategory(\"\");\n    setSearchParams({});\n  };\n\n  // 날짜 정렬\n  const sortPostsByDate = posts => {\n    return posts.sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt));\n  };\n\n  // 초기 태그와 카테고리 목록 상태 추가\n  const [allTags, setAllTags] = useState([]);\n  const [allCategories, setAllCategories] = useState([]);\n\n  // 초기 데이터 로딩\n  useEffect(() => {\n    // 전체 태그와 카테고리 로딩\n    const fetchAllTagsAndCategories = async () => {\n      try {\n        const tagsResponse = await fetch(\"http://localhost:8000/tags\");\n        const categoriesResponse = await fetch(\"http://localhost:8000/categories\");\n        if (!tagsResponse.ok || !categoriesResponse.ok) {\n          throw new Error(\"Failed to fetch\");\n        }\n        const tagsData = await tagsResponse.json();\n        const categoriesData = await categoriesResponse.json();\n        setAllTags(tagsData);\n        setAllCategories(categoriesData);\n      } catch (error) {\n        setError(error.message);\n      }\n    };\n    fetchAllTagsAndCategories();\n  }, []); // 빈 의존성 배열로 마운트 시에만 실행\n\n  useEffect(() => {\n    // URL 쿼리 파라미터를 사용하여 백엔드 요청 URL 구성\n    const tagsFromURL = searchParams.get(\"tags\");\n    const categoryFromURL = searchParams.get(\"cat\");\n    let queryParams = new URLSearchParams();\n\n    // tagsFromURL이 있으면 각 태그를 queryParams에 추가\n    if (tagsFromURL) {\n      tagsFromURL.split(\"&\").forEach(tag => {\n        queryParams.append(\"tags\", tag);\n      });\n    }\n\n    // categoryFromURL이 있으면 queryParams에 추가\n    if (categoryFromURL) {\n      queryParams.set(\"cat\", categoryFromURL);\n    }\n    const fetchPosts = async () => {\n      try {\n        setLoading(true);\n        setError(null);\n        const response = await fetch(`http://localhost:8000/posts/?${queryParams}`);\n        if (!response.ok) {\n          throw new Error(\"Failed to fetch posts\");\n        }\n        const data = await response.json();\n        const sortedPosts = sortPostsByDate(data); // 받아온 데이터를 날짜 순으로 정렬\n        setPosts(sortedPosts);\n      } catch (error) {\n        setError(error.message);\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchPosts();\n  }, [searchParams]); // searchParams의 변화에 따라 실행\n\n  // 글 제목 클릭 시 해당 글의 상세 페이지로 이동하는 함수\n  const handlePostClick = postId => {\n    navigate(`/posts/${postId}`);\n  };\n\n  // 태그 단일선택 처리 (공통사용)\n  const handleTagClick = (tag, event) => {\n    event.stopPropagation();\n    navigate(`/?tags=${tag}`);\n  };\n\n  // 태그 다중선택 처리\n  const handleTagChange = tag => {\n    const newSelectedTags = selectedTags.includes(tag) ? selectedTags.filter(t => t !== tag) : [...selectedTags, tag];\n    setSelectedTags(newSelectedTags);\n    setSearchParams({\n      tags: newSelectedTags.join(\"&\"),\n      cat: selectedCategory\n    });\n  };\n\n  // 카테고리 선택 처리\n  const handleCategoryChange = category => {\n    const isDeselecting = selectedCategory === category || category === \"ALL\";\n    const newCategory = isDeselecting ? \"\" : category;\n    setSelectedCategory(newCategory);\n    if (newCategory === \"\") {\n      setSearchParams(selectedTags.length > 0 ? {\n        tags: selectedTags.join(\"&\")\n      } : {});\n    } else {\n      setSearchParams({\n        tags: selectedTags.join(\"&\"),\n        cat: newCategory\n      });\n    }\n  };\n\n  // // posts Data 필터링\n  // const filteredPosts = posts.filter(post => {\n  //     const hasSelectedTags = selectedTags.length === 0 || selectedTags.every(tag => post.tags.includes(tag));\n  //     const hasSelectedCategory = !selectedCategory || post.categories.includes(selectedCategory);\n  //     return hasSelectedTags && hasSelectedCategory;\n  // });\n\n  // const allTags = posts.reduce((acc, post) => [...acc, ...post.tags], []);\n  // const uniqueTags = [...new Set(allTags)];\n\n  // const uniqueTags = [...new Set(posts.flatMap((post) => post.tags))];\n  // const uniqueCategories = [...new Set(posts.map((post) => post.categories))];\n\n  if (loading) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"Loading...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 201,\n    columnNumber: 23\n  }, this);\n  if (error) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [\"Error: \", error]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 202,\n    columnNumber: 21\n  }, this);\n  return /*#__PURE__*/_jsxDEV(Wrapper, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      onClick: resetFilters,\n      style: {\n        cursor: \"pointer\"\n      },\n      children: \"\\uBE14\\uB85C\\uADF8 \\uBA54\\uC778/\\uB9AC\\uC2A4\\uD2B8 \\uD398\\uC774\\uC9C0\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 206,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TagContainer, {\n      children: allTags.map((tag, tagIndex) => /*#__PURE__*/_jsxDEV(Tags, {\n        onClick: () => handleTagChange(tag),\n        style: {\n          marginRight: \"10px\",\n          cursor: 'pointer',\n          gap: \"10px\"\n        },\n        children: [\"#\", tag, selectedTags.includes(tag) ? ' (Selected)' : '']\n      }, tagIndex, true, {\n        fileName: _jsxFileName,\n        lineNumber: 213,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 211,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(CategoryContainer, {\n      children: allCategories.map((category, index) => /*#__PURE__*/_jsxDEV(Tags, {\n        onClick: () => handleCategoryChange(category),\n        style: {\n          marginRight: \"10px\",\n          cursor: 'pointer',\n          gap: \"10px\"\n        },\n        children: selectedCategory === category ? `${category} (Selected)` : category\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 222,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 220,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: posts.map((post, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          onClick: () => handlePostClick(post._id),\n          style: {\n            cursor: \"pointer\"\n          },\n          children: post.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 234,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            display: \"flex\",\n            alignItems: \"center\",\n            fontSize: \"16px\",\n            fontWeight: \"bold\",\n            color: \"gray\"\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            children: post.author\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 251,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n            src: post.profileImagePath,\n            alt: \"Author's profile\",\n            style: {\n              width: \"30px\",\n              height: \"30px\",\n              borderRadius: \"50%\"\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 252,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            style: {\n              margin: \"0 10px\",\n              fontWeight: \"bold\",\n              color: \"lightgray\"\n            },\n            children: new Date(post.createdAt).toLocaleDateString()\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 257,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 242,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n          children: post.outline\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 268,\n          columnNumber: 13\n        }, this), post.tags.map((tag, tagIndex) => /*#__PURE__*/_jsxDEV(Tags, {\n          onClick: event => handleTagClick(tag, event),\n          style: {\n            marginRight: \"10px\",\n            cursor: \"pointer\",\n            gap: \"10px\"\n          },\n          children: [\"#\", tag]\n        }, tagIndex, true, {\n          fileName: _jsxFileName,\n          lineNumber: 272,\n          columnNumber: 15\n        }, this))]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 232,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 230,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 205,\n    columnNumber: 5\n  }, this);\n};\n_s(BlogListPage, \"q/gHtLYQW82t0aCQuRmgqi+XSfo=\", false, function () {\n  return [useSearchParams, useNavigate];\n});\n_c5 = BlogListPage;\nexport default BlogListPage;\nvar _c, _c2, _c3, _c4, _c5;\n$RefreshReg$(_c, \"Wrapper\");\n$RefreshReg$(_c2, \"TagContainer\");\n$RefreshReg$(_c3, \"CategoryContainer\");\n$RefreshReg$(_c4, \"Tags\");\n$RefreshReg$(_c5, \"BlogListPage\");","map":{"version":3,"names":["React","useEffect","useState","useNavigate","useSearchParams","styled","createGlobalStyle","jsxDEV","_jsxDEV","Wrapper","div","_c","TagContainer","_c2","CategoryContainer","_c3","Tags","span","_c4","BlogListPage","_s","loading","setLoading","error","setError","posts","setPosts","selectedTags","setSelectedTags","selectedCategory","setSelectedCategory","currentPage","setCurrentPage","searchParams","setSearchParams","handlePageClick","data","selectedPage","selected","URLSearchParams","window","location","search","set","navigate","resetFilters","sortPostsByDate","sort","a","b","Date","createdAt","allTags","setAllTags","allCategories","setAllCategories","fetchAllTagsAndCategories","tagsResponse","fetch","categoriesResponse","ok","Error","tagsData","json","categoriesData","message","tagsFromURL","get","categoryFromURL","queryParams","split","forEach","tag","append","fetchPosts","response","sortedPosts","handlePostClick","postId","handleTagClick","event","stopPropagation","handleTagChange","newSelectedTags","includes","filter","t","tags","join","cat","handleCategoryChange","category","isDeselecting","newCategory","length","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","style","cursor","map","tagIndex","marginRight","gap","index","post","_id","title","display","alignItems","fontSize","fontWeight","color","author","src","profileImagePath","alt","width","height","borderRadius","margin","toLocaleDateString","outline","_c5","$RefreshReg$"],"sources":["E:/Documents/2024-1 YBIGTA/Ybigta_BLOG/Ybigta-Blog/frontend/src/components/page/BlogListPage.jsx"],"sourcesContent":["import React from \"react\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { useNavigate, useSearchParams } from \"react-router-dom\";\r\nimport styled, { createGlobalStyle } from \"styled-components\";\r\n\r\nconst Wrapper = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  padding: 40px;\r\n`;\r\n\r\nconst TagContainer = styled.div`\r\n  display: flex;\r\n  flex-direction: row;\r\n  flex-wrap: wrap;\r\n  align-items: center;\r\n  justify-content: center;\r\n  //width: 600px;\r\n  gap: 7px;\r\n`;\r\n\r\nconst CategoryContainer = styled.div`\r\n  display: flex;\r\n  flex-direction: row;\r\n  flex-wrap: wrap;\r\n  align-items: center;\r\n  justify-content: center;\r\n  //width: 600px;\r\n  gap: 7px;\r\n`;\r\n\r\nconst Tags = styled.span`\r\n  padding-top: 3px;\r\n  padding-bottom: 3px;\r\n  padding-right: 8px;\r\n  padding-left: 8px;\r\n  background-color: #ebebeb;\r\n  text-align: center;\r\n  font-size: 13px;\r\n  justify-content: center;\r\n  color: #666666;\r\n  border-radius: 5px;\r\n`;\r\n\r\nconst BlogListPage = () => {\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n  const [posts, setPosts] = useState([]);\r\n  const [selectedTags, setSelectedTags] = useState([]);\r\n  const [selectedCategory, setSelectedCategory] = useState(\"\");\r\n  const [currentPage, setCurrentPage] = useState(1);\r\n  const [searchParams, setSearchParams] = useSearchParams();\r\n\r\n      // 페이지 변경 처리\r\n      const handlePageClick = (data) => {\r\n        let selectedPage = data.selected + 1;\r\n        setCurrentPage(selectedPage);\r\n        // 페이지 변경 시 쿼리 파라미터 업데이트 및 데이터 재요청\r\n        const searchParams = new URLSearchParams(window.location.search);\r\n        searchParams.set('page', selectedPage);\r\n        navigate(`/?${searchParams}`);\r\n    };\r\n\r\n  // 페이지 이동\r\n  const navigate = useNavigate();\r\n\r\n  // 필터링 초기화\r\n  const resetFilters = () => {\r\n    setSelectedTags([]);\r\n    setSelectedCategory(\"\");\r\n    setSearchParams({});\r\n  };\r\n\r\n  // 날짜 정렬\r\n  const sortPostsByDate = (posts) => {\r\n    return posts.sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt));\r\n  };\r\n\r\n  // 초기 태그와 카테고리 목록 상태 추가\r\n  const [allTags, setAllTags] = useState([]);\r\n  const [allCategories, setAllCategories] = useState([]);\r\n\r\n\r\n  // 초기 데이터 로딩\r\n  useEffect(() => {\r\n    // 전체 태그와 카테고리 로딩\r\n    const fetchAllTagsAndCategories = async () => {\r\n      try {\r\n        const tagsResponse = await fetch(\"http://localhost:8000/tags\");\r\n        const categoriesResponse = await fetch(\r\n          \"http://localhost:8000/categories\"\r\n        );\r\n        if (!tagsResponse.ok || !categoriesResponse.ok) {\r\n          throw new Error(\"Failed to fetch\");\r\n        }\r\n        const tagsData = await tagsResponse.json();\r\n        const categoriesData = await categoriesResponse.json();\r\n\r\n        setAllTags(tagsData);\r\n        setAllCategories(categoriesData);\r\n      } catch (error) {\r\n        setError(error.message);\r\n      }\r\n    };\r\n\r\n    fetchAllTagsAndCategories();\r\n  }, []); // 빈 의존성 배열로 마운트 시에만 실행\r\n\r\n\r\n  useEffect(() => {\r\n    // URL 쿼리 파라미터를 사용하여 백엔드 요청 URL 구성\r\n    const tagsFromURL = searchParams.get(\"tags\");\r\n    const categoryFromURL = searchParams.get(\"cat\");\r\n\r\n    let queryParams = new URLSearchParams();\r\n\r\n    // tagsFromURL이 있으면 각 태그를 queryParams에 추가\r\n    if (tagsFromURL) {\r\n      tagsFromURL.split(\"&\").forEach((tag) => {\r\n        queryParams.append(\"tags\", tag);\r\n      });\r\n    }\r\n\r\n    // categoryFromURL이 있으면 queryParams에 추가\r\n    if (categoryFromURL) {\r\n      queryParams.set(\"cat\", categoryFromURL);\r\n    }\r\n\r\n    const fetchPosts = async () => {\r\n      try {\r\n        setLoading(true);\r\n        setError(null);\r\n\r\n        const response = await fetch(\r\n          `http://localhost:8000/posts/?${queryParams}`\r\n        );\r\n        if (!response.ok) {\r\n          throw new Error(\"Failed to fetch posts\");\r\n        }\r\n        const data = await response.json();\r\n        const sortedPosts = sortPostsByDate(data); // 받아온 데이터를 날짜 순으로 정렬\r\n        setPosts(sortedPosts);\r\n      } catch (error) {\r\n        setError(error.message);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchPosts();\r\n  }, [searchParams]); // searchParams의 변화에 따라 실행\r\n\r\n  // 글 제목 클릭 시 해당 글의 상세 페이지로 이동하는 함수\r\n  const handlePostClick = (postId) => {\r\n    navigate(`/posts/${postId}`);\r\n  };\r\n\r\n  // 태그 단일선택 처리 (공통사용)\r\n  const handleTagClick = (tag, event) => {\r\n    event.stopPropagation();\r\n    navigate(`/?tags=${tag}`);\r\n  };\r\n\r\n  // 태그 다중선택 처리\r\n  const handleTagChange = (tag) => {\r\n    const newSelectedTags = selectedTags.includes(tag)\r\n      ? selectedTags.filter((t) => t !== tag)\r\n      : [...selectedTags, tag];\r\n    setSelectedTags(newSelectedTags);\r\n    setSearchParams({ tags: newSelectedTags.join(\"&\"), cat: selectedCategory });\r\n  };\r\n\r\n  // 카테고리 선택 처리\r\n  const handleCategoryChange = (category) => {\r\n    const isDeselecting = selectedCategory === category || category === \"ALL\";\r\n    const newCategory = isDeselecting ? \"\" : category;\r\n    setSelectedCategory(newCategory);\r\n\r\n    if (newCategory === \"\") {\r\n      setSearchParams(\r\n        selectedTags.length > 0 ? { tags: selectedTags.join(\"&\") } : {}\r\n      );\r\n    } else {\r\n      setSearchParams({ tags: selectedTags.join(\"&\"), cat: newCategory });\r\n    }\r\n  };\r\n\r\n  // // posts Data 필터링\r\n  // const filteredPosts = posts.filter(post => {\r\n  //     const hasSelectedTags = selectedTags.length === 0 || selectedTags.every(tag => post.tags.includes(tag));\r\n  //     const hasSelectedCategory = !selectedCategory || post.categories.includes(selectedCategory);\r\n  //     return hasSelectedTags && hasSelectedCategory;\r\n  // });\r\n\r\n  // const allTags = posts.reduce((acc, post) => [...acc, ...post.tags], []);\r\n  // const uniqueTags = [...new Set(allTags)];\r\n\r\n  // const uniqueTags = [...new Set(posts.flatMap((post) => post.tags))];\r\n  // const uniqueCategories = [...new Set(posts.map((post) => post.categories))];\r\n\r\n  if (loading) return <div>Loading...</div>;\r\n  if (error) return <div>Error: {error}</div>;\r\n\r\n  return (\r\n    <Wrapper>\r\n      <h1 onClick={resetFilters} style={{ cursor: \"pointer\" }}>\r\n        블로그 메인/리스트 페이지\r\n      </h1>\r\n\r\n        {/* 전체 태그 렌더링 */}\r\n        <TagContainer>\r\n        {allTags.map((tag, tagIndex) => (\r\n            <Tags key={tagIndex} onClick={() => handleTagChange(tag)} style={{marginRight: \"10px\", cursor: 'pointer', gap: \"10px\" }}>\r\n            #{tag}{selectedTags.includes(tag) ? ' (Selected)' : ''}\r\n            </Tags>     \r\n        ))}\r\n        </TagContainer>\r\n\r\n        {/* 전체 카테고리 렌더링 */}\r\n        <CategoryContainer>\r\n            {allCategories.map((category, index) => (\r\n            <Tags key={index} onClick={() => handleCategoryChange(category)} style={{marginRight: \"10px\", cursor: 'pointer', gap: \"10px\" }}>\r\n                {selectedCategory === category ? `${category} (Selected)` : category}\r\n            </Tags>\r\n            ))}\r\n        </CategoryContainer>\r\n\r\n\r\n      {/* 포스트 목록 렌더링 및 각종 click 이동 이벤트 */}\r\n      <div>\r\n        {posts.map((post, index) => (\r\n          <div key={index}>\r\n            {/* 제목 클릭 시 포스트로 이동 */}\r\n            <h2\r\n              onClick={() => handlePostClick(post._id)}\r\n              style={{ cursor: \"pointer\" }}\r\n            >\r\n              {post.title}\r\n            </h2>\r\n\r\n            {/* 작성자, 프사, 날짜, 아웃라인 */}\r\n            <div\r\n              style={{\r\n                display: \"flex\",\r\n                alignItems: \"center\",\r\n                fontSize: \"16px\",\r\n                fontWeight: \"bold\",\r\n                color: \"gray\",\r\n              }}\r\n            >\r\n              <span>{post.author}</span>\r\n              <img\r\n                src={post.profileImagePath}\r\n                alt=\"Author's profile\"\r\n                style={{ width: \"30px\", height: \"30px\", borderRadius: \"50%\" }}\r\n              />\r\n              <span\r\n                style={{\r\n                  margin: \"0 10px\",\r\n                  fontWeight: \"bold\",\r\n                  color: \"lightgray\",\r\n                }}\r\n              >\r\n                {new Date(post.createdAt).toLocaleDateString()}\r\n              </span>\r\n            </div>\r\n\r\n            <h4>{post.outline}</h4>\r\n\r\n            {/* 태그 및 단일 필터링 */}\r\n            {post.tags.map((tag, tagIndex) => (\r\n              <Tags\r\n                key={tagIndex}\r\n                onClick={(event) => handleTagClick(tag, event)}\r\n                style={{ marginRight: \"10px\", cursor: \"pointer\", gap: \"10px\" }}\r\n              >\r\n                #{tag}\r\n              </Tags>\r\n            ))}\r\n          </div>\r\n        ))}\r\n      </div>\r\n    </Wrapper>\r\n  );\r\n};\r\n\r\nexport default BlogListPage;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}