{"ast":null,"code":"/*\r\nLanguage: Scheme\r\nDescription: Scheme is a programming language in the Lisp family.\r\n             (keywords based on http://community.schemewiki.org/?scheme-keywords)\r\nAuthor: JP Verkamp <me@jverkamp.com>\r\nContributors: Ivan Sagalaev <maniac@softwaremaniacs.org>\r\nOrigin: clojure.js\r\nWebsite: http://community.schemewiki.org/?what-is-scheme\r\nCategory: lisp\r\n*/\n\nfunction scheme(hljs) {\n  const SCHEME_IDENT_RE = '[^\\\\(\\\\)\\\\[\\\\]\\\\{\\\\}\",\\'`;#|\\\\\\\\\\\\s]+';\n  const SCHEME_SIMPLE_NUMBER_RE = '(-|\\\\+)?\\\\d+([./]\\\\d+)?';\n  const SCHEME_COMPLEX_NUMBER_RE = SCHEME_SIMPLE_NUMBER_RE + '[+\\\\-]' + SCHEME_SIMPLE_NUMBER_RE + 'i';\n  const KEYWORDS = {\n    $pattern: SCHEME_IDENT_RE,\n    'builtin-name': 'case-lambda call/cc class define-class exit-handler field import ' + 'inherit init-field interface let*-values let-values let/ec mixin ' + 'opt-lambda override protect provide public rename require ' + 'require-for-syntax syntax syntax-case syntax-error unit/sig unless ' + 'when with-syntax and begin call-with-current-continuation ' + 'call-with-input-file call-with-output-file case cond define ' + 'define-syntax delay do dynamic-wind else for-each if lambda let let* ' + 'let-syntax letrec letrec-syntax map or syntax-rules \\' * + , ,@ - ... / ' + '; < <= = => > >= ` abs acos angle append apply asin assoc assq assv atan ' + 'boolean? caar cadr call-with-input-file call-with-output-file ' + 'call-with-values car cdddar cddddr cdr ceiling char->integer ' + 'char-alphabetic? char-ci<=? char-ci<? char-ci=? char-ci>=? char-ci>? ' + 'char-downcase char-lower-case? char-numeric? char-ready? char-upcase ' + 'char-upper-case? char-whitespace? char<=? char<? char=? char>=? char>? ' + 'char? close-input-port close-output-port complex? cons cos ' + 'current-input-port current-output-port denominator display eof-object? ' + 'eq? equal? eqv? eval even? exact->inexact exact? exp expt floor ' + 'force gcd imag-part inexact->exact inexact? input-port? integer->char ' + 'integer? interaction-environment lcm length list list->string ' + 'list->vector list-ref list-tail list? load log magnitude make-polar ' + 'make-rectangular make-string make-vector max member memq memv min ' + 'modulo negative? newline not null-environment null? number->string ' + 'number? numerator odd? open-input-file open-output-file output-port? ' + 'pair? peek-char port? positive? procedure? quasiquote quote quotient ' + 'rational? rationalize read read-char real-part real? remainder reverse ' + 'round scheme-report-environment set! set-car! set-cdr! sin sqrt string ' + 'string->list string->number string->symbol string-append string-ci<=? ' + 'string-ci<? string-ci=? string-ci>=? string-ci>? string-copy ' + 'string-fill! string-length string-ref string-set! string<=? string<? ' + 'string=? string>=? string>? string? substring symbol->string symbol? ' + 'tan transcript-off transcript-on truncate values vector ' + 'vector->list vector-fill! vector-length vector-ref vector-set! ' + 'with-input-from-file with-output-to-file write write-char zero?'\n  };\n  const LITERAL = {\n    className: 'literal',\n    begin: '(#t|#f|#\\\\\\\\' + SCHEME_IDENT_RE + '|#\\\\\\\\.)'\n  };\n  const NUMBER = {\n    className: 'number',\n    variants: [{\n      begin: SCHEME_SIMPLE_NUMBER_RE,\n      relevance: 0\n    }, {\n      begin: SCHEME_COMPLEX_NUMBER_RE,\n      relevance: 0\n    }, {\n      begin: '#b[0-1]+(/[0-1]+)?'\n    }, {\n      begin: '#o[0-7]+(/[0-7]+)?'\n    }, {\n      begin: '#x[0-9a-f]+(/[0-9a-f]+)?'\n    }]\n  };\n  const STRING = hljs.QUOTE_STRING_MODE;\n  const COMMENT_MODES = [hljs.COMMENT(';', '$', {\n    relevance: 0\n  }), hljs.COMMENT('#\\\\|', '\\\\|#')];\n  const IDENT = {\n    begin: SCHEME_IDENT_RE,\n    relevance: 0\n  };\n  const QUOTED_IDENT = {\n    className: 'symbol',\n    begin: '\\'' + SCHEME_IDENT_RE\n  };\n  const BODY = {\n    endsWithParent: true,\n    relevance: 0\n  };\n  const QUOTED_LIST = {\n    variants: [{\n      begin: /'/\n    }, {\n      begin: '`'\n    }],\n    contains: [{\n      begin: '\\\\(',\n      end: '\\\\)',\n      contains: ['self', LITERAL, STRING, NUMBER, IDENT, QUOTED_IDENT]\n    }]\n  };\n  const NAME = {\n    className: 'name',\n    relevance: 0,\n    begin: SCHEME_IDENT_RE,\n    keywords: KEYWORDS\n  };\n  const LAMBDA = {\n    begin: /lambda/,\n    endsWithParent: true,\n    returnBegin: true,\n    contains: [NAME, {\n      endsParent: true,\n      variants: [{\n        begin: /\\(/,\n        end: /\\)/\n      }, {\n        begin: /\\[/,\n        end: /\\]/\n      }],\n      contains: [IDENT]\n    }]\n  };\n  const LIST = {\n    variants: [{\n      begin: '\\\\(',\n      end: '\\\\)'\n    }, {\n      begin: '\\\\[',\n      end: '\\\\]'\n    }],\n    contains: [LAMBDA, NAME, BODY]\n  };\n  BODY.contains = [LITERAL, NUMBER, STRING, IDENT, QUOTED_IDENT, QUOTED_LIST, LIST].concat(COMMENT_MODES);\n  return {\n    name: 'Scheme',\n    illegal: /\\S/,\n    contains: [hljs.SHEBANG(), NUMBER, STRING, QUOTED_IDENT, QUOTED_LIST, LIST].concat(COMMENT_MODES)\n  };\n}\nmodule.exports = scheme;","map":{"version":3,"names":["scheme","hljs","SCHEME_IDENT_RE","SCHEME_SIMPLE_NUMBER_RE","SCHEME_COMPLEX_NUMBER_RE","KEYWORDS","$pattern","LITERAL","className","begin","NUMBER","variants","relevance","STRING","QUOTE_STRING_MODE","COMMENT_MODES","COMMENT","IDENT","QUOTED_IDENT","BODY","endsWithParent","QUOTED_LIST","contains","end","NAME","keywords","LAMBDA","returnBegin","endsParent","LIST","concat","name","illegal","SHEBANG","module","exports"],"sources":["C:/Users/rjalr/OneDrive/바탕 화면/ybigta/ybigta_blog_2/Ybigta-Blog/frontend/node_modules/highlight.js/lib/languages/scheme.js"],"sourcesContent":["/*\r\nLanguage: Scheme\r\nDescription: Scheme is a programming language in the Lisp family.\r\n             (keywords based on http://community.schemewiki.org/?scheme-keywords)\r\nAuthor: JP Verkamp <me@jverkamp.com>\r\nContributors: Ivan Sagalaev <maniac@softwaremaniacs.org>\r\nOrigin: clojure.js\r\nWebsite: http://community.schemewiki.org/?what-is-scheme\r\nCategory: lisp\r\n*/\r\n\r\nfunction scheme(hljs) {\r\n  const SCHEME_IDENT_RE = '[^\\\\(\\\\)\\\\[\\\\]\\\\{\\\\}\",\\'`;#|\\\\\\\\\\\\s]+';\r\n  const SCHEME_SIMPLE_NUMBER_RE = '(-|\\\\+)?\\\\d+([./]\\\\d+)?';\r\n  const SCHEME_COMPLEX_NUMBER_RE = SCHEME_SIMPLE_NUMBER_RE + '[+\\\\-]' + SCHEME_SIMPLE_NUMBER_RE + 'i';\r\n  const KEYWORDS = {\r\n    $pattern: SCHEME_IDENT_RE,\r\n    'builtin-name':\r\n      'case-lambda call/cc class define-class exit-handler field import ' +\r\n      'inherit init-field interface let*-values let-values let/ec mixin ' +\r\n      'opt-lambda override protect provide public rename require ' +\r\n      'require-for-syntax syntax syntax-case syntax-error unit/sig unless ' +\r\n      'when with-syntax and begin call-with-current-continuation ' +\r\n      'call-with-input-file call-with-output-file case cond define ' +\r\n      'define-syntax delay do dynamic-wind else for-each if lambda let let* ' +\r\n      'let-syntax letrec letrec-syntax map or syntax-rules \\' * + , ,@ - ... / ' +\r\n      '; < <= = => > >= ` abs acos angle append apply asin assoc assq assv atan ' +\r\n      'boolean? caar cadr call-with-input-file call-with-output-file ' +\r\n      'call-with-values car cdddar cddddr cdr ceiling char->integer ' +\r\n      'char-alphabetic? char-ci<=? char-ci<? char-ci=? char-ci>=? char-ci>? ' +\r\n      'char-downcase char-lower-case? char-numeric? char-ready? char-upcase ' +\r\n      'char-upper-case? char-whitespace? char<=? char<? char=? char>=? char>? ' +\r\n      'char? close-input-port close-output-port complex? cons cos ' +\r\n      'current-input-port current-output-port denominator display eof-object? ' +\r\n      'eq? equal? eqv? eval even? exact->inexact exact? exp expt floor ' +\r\n      'force gcd imag-part inexact->exact inexact? input-port? integer->char ' +\r\n      'integer? interaction-environment lcm length list list->string ' +\r\n      'list->vector list-ref list-tail list? load log magnitude make-polar ' +\r\n      'make-rectangular make-string make-vector max member memq memv min ' +\r\n      'modulo negative? newline not null-environment null? number->string ' +\r\n      'number? numerator odd? open-input-file open-output-file output-port? ' +\r\n      'pair? peek-char port? positive? procedure? quasiquote quote quotient ' +\r\n      'rational? rationalize read read-char real-part real? remainder reverse ' +\r\n      'round scheme-report-environment set! set-car! set-cdr! sin sqrt string ' +\r\n      'string->list string->number string->symbol string-append string-ci<=? ' +\r\n      'string-ci<? string-ci=? string-ci>=? string-ci>? string-copy ' +\r\n      'string-fill! string-length string-ref string-set! string<=? string<? ' +\r\n      'string=? string>=? string>? string? substring symbol->string symbol? ' +\r\n      'tan transcript-off transcript-on truncate values vector ' +\r\n      'vector->list vector-fill! vector-length vector-ref vector-set! ' +\r\n      'with-input-from-file with-output-to-file write write-char zero?'\r\n  };\r\n\r\n  const LITERAL = {\r\n    className: 'literal',\r\n    begin: '(#t|#f|#\\\\\\\\' + SCHEME_IDENT_RE + '|#\\\\\\\\.)'\r\n  };\r\n\r\n  const NUMBER = {\r\n    className: 'number',\r\n    variants: [\r\n      {\r\n        begin: SCHEME_SIMPLE_NUMBER_RE,\r\n        relevance: 0\r\n      },\r\n      {\r\n        begin: SCHEME_COMPLEX_NUMBER_RE,\r\n        relevance: 0\r\n      },\r\n      {\r\n        begin: '#b[0-1]+(/[0-1]+)?'\r\n      },\r\n      {\r\n        begin: '#o[0-7]+(/[0-7]+)?'\r\n      },\r\n      {\r\n        begin: '#x[0-9a-f]+(/[0-9a-f]+)?'\r\n      }\r\n    ]\r\n  };\r\n\r\n  const STRING = hljs.QUOTE_STRING_MODE;\r\n\r\n  const COMMENT_MODES = [\r\n    hljs.COMMENT(\r\n      ';',\r\n      '$',\r\n      {\r\n        relevance: 0\r\n      }\r\n    ),\r\n    hljs.COMMENT('#\\\\|', '\\\\|#')\r\n  ];\r\n\r\n  const IDENT = {\r\n    begin: SCHEME_IDENT_RE,\r\n    relevance: 0\r\n  };\r\n\r\n  const QUOTED_IDENT = {\r\n    className: 'symbol',\r\n    begin: '\\'' + SCHEME_IDENT_RE\r\n  };\r\n\r\n  const BODY = {\r\n    endsWithParent: true,\r\n    relevance: 0\r\n  };\r\n\r\n  const QUOTED_LIST = {\r\n    variants: [\r\n      {\r\n        begin: /'/\r\n      },\r\n      {\r\n        begin: '`'\r\n      }\r\n    ],\r\n    contains: [\r\n      {\r\n        begin: '\\\\(',\r\n        end: '\\\\)',\r\n        contains: [\r\n          'self',\r\n          LITERAL,\r\n          STRING,\r\n          NUMBER,\r\n          IDENT,\r\n          QUOTED_IDENT\r\n        ]\r\n      }\r\n    ]\r\n  };\r\n\r\n  const NAME = {\r\n    className: 'name',\r\n    relevance: 0,\r\n    begin: SCHEME_IDENT_RE,\r\n    keywords: KEYWORDS\r\n  };\r\n\r\n  const LAMBDA = {\r\n    begin: /lambda/,\r\n    endsWithParent: true,\r\n    returnBegin: true,\r\n    contains: [\r\n      NAME,\r\n      {\r\n        endsParent: true,\r\n        variants: [\r\n          {\r\n            begin: /\\(/,\r\n            end: /\\)/\r\n          },\r\n          {\r\n            begin: /\\[/,\r\n            end: /\\]/\r\n          }\r\n        ],\r\n        contains: [ IDENT ]\r\n      }\r\n    ]\r\n  };\r\n\r\n  const LIST = {\r\n    variants: [\r\n      {\r\n        begin: '\\\\(',\r\n        end: '\\\\)'\r\n      },\r\n      {\r\n        begin: '\\\\[',\r\n        end: '\\\\]'\r\n      }\r\n    ],\r\n    contains: [\r\n      LAMBDA,\r\n      NAME,\r\n      BODY\r\n    ]\r\n  };\r\n\r\n  BODY.contains = [\r\n    LITERAL,\r\n    NUMBER,\r\n    STRING,\r\n    IDENT,\r\n    QUOTED_IDENT,\r\n    QUOTED_LIST,\r\n    LIST\r\n  ].concat(COMMENT_MODES);\r\n\r\n  return {\r\n    name: 'Scheme',\r\n    illegal: /\\S/,\r\n    contains: [\r\n      hljs.SHEBANG(),\r\n      NUMBER,\r\n      STRING,\r\n      QUOTED_IDENT,\r\n      QUOTED_LIST,\r\n      LIST\r\n    ].concat(COMMENT_MODES)\r\n  };\r\n}\r\n\r\nmodule.exports = scheme;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}