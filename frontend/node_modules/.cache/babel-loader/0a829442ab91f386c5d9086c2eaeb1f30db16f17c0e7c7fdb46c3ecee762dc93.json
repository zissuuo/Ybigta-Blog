{"ast":null,"code":"var _jsxFileName = \"E:\\\\Documents\\\\2024-1 YBIGTA\\\\Ybigta_BLOG\\\\Ybigta-Blog\\\\frontend\\\\src\\\\components\\\\page\\\\BlogListPage.jsx\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport { useNavigate, useSearchParams } from 'react-router-dom';\nimport styled, { createGlobalStyle } from 'styled-components';\nimport { useEffect, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Wrapper = styled.div`\n    display: flex;\n    flex-direction: column;\n    padding: 40px;\n`;\n_c = Wrapper;\nconst TagContainer = styled.div`\n    display: flex;\n    flex-direction: row;\n    flex-wrap: wrap;\n    align-items: center;\n    justify-content: center;\n    //width: 600px;\n    gap: 7px;\n`;\n_c2 = TagContainer;\nconst CategoryContainer = styled.div`\n    display: flex;\n    flex-direction: row;\n    flex-wrap: wrap;\n    align-items: center;\n    justify-content: center;\n    //width: 600px;\n    gap: 7px;\n`;\n_c3 = CategoryContainer;\nconst Tags = styled.span`\n    padding-top: 3px;\n    padding-bottom: 3px;\n    padding-right: 8px;\n    padding-left: 8px;\n    background-color: #EBEBEB;\n    text-align: center;\n    font-size: 13px;\n    justify-content: center;\n    color: #666666;\n    border-radius: 5px;\n`;\n_c4 = Tags;\nconst BlogListPage = () => {\n  _s();\n  // 로딩 및 에러 표시 \n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  // 서버로부터 받은 포스트들을 저장할 상태\n  const [posts, setPosts] = useState([]);\n\n  // 태그 및 카테고리 정의\n  const [tags, setTags] = useState([]);\n  const [categories, setCategories] = useState(['ALL', 'Data Analytics TEAM', 'Data Engineering TEAM', 'Data Science TEAM']);\n  const [selectedTags, setSelectedTags] = useState([]);\n  const [selectedCategory, setSelectedCategory] = useState('');\n  const [searchParams, setSearchParams] = useSearchParams();\n\n  // 페이지 이동\n  const navigate = useNavigate();\n\n  // 초기 포스트 페이지 로딩\n  useEffect(() => {\n    fetch('http://localhost:8000/posts/').then(response => {\n      if (!response.ok) {\n        throw new Error('Failed to fetch posts');\n      }\n      return response.json();\n    }).then(data => {\n      setPosts(data);\n      setLoading(false);\n    }).catch(error => {\n      setError(error.message);\n      setLoading(false);\n    });\n  }, []);\n\n  // 사용자의 태그, 카테고리 선택에 따른 포스트 목록 업데이트\n  useEffect(() => {\n    const fetchFilteredPosts = async () => {\n      try {\n        const response = await fetch(`http://localhost:8000/posts?${buildQueryString()}`);\n        if (!response.ok) throw new Error('Network response was not ok');\n        const data = await response.json();\n        setPosts(data);\n      } catch (error) {\n        setError(error.message);\n      } finally {\n        setLoading(false);\n      }\n    };\n    if (searchParams.toString()) {\n      // URL의 쿼리 파라미터가 변경될 때마다 실행\n      fetchFilteredPosts();\n    }\n  }, [searchParams]); // 이 useEffect는 searchParams의 변화에 따라 실행됩니다.\n\n  // 글 제목 클릭 시 해당 글의 상세 페이지로 이동하는 함수\n  const handlePostClick = postId => {\n    navigate(`/posts/${postId}`);\n  };\n\n  // 태그 클릭 시 URL 업데이트\n  const handleTagChange = tag => {\n    const newSelectedTags = selectedTags.includes(tag) ? selectedTags.filter(t => t !== tag) : [...selectedTags, tag];\n    setSelectedTags(newSelectedTags);\n    updateURL(newSelectedTags, selectedCategory);\n  };\n\n  // 카테고리 클릭 시 URL 업데이트\n  const handleCategoryChange = category => {\n    setSelectedCategory(category === 'ALL' ? '' : category);\n    updateURL(selectedTags, category === 'ALL' ? '' : category);\n  };\n\n  // URL 업데이트\n  const updateURL = (tags, category) => {\n    const tagsQuery = tags.join('&');\n    setSearchParams({\n      tags: tagsQuery,\n      cat: category\n    });\n  };\n\n  // Query String\n  const buildQueryString = () => {\n    const tagsQuery = selectedTags.join('&');\n    return `tags=${tagsQuery}${selectedCategory ? `&cat=${selectedCategory}` : ''}`;\n  };\n\n  // 태그 버튼 클릭 시 해당 태그를 가진 글로 필터링하는 로직\n  // const filterPostsByTag = (tag) => {\n  //     navigate(`/tags/${encodeURIComponent(tag)}`);\n  //   };\n\n  // // 상단 태그 버튼 클릭 시 이벤트\n  // const handleTagClick = (tag, event) => {\n  //     event.stopPropagation();\n  //     filterPostsByTag(tag);\n  // };\n\n  const allTags = posts.reduce((acc, post) => [...acc, ...post.tags], []);\n  const uniqueTags = [...new Set(allTags)];\n  if (loading) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"Loading...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 153,\n    columnNumber: 25\n  }, this);\n  if (error) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [\"Error: \", error]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 154,\n    columnNumber: 23\n  }, this);\n  return /*#__PURE__*/_jsxDEV(Wrapper, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"\\uBE14\\uB85C\\uADF8 \\uBA54\\uC778/\\uB9AC\\uC2A4\\uD2B8 \\uD398\\uC774\\uC9C0\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(TagContainer, {\n      children: uniqueTags.map((tag, tagIndex) => /*#__PURE__*/_jsxDEV(Tags, {\n        style: {\n          marginRight: \"10px\",\n          cursor: 'pointer',\n          gap: \"10px\"\n        },\n        onClick: event => handleTagChange(tag, event),\n        children: [\"#\", tag]\n      }, tagIndex, true, {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 17\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(CategoryContainer, {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: categories.map((category, index) => /*#__PURE__*/_jsxDEV(Buttons, {\n          onClick: () => handleCategoryChange(category),\n          style: {\n            margin: \"10px\"\n          },\n          children: selectedCategory === category ? `<Selected> ${category}` : category\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 173,\n          columnNumber: 17\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: posts.map((post, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        onClick: () => handlePostClick(post._id),\n        style: {\n          cursor: 'pointer'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: post.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 184,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n          children: post.outline\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 185,\n          columnNumber: 21\n        }, this), post.tags.map((tag, tagIndex) => /*#__PURE__*/_jsxDEV(Tags, {\n          style: {\n            marginRight: \"10px\",\n            cursor: 'pointer',\n            gap: \"10px\"\n          },\n          children: [\"#\", tag]\n        }, tagIndex, true, {\n          fileName: _jsxFileName,\n          lineNumber: 187,\n          columnNumber: 25\n        }, this))]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 17\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 157,\n    columnNumber: 5\n  }, this);\n};\n_s(BlogListPage, \"46qRWpAjijJiKSH0FRY+8c8d1Dc=\", false, function () {\n  return [useSearchParams, useNavigate];\n});\n_c5 = BlogListPage;\nexport default BlogListPage;\nvar _c, _c2, _c3, _c4, _c5;\n$RefreshReg$(_c, \"Wrapper\");\n$RefreshReg$(_c2, \"TagContainer\");\n$RefreshReg$(_c3, \"CategoryContainer\");\n$RefreshReg$(_c4, \"Tags\");\n$RefreshReg$(_c5, \"BlogListPage\");","map":{"version":3,"names":["React","useNavigate","useSearchParams","styled","createGlobalStyle","useEffect","useState","jsxDEV","_jsxDEV","Wrapper","div","_c","TagContainer","_c2","CategoryContainer","_c3","Tags","span","_c4","BlogListPage","_s","loading","setLoading","error","setError","posts","setPosts","tags","setTags","categories","setCategories","selectedTags","setSelectedTags","selectedCategory","setSelectedCategory","searchParams","setSearchParams","navigate","fetch","then","response","ok","Error","json","data","catch","message","fetchFilteredPosts","buildQueryString","toString","handlePostClick","postId","handleTagChange","tag","newSelectedTags","includes","filter","t","updateURL","handleCategoryChange","category","tagsQuery","join","cat","allTags","reduce","acc","post","uniqueTags","Set","children","fileName","_jsxFileName","lineNumber","columnNumber","map","tagIndex","style","marginRight","cursor","gap","onClick","event","index","Buttons","margin","_id","title","outline","_c5","$RefreshReg$"],"sources":["E:/Documents/2024-1 YBIGTA/Ybigta_BLOG/Ybigta-Blog/frontend/src/components/page/BlogListPage.jsx"],"sourcesContent":["import React from 'react';\r\nimport { useNavigate, useSearchParams } from 'react-router-dom';\r\nimport styled, { createGlobalStyle } from 'styled-components';\r\nimport { useEffect, useState } from 'react';\r\n\r\nconst Wrapper = styled.div`\r\n    display: flex;\r\n    flex-direction: column;\r\n    padding: 40px;\r\n`;\r\n\r\nconst TagContainer = styled.div`\r\n    display: flex;\r\n    flex-direction: row;\r\n    flex-wrap: wrap;\r\n    align-items: center;\r\n    justify-content: center;\r\n    //width: 600px;\r\n    gap: 7px;\r\n`;\r\n\r\nconst CategoryContainer = styled.div`\r\n    display: flex;\r\n    flex-direction: row;\r\n    flex-wrap: wrap;\r\n    align-items: center;\r\n    justify-content: center;\r\n    //width: 600px;\r\n    gap: 7px;\r\n`;\r\n\r\nconst Tags = styled.span`\r\n    padding-top: 3px;\r\n    padding-bottom: 3px;\r\n    padding-right: 8px;\r\n    padding-left: 8px;\r\n    background-color: #EBEBEB;\r\n    text-align: center;\r\n    font-size: 13px;\r\n    justify-content: center;\r\n    color: #666666;\r\n    border-radius: 5px;\r\n`;\r\n\r\nconst BlogListPage = () => {\r\n\r\n    // 로딩 및 에러 표시 \r\n    const [loading, setLoading] = useState(true);\r\n    const [error, setError] = useState(null);\r\n\r\n    // 서버로부터 받은 포스트들을 저장할 상태\r\n    const [posts, setPosts] = useState([]); \r\n\r\n    // 태그 및 카테고리 정의\r\n    const [tags, setTags] = useState([]);\r\n    const [categories, setCategories] = useState(['ALL', 'Data Analytics TEAM', 'Data Engineering TEAM', 'Data Science TEAM', ]);\r\n    const [selectedTags, setSelectedTags] = useState([]);\r\n    const [selectedCategory, setSelectedCategory] = useState('');\r\n\r\n    const [searchParams, setSearchParams] = useSearchParams();\r\n\r\n    // 페이지 이동\r\n    const navigate = useNavigate(); \r\n\r\n    // 초기 포스트 페이지 로딩\r\n    useEffect(() => {\r\n        \r\n        fetch('http://localhost:8000/posts/')\r\n            .then(response => {\r\n                if (!response.ok) {\r\n                    throw new Error('Failed to fetch posts');\r\n                }\r\n                return response.json();\r\n            })\r\n            .then(data => {\r\n                setPosts(data);\r\n                setLoading(false);\r\n            })\r\n            .catch(error => {\r\n                setError(error.message);\r\n                setLoading(false);\r\n            });\r\n        }, []);\r\n    \r\n    // 사용자의 태그, 카테고리 선택에 따른 포스트 목록 업데이트\r\n    useEffect(() => {\r\n        \r\n        const fetchFilteredPosts = async () => {\r\n            try {\r\n              const response = await fetch(`http://localhost:8000/posts?${buildQueryString()}`);\r\n              if (!response.ok) throw new Error('Network response was not ok');\r\n              const data = await response.json();\r\n              setPosts(data);\r\n            } catch (error) {\r\n              setError(error.message);\r\n            } finally {\r\n              setLoading(false);\r\n            }\r\n          };\r\n        \r\n          if (searchParams.toString()) {\r\n            // URL의 쿼리 파라미터가 변경될 때마다 실행\r\n            fetchFilteredPosts();\r\n          }\r\n    }, [searchParams]); // 이 useEffect는 searchParams의 변화에 따라 실행됩니다.\r\n\r\n\r\n    // 글 제목 클릭 시 해당 글의 상세 페이지로 이동하는 함수\r\n    const handlePostClick = (postId) => {\r\n        navigate(`/posts/${postId}`); \r\n      };\r\n    \r\n\r\n    // 태그 클릭 시 URL 업데이트\r\n    const handleTagChange = tag => {\r\n        const newSelectedTags = selectedTags.includes(tag) ? selectedTags.filter(t => t !== tag) : [...selectedTags, tag];\r\n        setSelectedTags(newSelectedTags);\r\n        updateURL(newSelectedTags, selectedCategory);\r\n    };\r\n\r\n    // 카테고리 클릭 시 URL 업데이트\r\n    const handleCategoryChange = category => {\r\n        setSelectedCategory(category === 'ALL' ? '' : category);\r\n        updateURL(selectedTags, category === 'ALL' ? '' : category);\r\n    };\r\n\r\n    // URL 업데이트\r\n    const updateURL = (tags, category) => {\r\n        const tagsQuery = tags.join('&');\r\n        setSearchParams({ tags: tagsQuery, cat: category });\r\n    };\r\n\r\n    // Query String\r\n    const buildQueryString = () => {\r\n        const tagsQuery = selectedTags.join('&');\r\n        return `tags=${tagsQuery}${selectedCategory ? `&cat=${selectedCategory}` : ''}`;\r\n    };\r\n\r\n    // 태그 버튼 클릭 시 해당 태그를 가진 글로 필터링하는 로직\r\n    // const filterPostsByTag = (tag) => {\r\n    //     navigate(`/tags/${encodeURIComponent(tag)}`);\r\n    //   };\r\n    \r\n    // // 상단 태그 버튼 클릭 시 이벤트\r\n    // const handleTagClick = (tag, event) => {\r\n    //     event.stopPropagation();\r\n    //     filterPostsByTag(tag);\r\n    // };\r\n\r\n    const allTags = posts.reduce((acc, post) => [...acc, ...post.tags], []);\r\n    const uniqueTags = [...new Set(allTags)];\r\n\r\n    if (loading) return <div>Loading...</div>;\r\n    if (error) return <div>Error: {error}</div>;\r\n\r\n    return (\r\n    <Wrapper>\r\n        <h1>블로그 메인/리스트 페이지</h1>\r\n\r\n        {/* 태그 렌더링 */}\r\n        <TagContainer>\r\n            {uniqueTags.map((tag, tagIndex) => (\r\n                <Tags key={tagIndex} style={{marginRight: \"10px\", cursor: 'pointer', gap: \"10px\" }} onClick={(event) => handleTagChange(tag, event)}>\r\n                    #{tag}\r\n                </Tags>     \r\n            ))}\r\n        </TagContainer>\r\n\r\n        {/* 카테고리 버튼 렌더링 */}\r\n        <CategoryContainer>\r\n        <div>\r\n            {categories.map((category, index) => (\r\n                <Buttons key={index} onClick={() => handleCategoryChange(category)} style={{margin: \"10px\"}}>\r\n                    {selectedCategory === category ? `<Selected> ${category}` : category}\r\n                </Buttons>\r\n            ))}\r\n        </div>\r\n        </CategoryContainer>\r\n\r\n        {/* 포스트 목록 렌더링 및 포스트로 이동 */}\r\n        <div>\r\n            {posts.map((post, index) => (\r\n                <div key={index} onClick={() => handlePostClick(post._id)} style={{ cursor: 'pointer' }}>\r\n                    <h2>{post.title}</h2>\r\n                    <h4>{post.outline}</h4>\r\n                    {post.tags.map((tag, tagIndex) => (\r\n                        <Tags key={tagIndex} style={{marginRight: \"10px\", cursor: 'pointer', gap: \"10px\" }}>\r\n                            #{tag}\r\n                        </Tags>\r\n                    ))}\r\n                </div>\r\n            ))}\r\n        </div>\r\n\r\n        {/* 포스트 내용으로 이동 */}\r\n        {/* <div>\r\n            {posts.map((post, index) => (\r\n                <div key={index}>\r\n                    <h2 onClick={() => handlePostClick(post._id)} style={{ cursor: 'pointer' }}>\r\n                        {post.title}\r\n                    </h2>\r\n                    <h4>{post.outline}</h4>\r\n                    {post.tags.map((tag, tagIndex) => (\r\n                        <Tags key={tagIndex} style={{marginRight: \"10px\", cursor: 'pointer', gap: \"10px\" }} onClick={(event) => handleTagClick(tag, event)}>\r\n                            #{tag}\r\n                        </Tags>\r\n                    ))}\r\n                </div>\r\n            ))}\r\n        </div>  */}\r\n\r\n    </Wrapper>\r\n    );\r\n};\r\n\r\nexport default BlogListPage;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}