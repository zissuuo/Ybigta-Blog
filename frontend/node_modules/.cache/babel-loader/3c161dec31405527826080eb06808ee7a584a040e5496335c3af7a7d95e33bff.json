{"ast":null,"code":"'use strict';\n\nmodule.exports = livescript;\nlivescript.displayName = 'livescript';\nlivescript.aliases = [];\nfunction livescript(Prism) {\n  Prism.languages.livescript = {\n    comment: [{\n      pattern: /(^|[^\\\\])\\/\\*[\\s\\S]*?\\*\\//,\n      lookbehind: true\n    }, {\n      pattern: /(^|[^\\\\])#.*/,\n      lookbehind: true\n    }],\n    'interpolated-string': {\n      /* Look-behind and look-ahead prevents wrong behavior of the greedy pattern\r\n       * forcing it to match \"\"\"-quoted string when it would otherwise match \"-quoted first. */\n      pattern: /(^|[^\"])(\"\"\"|\")(?:\\\\[\\s\\S]|(?!\\2)[^\\\\])*\\2(?!\")/,\n      lookbehind: true,\n      greedy: true,\n      inside: {\n        variable: {\n          pattern: /(^|[^\\\\])#[a-z_](?:-?[a-z]|[\\d_])*/m,\n          lookbehind: true\n        },\n        interpolation: {\n          pattern: /(^|[^\\\\])#\\{[^}]+\\}/m,\n          lookbehind: true,\n          inside: {\n            'interpolation-punctuation': {\n              pattern: /^#\\{|\\}$/,\n              alias: 'variable'\n            } // See rest below\n          }\n        },\n        string: /[\\s\\S]+/\n      }\n    },\n    string: [{\n      pattern: /('''|')(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])*\\1/,\n      greedy: true\n    }, {\n      pattern: /<\\[[\\s\\S]*?\\]>/,\n      greedy: true\n    }, /\\\\[^\\s,;\\])}]+/],\n    regex: [{\n      pattern: /\\/\\/(?:\\[[^\\r\\n\\]]*\\]|\\\\.|(?!\\/\\/)[^\\\\\\[])+\\/\\/[gimyu]{0,5}/,\n      greedy: true,\n      inside: {\n        comment: {\n          pattern: /(^|[^\\\\])#.*/,\n          lookbehind: true\n        }\n      }\n    }, {\n      pattern: /\\/(?:\\[[^\\r\\n\\]]*\\]|\\\\.|[^/\\\\\\r\\n\\[])+\\/[gimyu]{0,5}/,\n      greedy: true\n    }],\n    keyword: {\n      pattern: /(^|(?!-).)\\b(?:break|case|catch|class|const|continue|default|do|else|extends|fallthrough|finally|for(?: ever)?|function|if|implements|it|let|loop|new|null|otherwise|own|return|super|switch|that|then|this|throw|try|unless|until|var|void|when|while|yield)(?!-)\\b/m,\n      lookbehind: true\n    },\n    'keyword-operator': {\n      pattern: /(^|[^-])\\b(?:(?:delete|require|typeof)!|(?:and|by|delete|export|from|import(?: all)?|in|instanceof|is(?: not|nt)?|not|of|or|til|to|typeof|with|xor)(?!-)\\b)/m,\n      lookbehind: true,\n      alias: 'operator'\n    },\n    boolean: {\n      pattern: /(^|[^-])\\b(?:false|no|off|on|true|yes)(?!-)\\b/m,\n      lookbehind: true\n    },\n    argument: {\n      // Don't match .&. nor &&\n      pattern: /(^|(?!\\.&\\.)[^&])&(?!&)\\d*/m,\n      lookbehind: true,\n      alias: 'variable'\n    },\n    number: /\\b(?:\\d+~[\\da-z]+|\\d[\\d_]*(?:\\.\\d[\\d_]*)?(?:[a-z]\\w*)?)/i,\n    identifier: /[a-z_](?:-?[a-z]|[\\d_])*/i,\n    operator: [\n    // Spaced .\n    {\n      pattern: /( )\\.(?= )/,\n      lookbehind: true\n    },\n    // Full list, in order:\n    // .= .~ .. ...\n    // .&. .^. .<<. .>>. .>>>.\n    // := :: ::=\n    // &&\n    // || |>\n    // < << <<< <<<<\n    // <- <-- <-! <--!\n    // <~ <~~ <~! <~~!\n    // <| <= <?\n    // > >> >= >?\n    // - -- -> -->\n    // + ++\n    // @ @@\n    // % %%\n    // * **\n    // ! != !~=\n    // !~> !~~>\n    // !-> !-->\n    // ~ ~> ~~> ~=\n    // = ==\n    // ^ ^^\n    // / ?\n    /\\.(?:[=~]|\\.\\.?)|\\.(?:[&|^]|<<|>>>?)\\.|:(?:=|:=?)|&&|\\|[|>]|<(?:<<?<?|--?!?|~~?!?|[|=?])?|>[>=?]?|-(?:->?|>)?|\\+\\+?|@@?|%%?|\\*\\*?|!(?:~?=|--?>|~?~>)?|~(?:~?>|=)?|==?|\\^\\^?|[\\/?]/],\n    punctuation: /[(){}\\[\\]|.,:;`]/\n  };\n  Prism.languages.livescript['interpolated-string'].inside['interpolation'].inside.rest = Prism.languages.livescript;\n}","map":{"version":3,"names":["module","exports","livescript","displayName","aliases","Prism","languages","comment","pattern","lookbehind","greedy","inside","variable","interpolation","alias","string","regex","keyword","boolean","argument","number","identifier","operator","punctuation","rest"],"sources":["E:/Documents/2024-1 YBIGTA/React/blog_git/Ybigta-Blog/frontend/node_modules/refractor/lang/livescript.js"],"sourcesContent":["'use strict'\r\n\r\nmodule.exports = livescript\r\nlivescript.displayName = 'livescript'\r\nlivescript.aliases = []\r\nfunction livescript(Prism) {\r\n  Prism.languages.livescript = {\r\n    comment: [\r\n      {\r\n        pattern: /(^|[^\\\\])\\/\\*[\\s\\S]*?\\*\\//,\r\n        lookbehind: true\r\n      },\r\n      {\r\n        pattern: /(^|[^\\\\])#.*/,\r\n        lookbehind: true\r\n      }\r\n    ],\r\n    'interpolated-string': {\r\n      /* Look-behind and look-ahead prevents wrong behavior of the greedy pattern\r\n       * forcing it to match \"\"\"-quoted string when it would otherwise match \"-quoted first. */\r\n      pattern: /(^|[^\"])(\"\"\"|\")(?:\\\\[\\s\\S]|(?!\\2)[^\\\\])*\\2(?!\")/,\r\n      lookbehind: true,\r\n      greedy: true,\r\n      inside: {\r\n        variable: {\r\n          pattern: /(^|[^\\\\])#[a-z_](?:-?[a-z]|[\\d_])*/m,\r\n          lookbehind: true\r\n        },\r\n        interpolation: {\r\n          pattern: /(^|[^\\\\])#\\{[^}]+\\}/m,\r\n          lookbehind: true,\r\n          inside: {\r\n            'interpolation-punctuation': {\r\n              pattern: /^#\\{|\\}$/,\r\n              alias: 'variable'\r\n            } // See rest below\r\n          }\r\n        },\r\n        string: /[\\s\\S]+/\r\n      }\r\n    },\r\n    string: [\r\n      {\r\n        pattern: /('''|')(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])*\\1/,\r\n        greedy: true\r\n      },\r\n      {\r\n        pattern: /<\\[[\\s\\S]*?\\]>/,\r\n        greedy: true\r\n      },\r\n      /\\\\[^\\s,;\\])}]+/\r\n    ],\r\n    regex: [\r\n      {\r\n        pattern: /\\/\\/(?:\\[[^\\r\\n\\]]*\\]|\\\\.|(?!\\/\\/)[^\\\\\\[])+\\/\\/[gimyu]{0,5}/,\r\n        greedy: true,\r\n        inside: {\r\n          comment: {\r\n            pattern: /(^|[^\\\\])#.*/,\r\n            lookbehind: true\r\n          }\r\n        }\r\n      },\r\n      {\r\n        pattern: /\\/(?:\\[[^\\r\\n\\]]*\\]|\\\\.|[^/\\\\\\r\\n\\[])+\\/[gimyu]{0,5}/,\r\n        greedy: true\r\n      }\r\n    ],\r\n    keyword: {\r\n      pattern:\r\n        /(^|(?!-).)\\b(?:break|case|catch|class|const|continue|default|do|else|extends|fallthrough|finally|for(?: ever)?|function|if|implements|it|let|loop|new|null|otherwise|own|return|super|switch|that|then|this|throw|try|unless|until|var|void|when|while|yield)(?!-)\\b/m,\r\n      lookbehind: true\r\n    },\r\n    'keyword-operator': {\r\n      pattern:\r\n        /(^|[^-])\\b(?:(?:delete|require|typeof)!|(?:and|by|delete|export|from|import(?: all)?|in|instanceof|is(?: not|nt)?|not|of|or|til|to|typeof|with|xor)(?!-)\\b)/m,\r\n      lookbehind: true,\r\n      alias: 'operator'\r\n    },\r\n    boolean: {\r\n      pattern: /(^|[^-])\\b(?:false|no|off|on|true|yes)(?!-)\\b/m,\r\n      lookbehind: true\r\n    },\r\n    argument: {\r\n      // Don't match .&. nor &&\r\n      pattern: /(^|(?!\\.&\\.)[^&])&(?!&)\\d*/m,\r\n      lookbehind: true,\r\n      alias: 'variable'\r\n    },\r\n    number: /\\b(?:\\d+~[\\da-z]+|\\d[\\d_]*(?:\\.\\d[\\d_]*)?(?:[a-z]\\w*)?)/i,\r\n    identifier: /[a-z_](?:-?[a-z]|[\\d_])*/i,\r\n    operator: [\r\n      // Spaced .\r\n      {\r\n        pattern: /( )\\.(?= )/,\r\n        lookbehind: true\r\n      }, // Full list, in order:\r\n      // .= .~ .. ...\r\n      // .&. .^. .<<. .>>. .>>>.\r\n      // := :: ::=\r\n      // &&\r\n      // || |>\r\n      // < << <<< <<<<\r\n      // <- <-- <-! <--!\r\n      // <~ <~~ <~! <~~!\r\n      // <| <= <?\r\n      // > >> >= >?\r\n      // - -- -> -->\r\n      // + ++\r\n      // @ @@\r\n      // % %%\r\n      // * **\r\n      // ! != !~=\r\n      // !~> !~~>\r\n      // !-> !-->\r\n      // ~ ~> ~~> ~=\r\n      // = ==\r\n      // ^ ^^\r\n      // / ?\r\n      /\\.(?:[=~]|\\.\\.?)|\\.(?:[&|^]|<<|>>>?)\\.|:(?:=|:=?)|&&|\\|[|>]|<(?:<<?<?|--?!?|~~?!?|[|=?])?|>[>=?]?|-(?:->?|>)?|\\+\\+?|@@?|%%?|\\*\\*?|!(?:~?=|--?>|~?~>)?|~(?:~?>|=)?|==?|\\^\\^?|[\\/?]/\r\n    ],\r\n    punctuation: /[(){}\\[\\]|.,:;`]/\r\n  }\r\n  Prism.languages.livescript['interpolated-string'].inside[\r\n    'interpolation'\r\n  ].inside.rest = Prism.languages.livescript\r\n}\r\n"],"mappings":"AAAA,YAAY;;AAEZA,MAAM,CAACC,OAAO,GAAGC,UAAU;AAC3BA,UAAU,CAACC,WAAW,GAAG,YAAY;AACrCD,UAAU,CAACE,OAAO,GAAG,EAAE;AACvB,SAASF,UAAUA,CAACG,KAAK,EAAE;EACzBA,KAAK,CAACC,SAAS,CAACJ,UAAU,GAAG;IAC3BK,OAAO,EAAE,CACP;MACEC,OAAO,EAAE,2BAA2B;MACpCC,UAAU,EAAE;IACd,CAAC,EACD;MACED,OAAO,EAAE,cAAc;MACvBC,UAAU,EAAE;IACd,CAAC,CACF;IACD,qBAAqB,EAAE;MACrB;AACN;MACMD,OAAO,EAAE,iDAAiD;MAC1DC,UAAU,EAAE,IAAI;MAChBC,MAAM,EAAE,IAAI;MACZC,MAAM,EAAE;QACNC,QAAQ,EAAE;UACRJ,OAAO,EAAE,qCAAqC;UAC9CC,UAAU,EAAE;QACd,CAAC;QACDI,aAAa,EAAE;UACbL,OAAO,EAAE,sBAAsB;UAC/BC,UAAU,EAAE,IAAI;UAChBE,MAAM,EAAE;YACN,2BAA2B,EAAE;cAC3BH,OAAO,EAAE,UAAU;cACnBM,KAAK,EAAE;YACT,CAAC,CAAC;UACJ;QACF,CAAC;QACDC,MAAM,EAAE;MACV;IACF,CAAC;IACDA,MAAM,EAAE,CACN;MACEP,OAAO,EAAE,oCAAoC;MAC7CE,MAAM,EAAE;IACV,CAAC,EACD;MACEF,OAAO,EAAE,gBAAgB;MACzBE,MAAM,EAAE;IACV,CAAC,EACD,gBAAgB,CACjB;IACDM,KAAK,EAAE,CACL;MACER,OAAO,EAAE,6DAA6D;MACtEE,MAAM,EAAE,IAAI;MACZC,MAAM,EAAE;QACNJ,OAAO,EAAE;UACPC,OAAO,EAAE,cAAc;UACvBC,UAAU,EAAE;QACd;MACF;IACF,CAAC,EACD;MACED,OAAO,EAAE,sDAAsD;MAC/DE,MAAM,EAAE;IACV,CAAC,CACF;IACDO,OAAO,EAAE;MACPT,OAAO,EACL,uQAAuQ;MACzQC,UAAU,EAAE;IACd,CAAC;IACD,kBAAkB,EAAE;MAClBD,OAAO,EACL,8JAA8J;MAChKC,UAAU,EAAE,IAAI;MAChBK,KAAK,EAAE;IACT,CAAC;IACDI,OAAO,EAAE;MACPV,OAAO,EAAE,gDAAgD;MACzDC,UAAU,EAAE;IACd,CAAC;IACDU,QAAQ,EAAE;MACR;MACAX,OAAO,EAAE,6BAA6B;MACtCC,UAAU,EAAE,IAAI;MAChBK,KAAK,EAAE;IACT,CAAC;IACDM,MAAM,EAAE,0DAA0D;IAClEC,UAAU,EAAE,2BAA2B;IACvCC,QAAQ,EAAE;IACR;IACA;MACEd,OAAO,EAAE,YAAY;MACrBC,UAAU,EAAE;IACd,CAAC;IAAE;IACH;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA,mLAAmL,CACpL;IACDc,WAAW,EAAE;EACf,CAAC;EACDlB,KAAK,CAACC,SAAS,CAACJ,UAAU,CAAC,qBAAqB,CAAC,CAACS,MAAM,CACtD,eAAe,CAChB,CAACA,MAAM,CAACa,IAAI,GAAGnB,KAAK,CAACC,SAAS,CAACJ,UAAU;AAC5C","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}