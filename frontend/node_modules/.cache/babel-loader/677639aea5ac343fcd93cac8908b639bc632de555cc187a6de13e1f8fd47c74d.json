{"ast":null,"code":"/**\r\n * @typedef {import('mdast').Heading} Heading\r\n * @typedef {import('mdast').Parents} Parents\r\n * @typedef {import('../types.js').Info} Info\r\n * @typedef {import('../types.js').State} State\r\n */\n\nimport { formatHeadingAsSetext } from '../util/format-heading-as-setext.js';\n\n/**\r\n * @param {Heading} node\r\n * @param {Parents | undefined} _\r\n * @param {State} state\r\n * @param {Info} info\r\n * @returns {string}\r\n */\nexport function heading(node, _, state, info) {\n  const rank = Math.max(Math.min(6, node.depth || 1), 1);\n  const tracker = state.createTracker(info);\n  if (formatHeadingAsSetext(node, state)) {\n    const exit = state.enter('headingSetext');\n    const subexit = state.enter('phrasing');\n    const value = state.containerPhrasing(node, {\n      ...tracker.current(),\n      before: '\\n',\n      after: '\\n'\n    });\n    subexit();\n    exit();\n    return value + '\\n' + (rank === 1 ? '=' : '-').repeat(\n    // The whole size…\n    value.length - (\n    // Minus the position of the character after the last EOL (or\n    // 0 if there is none)…\n    Math.max(value.lastIndexOf('\\r'), value.lastIndexOf('\\n')) + 1));\n  }\n  const sequence = '#'.repeat(rank);\n  const exit = state.enter('headingAtx');\n  const subexit = state.enter('phrasing');\n\n  // Note: for proper tracking, we should reset the output positions when there\n  // is no content returned, because then the space is not output.\n  // Practically, in that case, there is no content, so it doesn’t matter that\n  // we’ve tracked one too many characters.\n  tracker.move(sequence + ' ');\n  let value = state.containerPhrasing(node, {\n    before: '# ',\n    after: '\\n',\n    ...tracker.current()\n  });\n  if (/^[\\t ]/.test(value)) {\n    // To do: what effect has the character reference on tracking?\n    value = '&#x' + value.charCodeAt(0).toString(16).toUpperCase() + ';' + value.slice(1);\n  }\n  value = value ? sequence + ' ' + value : sequence;\n  if (state.options.closeAtx) {\n    value += ' ' + sequence;\n  }\n  subexit();\n  exit();\n  return value;\n}","map":{"version":3,"names":["formatHeadingAsSetext","heading","node","_","state","info","rank","Math","max","min","depth","tracker","createTracker","exit","enter","subexit","value","containerPhrasing","current","before","after","repeat","length","lastIndexOf","sequence","move","test","charCodeAt","toString","toUpperCase","slice","options","closeAtx"],"sources":["E:/Documents/2024-1 YBIGTA/Ybigta_BLOG/Ybigta-Blog/frontend/node_modules/mdast-util-to-markdown/lib/handle/heading.js"],"sourcesContent":["/**\r\n * @typedef {import('mdast').Heading} Heading\r\n * @typedef {import('mdast').Parents} Parents\r\n * @typedef {import('../types.js').Info} Info\r\n * @typedef {import('../types.js').State} State\r\n */\r\n\r\nimport {formatHeadingAsSetext} from '../util/format-heading-as-setext.js'\r\n\r\n/**\r\n * @param {Heading} node\r\n * @param {Parents | undefined} _\r\n * @param {State} state\r\n * @param {Info} info\r\n * @returns {string}\r\n */\r\nexport function heading(node, _, state, info) {\r\n  const rank = Math.max(Math.min(6, node.depth || 1), 1)\r\n  const tracker = state.createTracker(info)\r\n\r\n  if (formatHeadingAsSetext(node, state)) {\r\n    const exit = state.enter('headingSetext')\r\n    const subexit = state.enter('phrasing')\r\n    const value = state.containerPhrasing(node, {\r\n      ...tracker.current(),\r\n      before: '\\n',\r\n      after: '\\n'\r\n    })\r\n    subexit()\r\n    exit()\r\n\r\n    return (\r\n      value +\r\n      '\\n' +\r\n      (rank === 1 ? '=' : '-').repeat(\r\n        // The whole size…\r\n        value.length -\r\n          // Minus the position of the character after the last EOL (or\r\n          // 0 if there is none)…\r\n          (Math.max(value.lastIndexOf('\\r'), value.lastIndexOf('\\n')) + 1)\r\n      )\r\n    )\r\n  }\r\n\r\n  const sequence = '#'.repeat(rank)\r\n  const exit = state.enter('headingAtx')\r\n  const subexit = state.enter('phrasing')\r\n\r\n  // Note: for proper tracking, we should reset the output positions when there\r\n  // is no content returned, because then the space is not output.\r\n  // Practically, in that case, there is no content, so it doesn’t matter that\r\n  // we’ve tracked one too many characters.\r\n  tracker.move(sequence + ' ')\r\n\r\n  let value = state.containerPhrasing(node, {\r\n    before: '# ',\r\n    after: '\\n',\r\n    ...tracker.current()\r\n  })\r\n\r\n  if (/^[\\t ]/.test(value)) {\r\n    // To do: what effect has the character reference on tracking?\r\n    value =\r\n      '&#x' +\r\n      value.charCodeAt(0).toString(16).toUpperCase() +\r\n      ';' +\r\n      value.slice(1)\r\n  }\r\n\r\n  value = value ? sequence + ' ' + value : sequence\r\n\r\n  if (state.options.closeAtx) {\r\n    value += ' ' + sequence\r\n  }\r\n\r\n  subexit()\r\n  exit()\r\n\r\n  return value\r\n}\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAAQA,qBAAqB,QAAO,qCAAqC;;AAEzE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,OAAOA,CAACC,IAAI,EAAEC,CAAC,EAAEC,KAAK,EAAEC,IAAI,EAAE;EAC5C,MAAMC,IAAI,GAAGC,IAAI,CAACC,GAAG,CAACD,IAAI,CAACE,GAAG,CAAC,CAAC,EAAEP,IAAI,CAACQ,KAAK,IAAI,CAAC,CAAC,EAAE,CAAC,CAAC;EACtD,MAAMC,OAAO,GAAGP,KAAK,CAACQ,aAAa,CAACP,IAAI,CAAC;EAEzC,IAAIL,qBAAqB,CAACE,IAAI,EAAEE,KAAK,CAAC,EAAE;IACtC,MAAMS,IAAI,GAAGT,KAAK,CAACU,KAAK,CAAC,eAAe,CAAC;IACzC,MAAMC,OAAO,GAAGX,KAAK,CAACU,KAAK,CAAC,UAAU,CAAC;IACvC,MAAME,KAAK,GAAGZ,KAAK,CAACa,iBAAiB,CAACf,IAAI,EAAE;MAC1C,GAAGS,OAAO,CAACO,OAAO,CAAC,CAAC;MACpBC,MAAM,EAAE,IAAI;MACZC,KAAK,EAAE;IACT,CAAC,CAAC;IACFL,OAAO,CAAC,CAAC;IACTF,IAAI,CAAC,CAAC;IAEN,OACEG,KAAK,GACL,IAAI,GACJ,CAACV,IAAI,KAAK,CAAC,GAAG,GAAG,GAAG,GAAG,EAAEe,MAAM;IAC7B;IACAL,KAAK,CAACM,MAAM;IACV;IACA;IACCf,IAAI,CAACC,GAAG,CAACQ,KAAK,CAACO,WAAW,CAAC,IAAI,CAAC,EAAEP,KAAK,CAACO,WAAW,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,CACnE,CAAC;EAEL;EAEA,MAAMC,QAAQ,GAAG,GAAG,CAACH,MAAM,CAACf,IAAI,CAAC;EACjC,MAAMO,IAAI,GAAGT,KAAK,CAACU,KAAK,CAAC,YAAY,CAAC;EACtC,MAAMC,OAAO,GAAGX,KAAK,CAACU,KAAK,CAAC,UAAU,CAAC;;EAEvC;EACA;EACA;EACA;EACAH,OAAO,CAACc,IAAI,CAACD,QAAQ,GAAG,GAAG,CAAC;EAE5B,IAAIR,KAAK,GAAGZ,KAAK,CAACa,iBAAiB,CAACf,IAAI,EAAE;IACxCiB,MAAM,EAAE,IAAI;IACZC,KAAK,EAAE,IAAI;IACX,GAAGT,OAAO,CAACO,OAAO,CAAC;EACrB,CAAC,CAAC;EAEF,IAAI,QAAQ,CAACQ,IAAI,CAACV,KAAK,CAAC,EAAE;IACxB;IACAA,KAAK,GACH,KAAK,GACLA,KAAK,CAACW,UAAU,CAAC,CAAC,CAAC,CAACC,QAAQ,CAAC,EAAE,CAAC,CAACC,WAAW,CAAC,CAAC,GAC9C,GAAG,GACHb,KAAK,CAACc,KAAK,CAAC,CAAC,CAAC;EAClB;EAEAd,KAAK,GAAGA,KAAK,GAAGQ,QAAQ,GAAG,GAAG,GAAGR,KAAK,GAAGQ,QAAQ;EAEjD,IAAIpB,KAAK,CAAC2B,OAAO,CAACC,QAAQ,EAAE;IAC1BhB,KAAK,IAAI,GAAG,GAAGQ,QAAQ;EACzB;EAEAT,OAAO,CAAC,CAAC;EACTF,IAAI,CAAC,CAAC;EAEN,OAAOG,KAAK;AACd","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}