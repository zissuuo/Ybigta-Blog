{"ast":null,"code":"/**\n * @typedef {import('mdast').Emphasis} Emphasis\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('../types.js').Info} Info\n * @typedef {import('../types.js').State} State\n */\n\nimport { checkEmphasis } from '../util/check-emphasis.js';\nemphasis.peek = emphasisPeek;\n\n// To do: there are cases where emphasis cannot “form” depending on the\n// previous or next character of sequences.\n// There’s no way around that though, except for injecting zero-width stuff.\n// Do we need to safeguard against that?\n/**\n * @param {Emphasis} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function emphasis(node, _, state, info) {\n  const marker = checkEmphasis(state);\n  const exit = state.enter('emphasis');\n  const tracker = state.createTracker(info);\n  let value = tracker.move(marker);\n  value += tracker.move(state.containerPhrasing(node, {\n    before: value,\n    after: marker,\n    ...tracker.current()\n  }));\n  value += tracker.move(marker);\n  exit();\n  return value;\n}\n\n/**\n * @param {Emphasis} _\n * @param {Parents | undefined} _1\n * @param {State} state\n * @returns {string}\n */\nfunction emphasisPeek(_, _1, state) {\n  return state.options.emphasis || '*';\n}","map":{"version":3,"names":["checkEmphasis","emphasis","peek","emphasisPeek","node","_","state","info","marker","exit","enter","tracker","createTracker","value","move","containerPhrasing","before","after","current","_1","options"],"sources":["/Users/kimjisu/Desktop/ybigblog/frontend/node_modules/mdast-util-to-markdown/lib/handle/emphasis.js"],"sourcesContent":["/**\n * @typedef {import('mdast').Emphasis} Emphasis\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('../types.js').Info} Info\n * @typedef {import('../types.js').State} State\n */\n\nimport {checkEmphasis} from '../util/check-emphasis.js'\n\nemphasis.peek = emphasisPeek\n\n// To do: there are cases where emphasis cannot “form” depending on the\n// previous or next character of sequences.\n// There’s no way around that though, except for injecting zero-width stuff.\n// Do we need to safeguard against that?\n/**\n * @param {Emphasis} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function emphasis(node, _, state, info) {\n  const marker = checkEmphasis(state)\n  const exit = state.enter('emphasis')\n  const tracker = state.createTracker(info)\n  let value = tracker.move(marker)\n  value += tracker.move(\n    state.containerPhrasing(node, {\n      before: value,\n      after: marker,\n      ...tracker.current()\n    })\n  )\n  value += tracker.move(marker)\n  exit()\n  return value\n}\n\n/**\n * @param {Emphasis} _\n * @param {Parents | undefined} _1\n * @param {State} state\n * @returns {string}\n */\nfunction emphasisPeek(_, _1, state) {\n  return state.options.emphasis || '*'\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAAQA,aAAa,QAAO,2BAA2B;AAEvDC,QAAQ,CAACC,IAAI,GAAGC,YAAY;;AAE5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASF,QAAQA,CAACG,IAAI,EAAEC,CAAC,EAAEC,KAAK,EAAEC,IAAI,EAAE;EAC7C,MAAMC,MAAM,GAAGR,aAAa,CAACM,KAAK,CAAC;EACnC,MAAMG,IAAI,GAAGH,KAAK,CAACI,KAAK,CAAC,UAAU,CAAC;EACpC,MAAMC,OAAO,GAAGL,KAAK,CAACM,aAAa,CAACL,IAAI,CAAC;EACzC,IAAIM,KAAK,GAAGF,OAAO,CAACG,IAAI,CAACN,MAAM,CAAC;EAChCK,KAAK,IAAIF,OAAO,CAACG,IAAI,CACnBR,KAAK,CAACS,iBAAiB,CAACX,IAAI,EAAE;IAC5BY,MAAM,EAAEH,KAAK;IACbI,KAAK,EAAET,MAAM;IACb,GAAGG,OAAO,CAACO,OAAO,CAAC;EACrB,CAAC,CACH,CAAC;EACDL,KAAK,IAAIF,OAAO,CAACG,IAAI,CAACN,MAAM,CAAC;EAC7BC,IAAI,CAAC,CAAC;EACN,OAAOI,KAAK;AACd;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAASV,YAAYA,CAACE,CAAC,EAAEc,EAAE,EAAEb,KAAK,EAAE;EAClC,OAAOA,KAAK,CAACc,OAAO,CAACnB,QAAQ,IAAI,GAAG;AACtC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}