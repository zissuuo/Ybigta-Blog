{"ast":null,"code":"/**\r\n * @typedef {import('mdast').Delete} Delete\r\n *\r\n * @typedef {import('mdast-util-from-markdown').CompileContext} CompileContext\r\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\r\n * @typedef {import('mdast-util-from-markdown').Handle} FromMarkdownHandle\r\n *\r\n * @typedef {import('mdast-util-to-markdown').ConstructName} ConstructName\r\n * @typedef {import('mdast-util-to-markdown').Handle} ToMarkdownHandle\r\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\r\n */\n\n/**\r\n * List of constructs that occur in phrasing (paragraphs, headings), but cannot\r\n * contain strikethrough.\r\n * So they sort of cancel each other out.\r\n * Note: could use a better name.\r\n *\r\n * Note: keep in sync with: <https://github.com/syntax-tree/mdast-util-to-markdown/blob/8ce8dbf/lib/unsafe.js#L14>\r\n *\r\n * @type {Array<ConstructName>}\r\n */\nconst constructsWithoutStrikethrough = ['autolink', 'destinationLiteral', 'destinationRaw', 'reference', 'titleQuote', 'titleApostrophe'];\nhandleDelete.peek = peekDelete;\n\n/**\r\n * Create an extension for `mdast-util-from-markdown` to enable GFM\r\n * strikethrough in markdown.\r\n *\r\n * @returns {FromMarkdownExtension}\r\n *   Extension for `mdast-util-from-markdown` to enable GFM strikethrough.\r\n */\nexport function gfmStrikethroughFromMarkdown() {\n  return {\n    canContainEols: ['delete'],\n    enter: {\n      strikethrough: enterStrikethrough\n    },\n    exit: {\n      strikethrough: exitStrikethrough\n    }\n  };\n}\n\n/**\r\n * Create an extension for `mdast-util-to-markdown` to enable GFM\r\n * strikethrough in markdown.\r\n *\r\n * @returns {ToMarkdownExtension}\r\n *   Extension for `mdast-util-to-markdown` to enable GFM strikethrough.\r\n */\nexport function gfmStrikethroughToMarkdown() {\n  return {\n    unsafe: [{\n      character: '~',\n      inConstruct: 'phrasing',\n      notInConstruct: constructsWithoutStrikethrough\n    }],\n    handlers: {\n      delete: handleDelete\n    }\n  };\n}\n\n/**\r\n * @this {CompileContext}\r\n * @type {FromMarkdownHandle}\r\n */\nfunction enterStrikethrough(token) {\n  this.enter({\n    type: 'delete',\n    children: []\n  }, token);\n}\n\n/**\r\n * @this {CompileContext}\r\n * @type {FromMarkdownHandle}\r\n */\nfunction exitStrikethrough(token) {\n  this.exit(token);\n}\n\n/**\r\n * @type {ToMarkdownHandle}\r\n * @param {Delete} node\r\n */\nfunction handleDelete(node, _, state, info) {\n  const tracker = state.createTracker(info);\n  const exit = state.enter('strikethrough');\n  let value = tracker.move('~~');\n  value += state.containerPhrasing(node, {\n    ...tracker.current(),\n    before: value,\n    after: '~'\n  });\n  value += tracker.move('~~');\n  exit();\n  return value;\n}\n\n/** @type {ToMarkdownHandle} */\nfunction peekDelete() {\n  return '~';\n}","map":{"version":3,"names":["constructsWithoutStrikethrough","handleDelete","peek","peekDelete","gfmStrikethroughFromMarkdown","canContainEols","enter","strikethrough","enterStrikethrough","exit","exitStrikethrough","gfmStrikethroughToMarkdown","unsafe","character","inConstruct","notInConstruct","handlers","delete","token","type","children","node","_","state","info","tracker","createTracker","value","move","containerPhrasing","current","before","after"],"sources":["E:/Documents/2024-1 YBIGTA/React/blog_git/Ybigta-Blog/frontend/node_modules/mdast-util-gfm-strikethrough/lib/index.js"],"sourcesContent":["/**\r\n * @typedef {import('mdast').Delete} Delete\r\n *\r\n * @typedef {import('mdast-util-from-markdown').CompileContext} CompileContext\r\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\r\n * @typedef {import('mdast-util-from-markdown').Handle} FromMarkdownHandle\r\n *\r\n * @typedef {import('mdast-util-to-markdown').ConstructName} ConstructName\r\n * @typedef {import('mdast-util-to-markdown').Handle} ToMarkdownHandle\r\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\r\n */\r\n\r\n/**\r\n * List of constructs that occur in phrasing (paragraphs, headings), but cannot\r\n * contain strikethrough.\r\n * So they sort of cancel each other out.\r\n * Note: could use a better name.\r\n *\r\n * Note: keep in sync with: <https://github.com/syntax-tree/mdast-util-to-markdown/blob/8ce8dbf/lib/unsafe.js#L14>\r\n *\r\n * @type {Array<ConstructName>}\r\n */\r\nconst constructsWithoutStrikethrough = [\r\n  'autolink',\r\n  'destinationLiteral',\r\n  'destinationRaw',\r\n  'reference',\r\n  'titleQuote',\r\n  'titleApostrophe'\r\n]\r\n\r\nhandleDelete.peek = peekDelete\r\n\r\n/**\r\n * Create an extension for `mdast-util-from-markdown` to enable GFM\r\n * strikethrough in markdown.\r\n *\r\n * @returns {FromMarkdownExtension}\r\n *   Extension for `mdast-util-from-markdown` to enable GFM strikethrough.\r\n */\r\nexport function gfmStrikethroughFromMarkdown() {\r\n  return {\r\n    canContainEols: ['delete'],\r\n    enter: {strikethrough: enterStrikethrough},\r\n    exit: {strikethrough: exitStrikethrough}\r\n  }\r\n}\r\n\r\n/**\r\n * Create an extension for `mdast-util-to-markdown` to enable GFM\r\n * strikethrough in markdown.\r\n *\r\n * @returns {ToMarkdownExtension}\r\n *   Extension for `mdast-util-to-markdown` to enable GFM strikethrough.\r\n */\r\nexport function gfmStrikethroughToMarkdown() {\r\n  return {\r\n    unsafe: [\r\n      {\r\n        character: '~',\r\n        inConstruct: 'phrasing',\r\n        notInConstruct: constructsWithoutStrikethrough\r\n      }\r\n    ],\r\n    handlers: {delete: handleDelete}\r\n  }\r\n}\r\n\r\n/**\r\n * @this {CompileContext}\r\n * @type {FromMarkdownHandle}\r\n */\r\nfunction enterStrikethrough(token) {\r\n  this.enter({type: 'delete', children: []}, token)\r\n}\r\n\r\n/**\r\n * @this {CompileContext}\r\n * @type {FromMarkdownHandle}\r\n */\r\nfunction exitStrikethrough(token) {\r\n  this.exit(token)\r\n}\r\n\r\n/**\r\n * @type {ToMarkdownHandle}\r\n * @param {Delete} node\r\n */\r\nfunction handleDelete(node, _, state, info) {\r\n  const tracker = state.createTracker(info)\r\n  const exit = state.enter('strikethrough')\r\n  let value = tracker.move('~~')\r\n  value += state.containerPhrasing(node, {\r\n    ...tracker.current(),\r\n    before: value,\r\n    after: '~'\r\n  })\r\n  value += tracker.move('~~')\r\n  exit()\r\n  return value\r\n}\r\n\r\n/** @type {ToMarkdownHandle} */\r\nfunction peekDelete() {\r\n  return '~'\r\n}\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMA,8BAA8B,GAAG,CACrC,UAAU,EACV,oBAAoB,EACpB,gBAAgB,EAChB,WAAW,EACX,YAAY,EACZ,iBAAiB,CAClB;AAEDC,YAAY,CAACC,IAAI,GAAGC,UAAU;;AAE9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,4BAA4BA,CAAA,EAAG;EAC7C,OAAO;IACLC,cAAc,EAAE,CAAC,QAAQ,CAAC;IAC1BC,KAAK,EAAE;MAACC,aAAa,EAAEC;IAAkB,CAAC;IAC1CC,IAAI,EAAE;MAACF,aAAa,EAAEG;IAAiB;EACzC,CAAC;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,0BAA0BA,CAAA,EAAG;EAC3C,OAAO;IACLC,MAAM,EAAE,CACN;MACEC,SAAS,EAAE,GAAG;MACdC,WAAW,EAAE,UAAU;MACvBC,cAAc,EAAEf;IAClB,CAAC,CACF;IACDgB,QAAQ,EAAE;MAACC,MAAM,EAAEhB;IAAY;EACjC,CAAC;AACH;;AAEA;AACA;AACA;AACA;AACA,SAASO,kBAAkBA,CAACU,KAAK,EAAE;EACjC,IAAI,CAACZ,KAAK,CAAC;IAACa,IAAI,EAAE,QAAQ;IAAEC,QAAQ,EAAE;EAAE,CAAC,EAAEF,KAAK,CAAC;AACnD;;AAEA;AACA;AACA;AACA;AACA,SAASR,iBAAiBA,CAACQ,KAAK,EAAE;EAChC,IAAI,CAACT,IAAI,CAACS,KAAK,CAAC;AAClB;;AAEA;AACA;AACA;AACA;AACA,SAASjB,YAAYA,CAACoB,IAAI,EAAEC,CAAC,EAAEC,KAAK,EAAEC,IAAI,EAAE;EAC1C,MAAMC,OAAO,GAAGF,KAAK,CAACG,aAAa,CAACF,IAAI,CAAC;EACzC,MAAMf,IAAI,GAAGc,KAAK,CAACjB,KAAK,CAAC,eAAe,CAAC;EACzC,IAAIqB,KAAK,GAAGF,OAAO,CAACG,IAAI,CAAC,IAAI,CAAC;EAC9BD,KAAK,IAAIJ,KAAK,CAACM,iBAAiB,CAACR,IAAI,EAAE;IACrC,GAAGI,OAAO,CAACK,OAAO,CAAC,CAAC;IACpBC,MAAM,EAAEJ,KAAK;IACbK,KAAK,EAAE;EACT,CAAC,CAAC;EACFL,KAAK,IAAIF,OAAO,CAACG,IAAI,CAAC,IAAI,CAAC;EAC3BnB,IAAI,CAAC,CAAC;EACN,OAAOkB,KAAK;AACd;;AAEA;AACA,SAASxB,UAAUA,CAAA,EAAG;EACpB,OAAO,GAAG;AACZ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}