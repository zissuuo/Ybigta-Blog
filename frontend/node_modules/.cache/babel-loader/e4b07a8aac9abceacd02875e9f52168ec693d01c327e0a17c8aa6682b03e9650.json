{"ast":null,"code":"/**\r\n * @param {string} value\r\n * @returns {RegExp}\r\n * */\n\n/**\r\n * @param {RegExp | string } re\r\n * @returns {string}\r\n */\nfunction source(re) {\n  if (!re) return null;\n  if (typeof re === \"string\") return re;\n  return re.source;\n}\n\n/**\r\n * @param {...(RegExp | string) } args\r\n * @returns {string}\r\n */\nfunction concat(...args) {\n  const joined = args.map(x => source(x)).join(\"\");\n  return joined;\n}\n\n/*\r\nLanguage: LLVM IR\r\nAuthor: Michael Rodler <contact@f0rki.at>\r\nDescription: language used as intermediate representation in the LLVM compiler framework\r\nWebsite: https://llvm.org/docs/LangRef.html\r\nCategory: assembler\r\nAudit: 2020\r\n*/\n\n/** @type LanguageFn */\nfunction llvm(hljs) {\n  const IDENT_RE = /([-a-zA-Z$._][\\w$.-]*)/;\n  const TYPE = {\n    className: 'type',\n    begin: /\\bi\\d+(?=\\s|\\b)/\n  };\n  const OPERATOR = {\n    className: 'operator',\n    relevance: 0,\n    begin: /=/\n  };\n  const PUNCTUATION = {\n    className: 'punctuation',\n    relevance: 0,\n    begin: /,/\n  };\n  const NUMBER = {\n    className: 'number',\n    variants: [{\n      begin: /0[xX][a-fA-F0-9]+/\n    }, {\n      begin: /-?\\d+(?:[.]\\d+)?(?:[eE][-+]?\\d+(?:[.]\\d+)?)?/\n    }],\n    relevance: 0\n  };\n  const LABEL = {\n    className: 'symbol',\n    variants: [{\n      begin: /^\\s*[a-z]+:/\n    } // labels\n    ],\n    relevance: 0\n  };\n  const VARIABLE = {\n    className: 'variable',\n    variants: [{\n      begin: concat(/%/, IDENT_RE)\n    }, {\n      begin: /%\\d+/\n    }, {\n      begin: /#\\d+/\n    }]\n  };\n  const FUNCTION = {\n    className: 'title',\n    variants: [{\n      begin: concat(/@/, IDENT_RE)\n    }, {\n      begin: /@\\d+/\n    }, {\n      begin: concat(/!/, IDENT_RE)\n    }, {\n      begin: concat(/!\\d+/, IDENT_RE)\n    },\n    // https://llvm.org/docs/LangRef.html#namedmetadatastructure\n    // obviously a single digit can also be used in this fashion\n    {\n      begin: /!\\d+/\n    }]\n  };\n  return {\n    name: 'LLVM IR',\n    // TODO: split into different categories of keywords\n    keywords: 'begin end true false declare define global ' + 'constant private linker_private internal ' + 'available_externally linkonce linkonce_odr weak ' + 'weak_odr appending dllimport dllexport common ' + 'default hidden protected extern_weak external ' + 'thread_local zeroinitializer undef null to tail ' + 'target triple datalayout volatile nuw nsw nnan ' + 'ninf nsz arcp fast exact inbounds align ' + 'addrspace section alias module asm sideeffect ' + 'gc dbg linker_private_weak attributes blockaddress ' + 'initialexec localdynamic localexec prefix unnamed_addr ' + 'ccc fastcc coldcc x86_stdcallcc x86_fastcallcc ' + 'arm_apcscc arm_aapcscc arm_aapcs_vfpcc ptx_device ' + 'ptx_kernel intel_ocl_bicc msp430_intrcc spir_func ' + 'spir_kernel x86_64_sysvcc x86_64_win64cc x86_thiscallcc ' + 'cc c signext zeroext inreg sret nounwind ' + 'noreturn noalias nocapture byval nest readnone ' + 'readonly inlinehint noinline alwaysinline optsize ssp ' + 'sspreq noredzone noimplicitfloat naked builtin cold ' + 'nobuiltin noduplicate nonlazybind optnone returns_twice ' + 'sanitize_address sanitize_memory sanitize_thread sspstrong ' + 'uwtable returned type opaque eq ne slt sgt ' + 'sle sge ult ugt ule uge oeq one olt ogt ' + 'ole oge ord uno ueq une x acq_rel acquire ' + 'alignstack atomic catch cleanup filter inteldialect ' + 'max min monotonic nand personality release seq_cst ' + 'singlethread umax umin unordered xchg add fadd ' + 'sub fsub mul fmul udiv sdiv fdiv urem srem ' + 'frem shl lshr ashr and or xor icmp fcmp ' + 'phi call trunc zext sext fptrunc fpext uitofp ' + 'sitofp fptoui fptosi inttoptr ptrtoint bitcast ' + 'addrspacecast select va_arg ret br switch invoke ' + 'unwind unreachable indirectbr landingpad resume ' + 'malloc alloca free load store getelementptr ' + 'extractelement insertelement shufflevector getresult ' + 'extractvalue insertvalue atomicrmw cmpxchg fence ' + 'argmemonly double',\n    contains: [TYPE,\n    // this matches \"empty comments\"...\n    // ...because it's far more likely this is a statement terminator in\n    // another language than an actual comment\n    hljs.COMMENT(/;\\s*$/, null, {\n      relevance: 0\n    }), hljs.COMMENT(/;/, /$/), hljs.QUOTE_STRING_MODE, {\n      className: 'string',\n      variants: [\n      // Double-quoted string\n      {\n        begin: /\"/,\n        end: /[^\\\\]\"/\n      }]\n    }, FUNCTION, PUNCTUATION, OPERATOR, VARIABLE, LABEL, NUMBER]\n  };\n}\nmodule.exports = llvm;","map":{"version":3,"names":["source","re","concat","args","joined","map","x","join","llvm","hljs","IDENT_RE","TYPE","className","begin","OPERATOR","relevance","PUNCTUATION","NUMBER","variants","LABEL","VARIABLE","FUNCTION","name","keywords","contains","COMMENT","QUOTE_STRING_MODE","end","module","exports"],"sources":["E:/Documents/2024-1 YBIGTA/Ybigta_BLOG/Ybigta-Blog/frontend/node_modules/highlight.js/lib/languages/llvm.js"],"sourcesContent":["/**\r\n * @param {string} value\r\n * @returns {RegExp}\r\n * */\r\n\r\n/**\r\n * @param {RegExp | string } re\r\n * @returns {string}\r\n */\r\nfunction source(re) {\r\n  if (!re) return null;\r\n  if (typeof re === \"string\") return re;\r\n\r\n  return re.source;\r\n}\r\n\r\n/**\r\n * @param {...(RegExp | string) } args\r\n * @returns {string}\r\n */\r\nfunction concat(...args) {\r\n  const joined = args.map((x) => source(x)).join(\"\");\r\n  return joined;\r\n}\r\n\r\n/*\r\nLanguage: LLVM IR\r\nAuthor: Michael Rodler <contact@f0rki.at>\r\nDescription: language used as intermediate representation in the LLVM compiler framework\r\nWebsite: https://llvm.org/docs/LangRef.html\r\nCategory: assembler\r\nAudit: 2020\r\n*/\r\n\r\n/** @type LanguageFn */\r\nfunction llvm(hljs) {\r\n  const IDENT_RE = /([-a-zA-Z$._][\\w$.-]*)/;\r\n  const TYPE = {\r\n    className: 'type',\r\n    begin: /\\bi\\d+(?=\\s|\\b)/\r\n  };\r\n  const OPERATOR = {\r\n    className: 'operator',\r\n    relevance: 0,\r\n    begin: /=/\r\n  };\r\n  const PUNCTUATION = {\r\n    className: 'punctuation',\r\n    relevance: 0,\r\n    begin: /,/\r\n  };\r\n  const NUMBER = {\r\n    className: 'number',\r\n    variants: [\r\n        { begin: /0[xX][a-fA-F0-9]+/ },\r\n        { begin: /-?\\d+(?:[.]\\d+)?(?:[eE][-+]?\\d+(?:[.]\\d+)?)?/ }\r\n    ],\r\n    relevance: 0\r\n  };\r\n  const LABEL = {\r\n    className: 'symbol',\r\n    variants: [\r\n        { begin: /^\\s*[a-z]+:/ }, // labels\r\n    ],\r\n    relevance: 0\r\n  };\r\n  const VARIABLE = {\r\n    className: 'variable',\r\n    variants: [\r\n      { begin: concat(/%/, IDENT_RE) },\r\n      { begin: /%\\d+/ },\r\n      { begin: /#\\d+/ },\r\n    ]\r\n  };\r\n  const FUNCTION = {\r\n    className: 'title',\r\n    variants: [\r\n      { begin: concat(/@/, IDENT_RE) },\r\n      { begin: /@\\d+/ },\r\n      { begin: concat(/!/, IDENT_RE) },\r\n      { begin: concat(/!\\d+/, IDENT_RE) },\r\n      // https://llvm.org/docs/LangRef.html#namedmetadatastructure\r\n      // obviously a single digit can also be used in this fashion\r\n      { begin: /!\\d+/ }\r\n    ]\r\n  };\r\n\r\n  return {\r\n    name: 'LLVM IR',\r\n    // TODO: split into different categories of keywords\r\n    keywords:\r\n      'begin end true false declare define global ' +\r\n      'constant private linker_private internal ' +\r\n      'available_externally linkonce linkonce_odr weak ' +\r\n      'weak_odr appending dllimport dllexport common ' +\r\n      'default hidden protected extern_weak external ' +\r\n      'thread_local zeroinitializer undef null to tail ' +\r\n      'target triple datalayout volatile nuw nsw nnan ' +\r\n      'ninf nsz arcp fast exact inbounds align ' +\r\n      'addrspace section alias module asm sideeffect ' +\r\n      'gc dbg linker_private_weak attributes blockaddress ' +\r\n      'initialexec localdynamic localexec prefix unnamed_addr ' +\r\n      'ccc fastcc coldcc x86_stdcallcc x86_fastcallcc ' +\r\n      'arm_apcscc arm_aapcscc arm_aapcs_vfpcc ptx_device ' +\r\n      'ptx_kernel intel_ocl_bicc msp430_intrcc spir_func ' +\r\n      'spir_kernel x86_64_sysvcc x86_64_win64cc x86_thiscallcc ' +\r\n      'cc c signext zeroext inreg sret nounwind ' +\r\n      'noreturn noalias nocapture byval nest readnone ' +\r\n      'readonly inlinehint noinline alwaysinline optsize ssp ' +\r\n      'sspreq noredzone noimplicitfloat naked builtin cold ' +\r\n      'nobuiltin noduplicate nonlazybind optnone returns_twice ' +\r\n      'sanitize_address sanitize_memory sanitize_thread sspstrong ' +\r\n      'uwtable returned type opaque eq ne slt sgt ' +\r\n      'sle sge ult ugt ule uge oeq one olt ogt ' +\r\n      'ole oge ord uno ueq une x acq_rel acquire ' +\r\n      'alignstack atomic catch cleanup filter inteldialect ' +\r\n      'max min monotonic nand personality release seq_cst ' +\r\n      'singlethread umax umin unordered xchg add fadd ' +\r\n      'sub fsub mul fmul udiv sdiv fdiv urem srem ' +\r\n      'frem shl lshr ashr and or xor icmp fcmp ' +\r\n      'phi call trunc zext sext fptrunc fpext uitofp ' +\r\n      'sitofp fptoui fptosi inttoptr ptrtoint bitcast ' +\r\n      'addrspacecast select va_arg ret br switch invoke ' +\r\n      'unwind unreachable indirectbr landingpad resume ' +\r\n      'malloc alloca free load store getelementptr ' +\r\n      'extractelement insertelement shufflevector getresult ' +\r\n      'extractvalue insertvalue atomicrmw cmpxchg fence ' +\r\n      'argmemonly double',\r\n    contains: [\r\n      TYPE,\r\n      // this matches \"empty comments\"...\r\n      // ...because it's far more likely this is a statement terminator in\r\n      // another language than an actual comment\r\n      hljs.COMMENT(/;\\s*$/, null, { relevance: 0 }),\r\n      hljs.COMMENT(/;/, /$/),\r\n      hljs.QUOTE_STRING_MODE,\r\n      {\r\n        className: 'string',\r\n        variants: [\r\n          // Double-quoted string\r\n          { begin: /\"/, end: /[^\\\\]\"/ },\r\n        ]\r\n      },\r\n      FUNCTION,\r\n      PUNCTUATION,\r\n      OPERATOR,\r\n      VARIABLE,\r\n      LABEL,\r\n      NUMBER\r\n    ]\r\n  };\r\n}\r\n\r\nmodule.exports = llvm;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}