{"ast":null,"code":"import { isUrl } from './minurl.shared.js';\nexport { isUrl } from './minurl.shared.js';\n\n// See: <https://github.com/nodejs/node/blob/6a3403c/lib/internal/url.js>\n\n/**\r\n * @param {URL | string} path\r\n *   File URL.\r\n * @returns {string}\r\n *   File URL.\r\n */\nexport function urlToPath(path) {\n  if (typeof path === 'string') {\n    path = new URL(path);\n  } else if (!isUrl(path)) {\n    /** @type {NodeJS.ErrnoException} */\n    const error = new TypeError('The \"path\" argument must be of type string or an instance of URL. Received `' + path + '`');\n    error.code = 'ERR_INVALID_ARG_TYPE';\n    throw error;\n  }\n  if (path.protocol !== 'file:') {\n    /** @type {NodeJS.ErrnoException} */\n    const error = new TypeError('The URL must be of scheme file');\n    error.code = 'ERR_INVALID_URL_SCHEME';\n    throw error;\n  }\n  return getPathFromURLPosix(path);\n}\n\n/**\r\n * Get a path from a POSIX URL.\r\n *\r\n * @param {URL} url\r\n *   URL.\r\n * @returns {string}\r\n *   File path.\r\n */\nfunction getPathFromURLPosix(url) {\n  if (url.hostname !== '') {\n    /** @type {NodeJS.ErrnoException} */\n    const error = new TypeError('File URL host must be \"localhost\" or empty on darwin');\n    error.code = 'ERR_INVALID_FILE_URL_HOST';\n    throw error;\n  }\n  const pathname = url.pathname;\n  let index = -1;\n  while (++index < pathname.length) {\n    if (pathname.codePointAt(index) === 37 /* `%` */ && pathname.codePointAt(index + 1) === 50 /* `2` */) {\n      const third = pathname.codePointAt(index + 2);\n      if (third === 70 /* `F` */ || third === 102 /* `f` */) {\n        /** @type {NodeJS.ErrnoException} */\n        const error = new TypeError('File URL path must not include encoded / characters');\n        error.code = 'ERR_INVALID_FILE_URL_PATH';\n        throw error;\n      }\n    }\n  }\n  return decodeURIComponent(pathname);\n}","map":{"version":3,"names":["isUrl","urlToPath","path","URL","error","TypeError","code","protocol","getPathFromURLPosix","url","hostname","pathname","index","length","codePointAt","third","decodeURIComponent"],"sources":["E:/Documents/2024-1 YBIGTA/Ybigta_BLOG/blog_git/Ybigta-Blog/frontend/node_modules/vfile/lib/minurl.browser.js"],"sourcesContent":["import {isUrl} from './minurl.shared.js'\r\n\r\nexport {isUrl} from './minurl.shared.js'\r\n\r\n// See: <https://github.com/nodejs/node/blob/6a3403c/lib/internal/url.js>\r\n\r\n/**\r\n * @param {URL | string} path\r\n *   File URL.\r\n * @returns {string}\r\n *   File URL.\r\n */\r\nexport function urlToPath(path) {\r\n  if (typeof path === 'string') {\r\n    path = new URL(path)\r\n  } else if (!isUrl(path)) {\r\n    /** @type {NodeJS.ErrnoException} */\r\n    const error = new TypeError(\r\n      'The \"path\" argument must be of type string or an instance of URL. Received `' +\r\n        path +\r\n        '`'\r\n    )\r\n    error.code = 'ERR_INVALID_ARG_TYPE'\r\n    throw error\r\n  }\r\n\r\n  if (path.protocol !== 'file:') {\r\n    /** @type {NodeJS.ErrnoException} */\r\n    const error = new TypeError('The URL must be of scheme file')\r\n    error.code = 'ERR_INVALID_URL_SCHEME'\r\n    throw error\r\n  }\r\n\r\n  return getPathFromURLPosix(path)\r\n}\r\n\r\n/**\r\n * Get a path from a POSIX URL.\r\n *\r\n * @param {URL} url\r\n *   URL.\r\n * @returns {string}\r\n *   File path.\r\n */\r\nfunction getPathFromURLPosix(url) {\r\n  if (url.hostname !== '') {\r\n    /** @type {NodeJS.ErrnoException} */\r\n    const error = new TypeError(\r\n      'File URL host must be \"localhost\" or empty on darwin'\r\n    )\r\n    error.code = 'ERR_INVALID_FILE_URL_HOST'\r\n    throw error\r\n  }\r\n\r\n  const pathname = url.pathname\r\n  let index = -1\r\n\r\n  while (++index < pathname.length) {\r\n    if (\r\n      pathname.codePointAt(index) === 37 /* `%` */ &&\r\n      pathname.codePointAt(index + 1) === 50 /* `2` */\r\n    ) {\r\n      const third = pathname.codePointAt(index + 2)\r\n      if (third === 70 /* `F` */ || third === 102 /* `f` */) {\r\n        /** @type {NodeJS.ErrnoException} */\r\n        const error = new TypeError(\r\n          'File URL path must not include encoded / characters'\r\n        )\r\n        error.code = 'ERR_INVALID_FILE_URL_PATH'\r\n        throw error\r\n      }\r\n    }\r\n  }\r\n\r\n  return decodeURIComponent(pathname)\r\n}\r\n"],"mappings":"AAAA,SAAQA,KAAK,QAAO,oBAAoB;AAExC,SAAQA,KAAK,QAAO,oBAAoB;;AAExC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,SAASA,CAACC,IAAI,EAAE;EAC9B,IAAI,OAAOA,IAAI,KAAK,QAAQ,EAAE;IAC5BA,IAAI,GAAG,IAAIC,GAAG,CAACD,IAAI,CAAC;EACtB,CAAC,MAAM,IAAI,CAACF,KAAK,CAACE,IAAI,CAAC,EAAE;IACvB;IACA,MAAME,KAAK,GAAG,IAAIC,SAAS,CACzB,8EAA8E,GAC5EH,IAAI,GACJ,GACJ,CAAC;IACDE,KAAK,CAACE,IAAI,GAAG,sBAAsB;IACnC,MAAMF,KAAK;EACb;EAEA,IAAIF,IAAI,CAACK,QAAQ,KAAK,OAAO,EAAE;IAC7B;IACA,MAAMH,KAAK,GAAG,IAAIC,SAAS,CAAC,gCAAgC,CAAC;IAC7DD,KAAK,CAACE,IAAI,GAAG,wBAAwB;IACrC,MAAMF,KAAK;EACb;EAEA,OAAOI,mBAAmB,CAACN,IAAI,CAAC;AAClC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASM,mBAAmBA,CAACC,GAAG,EAAE;EAChC,IAAIA,GAAG,CAACC,QAAQ,KAAK,EAAE,EAAE;IACvB;IACA,MAAMN,KAAK,GAAG,IAAIC,SAAS,CACzB,sDACF,CAAC;IACDD,KAAK,CAACE,IAAI,GAAG,2BAA2B;IACxC,MAAMF,KAAK;EACb;EAEA,MAAMO,QAAQ,GAAGF,GAAG,CAACE,QAAQ;EAC7B,IAAIC,KAAK,GAAG,CAAC,CAAC;EAEd,OAAO,EAAEA,KAAK,GAAGD,QAAQ,CAACE,MAAM,EAAE;IAChC,IACEF,QAAQ,CAACG,WAAW,CAACF,KAAK,CAAC,KAAK,EAAE,CAAC,aACnCD,QAAQ,CAACG,WAAW,CAACF,KAAK,GAAG,CAAC,CAAC,KAAK,EAAE,CAAC,WACvC;MACA,MAAMG,KAAK,GAAGJ,QAAQ,CAACG,WAAW,CAACF,KAAK,GAAG,CAAC,CAAC;MAC7C,IAAIG,KAAK,KAAK,EAAE,CAAC,aAAaA,KAAK,KAAK,GAAG,CAAC,WAAW;QACrD;QACA,MAAMX,KAAK,GAAG,IAAIC,SAAS,CACzB,qDACF,CAAC;QACDD,KAAK,CAACE,IAAI,GAAG,2BAA2B;QACxC,MAAMF,KAAK;MACb;IACF;EACF;EAEA,OAAOY,kBAAkB,CAACL,QAAQ,CAAC;AACrC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}