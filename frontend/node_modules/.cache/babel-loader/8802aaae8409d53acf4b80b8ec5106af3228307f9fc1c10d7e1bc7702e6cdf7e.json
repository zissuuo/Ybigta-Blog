{"ast":null,"code":"/*\r\nLanguage: Julia\r\nDescription: Julia is a high-level, high-performance, dynamic programming language.\r\nAuthor: Kenta Sato <bicycle1885@gmail.com>\r\nContributors: Alex Arslan <ararslan@comcast.net>, Fredrik Ekre <ekrefredrik@gmail.com>\r\nWebsite: https://julialang.org\r\n*/\n\nfunction julia(hljs) {\n  // Since there are numerous special names in Julia, it is too much trouble\n  // to maintain them by hand. Hence these names (i.e. keywords, literals and\n  // built-ins) are automatically generated from Julia 1.5.2 itself through\n  // the following scripts for each.\n\n  // ref: https://docs.julialang.org/en/v1/manual/variables/#Allowed-Variable-Names\n  var VARIABLE_NAME_RE = '[A-Za-z_\\\\u00A1-\\\\uFFFF][A-Za-z_0-9\\\\u00A1-\\\\uFFFF]*';\n\n  // # keyword generator, multi-word keywords handled manually below (Julia 1.5.2)\n  // import REPL.REPLCompletions\n  // res = String[\"in\", \"isa\", \"where\"]\n  // for kw in collect(x.keyword for x in REPLCompletions.complete_keyword(\"\"))\n  //     if !(contains(kw, \" \") || kw == \"struct\")\n  //         push!(res, kw)\n  //     end\n  // end\n  // sort!(unique!(res))\n  // foreach(x -> println(\"\\'\", x, \"\\',\"), res)\n  var KEYWORD_LIST = ['baremodule', 'begin', 'break', 'catch', 'ccall', 'const', 'continue', 'do', 'else', 'elseif', 'end', 'export', 'false', 'finally', 'for', 'function', 'global', 'if', 'import', 'in', 'isa', 'let', 'local', 'macro', 'module', 'quote', 'return', 'true', 'try', 'using', 'where', 'while'];\n\n  // # literal generator (Julia 1.5.2)\n  // import REPL.REPLCompletions\n  // res = String[\"true\", \"false\"]\n  // for compl in filter!(x -> isa(x, REPLCompletions.ModuleCompletion) && (x.parent === Base || x.parent === Core),\n  //                     REPLCompletions.completions(\"\", 0)[1])\n  //     try\n  //         v = eval(Symbol(compl.mod))\n  //         if !(v isa Function || v isa Type || v isa TypeVar || v isa Module || v isa Colon)\n  //             push!(res, compl.mod)\n  //         end\n  //     catch e\n  //     end\n  // end\n  // sort!(unique!(res))\n  // foreach(x -> println(\"\\'\", x, \"\\',\"), res)\n  var LITERAL_LIST = ['ARGS', 'C_NULL', 'DEPOT_PATH', 'ENDIAN_BOM', 'ENV', 'Inf', 'Inf16', 'Inf32', 'Inf64', 'InsertionSort', 'LOAD_PATH', 'MergeSort', 'NaN', 'NaN16', 'NaN32', 'NaN64', 'PROGRAM_FILE', 'QuickSort', 'RoundDown', 'RoundFromZero', 'RoundNearest', 'RoundNearestTiesAway', 'RoundNearestTiesUp', 'RoundToZero', 'RoundUp', 'VERSION|0', 'devnull', 'false', 'im', 'missing', 'nothing', 'pi', 'stderr', 'stdin', 'stdout', 'true', 'undef', 'π', 'ℯ'];\n\n  // # built_in generator (Julia 1.5.2)\n  // import REPL.REPLCompletions\n  // res = String[]\n  // for compl in filter!(x -> isa(x, REPLCompletions.ModuleCompletion) && (x.parent === Base || x.parent === Core),\n  //                     REPLCompletions.completions(\"\", 0)[1])\n  //     try\n  //         v = eval(Symbol(compl.mod))\n  //         if (v isa Type || v isa TypeVar) && (compl.mod != \"=>\")\n  //             push!(res, compl.mod)\n  //         end\n  //     catch e\n  //     end\n  // end\n  // sort!(unique!(res))\n  // foreach(x -> println(\"\\'\", x, \"\\',\"), res)\n  var BUILT_IN_LIST = ['AbstractArray', 'AbstractChannel', 'AbstractChar', 'AbstractDict', 'AbstractDisplay', 'AbstractFloat', 'AbstractIrrational', 'AbstractMatrix', 'AbstractRange', 'AbstractSet', 'AbstractString', 'AbstractUnitRange', 'AbstractVecOrMat', 'AbstractVector', 'Any', 'ArgumentError', 'Array', 'AssertionError', 'BigFloat', 'BigInt', 'BitArray', 'BitMatrix', 'BitSet', 'BitVector', 'Bool', 'BoundsError', 'CapturedException', 'CartesianIndex', 'CartesianIndices', 'Cchar', 'Cdouble', 'Cfloat', 'Channel', 'Char', 'Cint', 'Cintmax_t', 'Clong', 'Clonglong', 'Cmd', 'Colon', 'Complex', 'ComplexF16', 'ComplexF32', 'ComplexF64', 'CompositeException', 'Condition', 'Cptrdiff_t', 'Cshort', 'Csize_t', 'Cssize_t', 'Cstring', 'Cuchar', 'Cuint', 'Cuintmax_t', 'Culong', 'Culonglong', 'Cushort', 'Cvoid', 'Cwchar_t', 'Cwstring', 'DataType', 'DenseArray', 'DenseMatrix', 'DenseVecOrMat', 'DenseVector', 'Dict', 'DimensionMismatch', 'Dims', 'DivideError', 'DomainError', 'EOFError', 'Enum', 'ErrorException', 'Exception', 'ExponentialBackOff', 'Expr', 'Float16', 'Float32', 'Float64', 'Function', 'GlobalRef', 'HTML', 'IO', 'IOBuffer', 'IOContext', 'IOStream', 'IdDict', 'IndexCartesian', 'IndexLinear', 'IndexStyle', 'InexactError', 'InitError', 'Int', 'Int128', 'Int16', 'Int32', 'Int64', 'Int8', 'Integer', 'InterruptException', 'InvalidStateException', 'Irrational', 'KeyError', 'LinRange', 'LineNumberNode', 'LinearIndices', 'LoadError', 'MIME', 'Matrix', 'Method', 'MethodError', 'Missing', 'MissingException', 'Module', 'NTuple', 'NamedTuple', 'Nothing', 'Number', 'OrdinalRange', 'OutOfMemoryError', 'OverflowError', 'Pair', 'PartialQuickSort', 'PermutedDimsArray', 'Pipe', 'ProcessFailedException', 'Ptr', 'QuoteNode', 'Rational', 'RawFD', 'ReadOnlyMemoryError', 'Real', 'ReentrantLock', 'Ref', 'Regex', 'RegexMatch', 'RoundingMode', 'SegmentationFault', 'Set', 'Signed', 'Some', 'StackOverflowError', 'StepRange', 'StepRangeLen', 'StridedArray', 'StridedMatrix', 'StridedVecOrMat', 'StridedVector', 'String', 'StringIndexError', 'SubArray', 'SubString', 'SubstitutionString', 'Symbol', 'SystemError', 'Task', 'TaskFailedException', 'Text', 'TextDisplay', 'Timer', 'Tuple', 'Type', 'TypeError', 'TypeVar', 'UInt', 'UInt128', 'UInt16', 'UInt32', 'UInt64', 'UInt8', 'UndefInitializer', 'UndefKeywordError', 'UndefRefError', 'UndefVarError', 'Union', 'UnionAll', 'UnitRange', 'Unsigned', 'Val', 'Vararg', 'VecElement', 'VecOrMat', 'Vector', 'VersionNumber', 'WeakKeyDict', 'WeakRef'];\n  var KEYWORDS = {\n    $pattern: VARIABLE_NAME_RE,\n    keyword: KEYWORD_LIST,\n    literal: LITERAL_LIST,\n    built_in: BUILT_IN_LIST\n  };\n\n  // placeholder for recursive self-reference\n  var DEFAULT = {\n    keywords: KEYWORDS,\n    illegal: /<\\//\n  };\n\n  // ref: https://docs.julialang.org/en/v1/manual/integers-and-floating-point-numbers/\n  var NUMBER = {\n    className: 'number',\n    // supported numeric literals:\n    //  * binary literal (e.g. 0x10)\n    //  * octal literal (e.g. 0o76543210)\n    //  * hexadecimal literal (e.g. 0xfedcba876543210)\n    //  * hexadecimal floating point literal (e.g. 0x1p0, 0x1.2p2)\n    //  * decimal literal (e.g. 9876543210, 100_000_000)\n    //  * floating pointe literal (e.g. 1.2, 1.2f, .2, 1., 1.2e10, 1.2e-10)\n    begin: /(\\b0x[\\d_]*(\\.[\\d_]*)?|0x\\.\\d[\\d_]*)p[-+]?\\d+|\\b0[box][a-fA-F0-9][a-fA-F0-9_]*|(\\b\\d[\\d_]*(\\.[\\d_]*)?|\\.\\d[\\d_]*)([eEfF][-+]?\\d+)?/,\n    relevance: 0\n  };\n  var CHAR = {\n    className: 'string',\n    begin: /'(.|\\\\[xXuU][a-zA-Z0-9]+)'/\n  };\n  var INTERPOLATION = {\n    className: 'subst',\n    begin: /\\$\\(/,\n    end: /\\)/,\n    keywords: KEYWORDS\n  };\n  var INTERPOLATED_VARIABLE = {\n    className: 'variable',\n    begin: '\\\\$' + VARIABLE_NAME_RE\n  };\n\n  // TODO: neatly escape normal code in string literal\n  var STRING = {\n    className: 'string',\n    contains: [hljs.BACKSLASH_ESCAPE, INTERPOLATION, INTERPOLATED_VARIABLE],\n    variants: [{\n      begin: /\\w*\"\"\"/,\n      end: /\"\"\"\\w*/,\n      relevance: 10\n    }, {\n      begin: /\\w*\"/,\n      end: /\"\\w*/\n    }]\n  };\n  var COMMAND = {\n    className: 'string',\n    contains: [hljs.BACKSLASH_ESCAPE, INTERPOLATION, INTERPOLATED_VARIABLE],\n    begin: '`',\n    end: '`'\n  };\n  var MACROCALL = {\n    className: 'meta',\n    begin: '@' + VARIABLE_NAME_RE\n  };\n  var COMMENT = {\n    className: 'comment',\n    variants: [{\n      begin: '#=',\n      end: '=#',\n      relevance: 10\n    }, {\n      begin: '#',\n      end: '$'\n    }]\n  };\n  DEFAULT.name = 'Julia';\n  DEFAULT.contains = [NUMBER, CHAR, STRING, COMMAND, MACROCALL, COMMENT, hljs.HASH_COMMENT_MODE, {\n    className: 'keyword',\n    begin: '\\\\b(((abstract|primitive)\\\\s+)type|(mutable\\\\s+)?struct)\\\\b'\n  }, {\n    begin: /<:/\n  } // relevance booster\n  ];\n  INTERPOLATION.contains = DEFAULT.contains;\n  return DEFAULT;\n}\nmodule.exports = julia;","map":{"version":3,"names":["julia","hljs","VARIABLE_NAME_RE","KEYWORD_LIST","LITERAL_LIST","BUILT_IN_LIST","KEYWORDS","$pattern","keyword","literal","built_in","DEFAULT","keywords","illegal","NUMBER","className","begin","relevance","CHAR","INTERPOLATION","end","INTERPOLATED_VARIABLE","STRING","contains","BACKSLASH_ESCAPE","variants","COMMAND","MACROCALL","COMMENT","name","HASH_COMMENT_MODE","module","exports"],"sources":["E:/Documents/2024-1 YBIGTA/Ybigta_BLOG/blog_git/Ybigta-Blog/frontend/node_modules/highlight.js/lib/languages/julia.js"],"sourcesContent":["/*\r\nLanguage: Julia\r\nDescription: Julia is a high-level, high-performance, dynamic programming language.\r\nAuthor: Kenta Sato <bicycle1885@gmail.com>\r\nContributors: Alex Arslan <ararslan@comcast.net>, Fredrik Ekre <ekrefredrik@gmail.com>\r\nWebsite: https://julialang.org\r\n*/\r\n\r\nfunction julia(hljs) {\r\n  // Since there are numerous special names in Julia, it is too much trouble\r\n  // to maintain them by hand. Hence these names (i.e. keywords, literals and\r\n  // built-ins) are automatically generated from Julia 1.5.2 itself through\r\n  // the following scripts for each.\r\n\r\n  // ref: https://docs.julialang.org/en/v1/manual/variables/#Allowed-Variable-Names\r\n  var VARIABLE_NAME_RE = '[A-Za-z_\\\\u00A1-\\\\uFFFF][A-Za-z_0-9\\\\u00A1-\\\\uFFFF]*';\r\n\r\n  // # keyword generator, multi-word keywords handled manually below (Julia 1.5.2)\r\n  // import REPL.REPLCompletions\r\n  // res = String[\"in\", \"isa\", \"where\"]\r\n  // for kw in collect(x.keyword for x in REPLCompletions.complete_keyword(\"\"))\r\n  //     if !(contains(kw, \" \") || kw == \"struct\")\r\n  //         push!(res, kw)\r\n  //     end\r\n  // end\r\n  // sort!(unique!(res))\r\n  // foreach(x -> println(\"\\'\", x, \"\\',\"), res)\r\n  var KEYWORD_LIST = [\r\n    'baremodule',\r\n    'begin',\r\n    'break',\r\n    'catch',\r\n    'ccall',\r\n    'const',\r\n    'continue',\r\n    'do',\r\n    'else',\r\n    'elseif',\r\n    'end',\r\n    'export',\r\n    'false',\r\n    'finally',\r\n    'for',\r\n    'function',\r\n    'global',\r\n    'if',\r\n    'import',\r\n    'in',\r\n    'isa',\r\n    'let',\r\n    'local',\r\n    'macro',\r\n    'module',\r\n    'quote',\r\n    'return',\r\n    'true',\r\n    'try',\r\n    'using',\r\n    'where',\r\n    'while',\r\n  ];\r\n\r\n  // # literal generator (Julia 1.5.2)\r\n  // import REPL.REPLCompletions\r\n  // res = String[\"true\", \"false\"]\r\n  // for compl in filter!(x -> isa(x, REPLCompletions.ModuleCompletion) && (x.parent === Base || x.parent === Core),\r\n  //                     REPLCompletions.completions(\"\", 0)[1])\r\n  //     try\r\n  //         v = eval(Symbol(compl.mod))\r\n  //         if !(v isa Function || v isa Type || v isa TypeVar || v isa Module || v isa Colon)\r\n  //             push!(res, compl.mod)\r\n  //         end\r\n  //     catch e\r\n  //     end\r\n  // end\r\n  // sort!(unique!(res))\r\n  // foreach(x -> println(\"\\'\", x, \"\\',\"), res)\r\n  var LITERAL_LIST = [\r\n    'ARGS',\r\n    'C_NULL',\r\n    'DEPOT_PATH',\r\n    'ENDIAN_BOM',\r\n    'ENV',\r\n    'Inf',\r\n    'Inf16',\r\n    'Inf32',\r\n    'Inf64',\r\n    'InsertionSort',\r\n    'LOAD_PATH',\r\n    'MergeSort',\r\n    'NaN',\r\n    'NaN16',\r\n    'NaN32',\r\n    'NaN64',\r\n    'PROGRAM_FILE',\r\n    'QuickSort',\r\n    'RoundDown',\r\n    'RoundFromZero',\r\n    'RoundNearest',\r\n    'RoundNearestTiesAway',\r\n    'RoundNearestTiesUp',\r\n    'RoundToZero',\r\n    'RoundUp',\r\n    'VERSION|0',\r\n    'devnull',\r\n    'false',\r\n    'im',\r\n    'missing',\r\n    'nothing',\r\n    'pi',\r\n    'stderr',\r\n    'stdin',\r\n    'stdout',\r\n    'true',\r\n    'undef',\r\n    'π',\r\n    'ℯ',\r\n  ];\r\n\r\n  // # built_in generator (Julia 1.5.2)\r\n  // import REPL.REPLCompletions\r\n  // res = String[]\r\n  // for compl in filter!(x -> isa(x, REPLCompletions.ModuleCompletion) && (x.parent === Base || x.parent === Core),\r\n  //                     REPLCompletions.completions(\"\", 0)[1])\r\n  //     try\r\n  //         v = eval(Symbol(compl.mod))\r\n  //         if (v isa Type || v isa TypeVar) && (compl.mod != \"=>\")\r\n  //             push!(res, compl.mod)\r\n  //         end\r\n  //     catch e\r\n  //     end\r\n  // end\r\n  // sort!(unique!(res))\r\n  // foreach(x -> println(\"\\'\", x, \"\\',\"), res)\r\n  var BUILT_IN_LIST = [\r\n    'AbstractArray',\r\n    'AbstractChannel',\r\n    'AbstractChar',\r\n    'AbstractDict',\r\n    'AbstractDisplay',\r\n    'AbstractFloat',\r\n    'AbstractIrrational',\r\n    'AbstractMatrix',\r\n    'AbstractRange',\r\n    'AbstractSet',\r\n    'AbstractString',\r\n    'AbstractUnitRange',\r\n    'AbstractVecOrMat',\r\n    'AbstractVector',\r\n    'Any',\r\n    'ArgumentError',\r\n    'Array',\r\n    'AssertionError',\r\n    'BigFloat',\r\n    'BigInt',\r\n    'BitArray',\r\n    'BitMatrix',\r\n    'BitSet',\r\n    'BitVector',\r\n    'Bool',\r\n    'BoundsError',\r\n    'CapturedException',\r\n    'CartesianIndex',\r\n    'CartesianIndices',\r\n    'Cchar',\r\n    'Cdouble',\r\n    'Cfloat',\r\n    'Channel',\r\n    'Char',\r\n    'Cint',\r\n    'Cintmax_t',\r\n    'Clong',\r\n    'Clonglong',\r\n    'Cmd',\r\n    'Colon',\r\n    'Complex',\r\n    'ComplexF16',\r\n    'ComplexF32',\r\n    'ComplexF64',\r\n    'CompositeException',\r\n    'Condition',\r\n    'Cptrdiff_t',\r\n    'Cshort',\r\n    'Csize_t',\r\n    'Cssize_t',\r\n    'Cstring',\r\n    'Cuchar',\r\n    'Cuint',\r\n    'Cuintmax_t',\r\n    'Culong',\r\n    'Culonglong',\r\n    'Cushort',\r\n    'Cvoid',\r\n    'Cwchar_t',\r\n    'Cwstring',\r\n    'DataType',\r\n    'DenseArray',\r\n    'DenseMatrix',\r\n    'DenseVecOrMat',\r\n    'DenseVector',\r\n    'Dict',\r\n    'DimensionMismatch',\r\n    'Dims',\r\n    'DivideError',\r\n    'DomainError',\r\n    'EOFError',\r\n    'Enum',\r\n    'ErrorException',\r\n    'Exception',\r\n    'ExponentialBackOff',\r\n    'Expr',\r\n    'Float16',\r\n    'Float32',\r\n    'Float64',\r\n    'Function',\r\n    'GlobalRef',\r\n    'HTML',\r\n    'IO',\r\n    'IOBuffer',\r\n    'IOContext',\r\n    'IOStream',\r\n    'IdDict',\r\n    'IndexCartesian',\r\n    'IndexLinear',\r\n    'IndexStyle',\r\n    'InexactError',\r\n    'InitError',\r\n    'Int',\r\n    'Int128',\r\n    'Int16',\r\n    'Int32',\r\n    'Int64',\r\n    'Int8',\r\n    'Integer',\r\n    'InterruptException',\r\n    'InvalidStateException',\r\n    'Irrational',\r\n    'KeyError',\r\n    'LinRange',\r\n    'LineNumberNode',\r\n    'LinearIndices',\r\n    'LoadError',\r\n    'MIME',\r\n    'Matrix',\r\n    'Method',\r\n    'MethodError',\r\n    'Missing',\r\n    'MissingException',\r\n    'Module',\r\n    'NTuple',\r\n    'NamedTuple',\r\n    'Nothing',\r\n    'Number',\r\n    'OrdinalRange',\r\n    'OutOfMemoryError',\r\n    'OverflowError',\r\n    'Pair',\r\n    'PartialQuickSort',\r\n    'PermutedDimsArray',\r\n    'Pipe',\r\n    'ProcessFailedException',\r\n    'Ptr',\r\n    'QuoteNode',\r\n    'Rational',\r\n    'RawFD',\r\n    'ReadOnlyMemoryError',\r\n    'Real',\r\n    'ReentrantLock',\r\n    'Ref',\r\n    'Regex',\r\n    'RegexMatch',\r\n    'RoundingMode',\r\n    'SegmentationFault',\r\n    'Set',\r\n    'Signed',\r\n    'Some',\r\n    'StackOverflowError',\r\n    'StepRange',\r\n    'StepRangeLen',\r\n    'StridedArray',\r\n    'StridedMatrix',\r\n    'StridedVecOrMat',\r\n    'StridedVector',\r\n    'String',\r\n    'StringIndexError',\r\n    'SubArray',\r\n    'SubString',\r\n    'SubstitutionString',\r\n    'Symbol',\r\n    'SystemError',\r\n    'Task',\r\n    'TaskFailedException',\r\n    'Text',\r\n    'TextDisplay',\r\n    'Timer',\r\n    'Tuple',\r\n    'Type',\r\n    'TypeError',\r\n    'TypeVar',\r\n    'UInt',\r\n    'UInt128',\r\n    'UInt16',\r\n    'UInt32',\r\n    'UInt64',\r\n    'UInt8',\r\n    'UndefInitializer',\r\n    'UndefKeywordError',\r\n    'UndefRefError',\r\n    'UndefVarError',\r\n    'Union',\r\n    'UnionAll',\r\n    'UnitRange',\r\n    'Unsigned',\r\n    'Val',\r\n    'Vararg',\r\n    'VecElement',\r\n    'VecOrMat',\r\n    'Vector',\r\n    'VersionNumber',\r\n    'WeakKeyDict',\r\n    'WeakRef',\r\n  ];\r\n\r\n  var KEYWORDS = {\r\n    $pattern: VARIABLE_NAME_RE,\r\n    keyword: KEYWORD_LIST,\r\n    literal: LITERAL_LIST,\r\n    built_in: BUILT_IN_LIST,\r\n  };\r\n\r\n  // placeholder for recursive self-reference\r\n  var DEFAULT = {\r\n    keywords: KEYWORDS, illegal: /<\\//\r\n  };\r\n\r\n  // ref: https://docs.julialang.org/en/v1/manual/integers-and-floating-point-numbers/\r\n  var NUMBER = {\r\n    className: 'number',\r\n    // supported numeric literals:\r\n    //  * binary literal (e.g. 0x10)\r\n    //  * octal literal (e.g. 0o76543210)\r\n    //  * hexadecimal literal (e.g. 0xfedcba876543210)\r\n    //  * hexadecimal floating point literal (e.g. 0x1p0, 0x1.2p2)\r\n    //  * decimal literal (e.g. 9876543210, 100_000_000)\r\n    //  * floating pointe literal (e.g. 1.2, 1.2f, .2, 1., 1.2e10, 1.2e-10)\r\n    begin: /(\\b0x[\\d_]*(\\.[\\d_]*)?|0x\\.\\d[\\d_]*)p[-+]?\\d+|\\b0[box][a-fA-F0-9][a-fA-F0-9_]*|(\\b\\d[\\d_]*(\\.[\\d_]*)?|\\.\\d[\\d_]*)([eEfF][-+]?\\d+)?/,\r\n    relevance: 0\r\n  };\r\n\r\n  var CHAR = {\r\n    className: 'string',\r\n    begin: /'(.|\\\\[xXuU][a-zA-Z0-9]+)'/\r\n  };\r\n\r\n  var INTERPOLATION = {\r\n    className: 'subst',\r\n    begin: /\\$\\(/, end: /\\)/,\r\n    keywords: KEYWORDS\r\n  };\r\n\r\n  var INTERPOLATED_VARIABLE = {\r\n    className: 'variable',\r\n    begin: '\\\\$' + VARIABLE_NAME_RE\r\n  };\r\n\r\n  // TODO: neatly escape normal code in string literal\r\n  var STRING = {\r\n    className: 'string',\r\n    contains: [hljs.BACKSLASH_ESCAPE, INTERPOLATION, INTERPOLATED_VARIABLE],\r\n    variants: [\r\n      { begin: /\\w*\"\"\"/, end: /\"\"\"\\w*/, relevance: 10 },\r\n      { begin: /\\w*\"/, end: /\"\\w*/ }\r\n    ]\r\n  };\r\n\r\n  var COMMAND = {\r\n    className: 'string',\r\n    contains: [hljs.BACKSLASH_ESCAPE, INTERPOLATION, INTERPOLATED_VARIABLE],\r\n    begin: '`', end: '`'\r\n  };\r\n\r\n  var MACROCALL = {\r\n    className: 'meta',\r\n    begin: '@' + VARIABLE_NAME_RE\r\n  };\r\n\r\n  var COMMENT = {\r\n    className: 'comment',\r\n    variants: [\r\n      { begin: '#=', end: '=#', relevance: 10 },\r\n      { begin: '#', end: '$' }\r\n    ]\r\n  };\r\n\r\n  DEFAULT.name = 'Julia';\r\n  DEFAULT.contains = [\r\n    NUMBER,\r\n    CHAR,\r\n    STRING,\r\n    COMMAND,\r\n    MACROCALL,\r\n    COMMENT,\r\n    hljs.HASH_COMMENT_MODE,\r\n    {\r\n      className: 'keyword',\r\n      begin:\r\n        '\\\\b(((abstract|primitive)\\\\s+)type|(mutable\\\\s+)?struct)\\\\b'\r\n    },\r\n    {begin: /<:/}  // relevance booster\r\n  ];\r\n  INTERPOLATION.contains = DEFAULT.contains;\r\n\r\n  return DEFAULT;\r\n}\r\n\r\nmodule.exports = julia;\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASA,KAAKA,CAACC,IAAI,EAAE;EACnB;EACA;EACA;EACA;;EAEA;EACA,IAAIC,gBAAgB,GAAG,sDAAsD;;EAE7E;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA,IAAIC,YAAY,GAAG,CACjB,YAAY,EACZ,OAAO,EACP,OAAO,EACP,OAAO,EACP,OAAO,EACP,OAAO,EACP,UAAU,EACV,IAAI,EACJ,MAAM,EACN,QAAQ,EACR,KAAK,EACL,QAAQ,EACR,OAAO,EACP,SAAS,EACT,KAAK,EACL,UAAU,EACV,QAAQ,EACR,IAAI,EACJ,QAAQ,EACR,IAAI,EACJ,KAAK,EACL,KAAK,EACL,OAAO,EACP,OAAO,EACP,QAAQ,EACR,OAAO,EACP,QAAQ,EACR,MAAM,EACN,KAAK,EACL,OAAO,EACP,OAAO,EACP,OAAO,CACR;;EAED;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA,IAAIC,YAAY,GAAG,CACjB,MAAM,EACN,QAAQ,EACR,YAAY,EACZ,YAAY,EACZ,KAAK,EACL,KAAK,EACL,OAAO,EACP,OAAO,EACP,OAAO,EACP,eAAe,EACf,WAAW,EACX,WAAW,EACX,KAAK,EACL,OAAO,EACP,OAAO,EACP,OAAO,EACP,cAAc,EACd,WAAW,EACX,WAAW,EACX,eAAe,EACf,cAAc,EACd,sBAAsB,EACtB,oBAAoB,EACpB,aAAa,EACb,SAAS,EACT,WAAW,EACX,SAAS,EACT,OAAO,EACP,IAAI,EACJ,SAAS,EACT,SAAS,EACT,IAAI,EACJ,QAAQ,EACR,OAAO,EACP,QAAQ,EACR,MAAM,EACN,OAAO,EACP,GAAG,EACH,GAAG,CACJ;;EAED;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA,IAAIC,aAAa,GAAG,CAClB,eAAe,EACf,iBAAiB,EACjB,cAAc,EACd,cAAc,EACd,iBAAiB,EACjB,eAAe,EACf,oBAAoB,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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}