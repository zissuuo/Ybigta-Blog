{"ast":null,"code":"'use strict';\n\nvar refractorMarkupTemplating = require('./markup-templating.js');\nmodule.exports = soy;\nsoy.displayName = 'soy';\nsoy.aliases = [];\nfunction soy(Prism) {\n  Prism.register(refractorMarkupTemplating);\n  (function (Prism) {\n    var stringPattern = /([\"'])(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/;\n    var numberPattern = /\\b\\d+(?:\\.\\d+)?(?:[eE][+-]?\\d+)?\\b|\\b0x[\\dA-F]+\\b/;\n    Prism.languages.soy = {\n      comment: [/\\/\\*[\\s\\S]*?\\*\\//, {\n        pattern: /(\\s)\\/\\/.*/,\n        lookbehind: true,\n        greedy: true\n      }],\n      'command-arg': {\n        pattern: /(\\{+\\/?\\s*(?:alias|call|delcall|delpackage|deltemplate|namespace|template)\\s+)\\.?[\\w.]+/,\n        lookbehind: true,\n        alias: 'string',\n        inside: {\n          punctuation: /\\./\n        }\n      },\n      parameter: {\n        pattern: /(\\{+\\/?\\s*@?param\\??\\s+)\\.?[\\w.]+/,\n        lookbehind: true,\n        alias: 'variable'\n      },\n      keyword: [{\n        pattern: /(\\{+\\/?[^\\S\\r\\n]*)(?:\\\\[nrt]|alias|call|case|css|default|delcall|delpackage|deltemplate|else(?:if)?|fallbackmsg|for(?:each)?|if(?:empty)?|lb|let|literal|msg|namespace|nil|@?param\\??|rb|sp|switch|template|xid)/,\n        lookbehind: true\n      }, /\\b(?:any|as|attributes|bool|css|float|html|in|int|js|list|map|null|number|string|uri)\\b/],\n      delimiter: {\n        pattern: /^\\{+\\/?|\\/?\\}+$/,\n        alias: 'punctuation'\n      },\n      property: /\\w+(?==)/,\n      variable: {\n        pattern: /\\$[^\\W\\d]\\w*(?:\\??(?:\\.\\w+|\\[[^\\]]+\\]))*/,\n        inside: {\n          string: {\n            pattern: stringPattern,\n            greedy: true\n          },\n          number: numberPattern,\n          punctuation: /[\\[\\].?]/\n        }\n      },\n      string: {\n        pattern: stringPattern,\n        greedy: true\n      },\n      function: [/\\w+(?=\\()/, {\n        pattern: /(\\|[^\\S\\r\\n]*)\\w+/,\n        lookbehind: true\n      }],\n      boolean: /\\b(?:false|true)\\b/,\n      number: numberPattern,\n      operator: /\\?:?|<=?|>=?|==?|!=|[+*/%-]|\\b(?:and|not|or)\\b/,\n      punctuation: /[{}()\\[\\]|.,:]/\n    }; // Tokenize all inline Soy expressions\n    Prism.hooks.add('before-tokenize', function (env) {\n      var soyPattern = /\\{\\{.+?\\}\\}|\\{.+?\\}|\\s\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\//g;\n      var soyLitteralStart = '{literal}';\n      var soyLitteralEnd = '{/literal}';\n      var soyLitteralMode = false;\n      Prism.languages['markup-templating'].buildPlaceholders(env, 'soy', soyPattern, function (match) {\n        // Soy tags inside {literal} block are ignored\n        if (match === soyLitteralEnd) {\n          soyLitteralMode = false;\n        }\n        if (!soyLitteralMode) {\n          if (match === soyLitteralStart) {\n            soyLitteralMode = true;\n          }\n          return true;\n        }\n        return false;\n      });\n    }); // Re-insert the tokens after tokenizing\n    Prism.hooks.add('after-tokenize', function (env) {\n      Prism.languages['markup-templating'].tokenizePlaceholders(env, 'soy');\n    });\n  })(Prism);\n}","map":{"version":3,"names":["refractorMarkupTemplating","require","module","exports","soy","displayName","aliases","Prism","register","stringPattern","numberPattern","languages","comment","pattern","lookbehind","greedy","alias","inside","punctuation","parameter","keyword","delimiter","property","variable","string","number","function","boolean","operator","hooks","add","env","soyPattern","soyLitteralStart","soyLitteralEnd","soyLitteralMode","buildPlaceholders","match","tokenizePlaceholders"],"sources":["E:/Documents/2024-1 YBIGTA/Ybigta_BLOG/blog_git/Ybigta-Blog/frontend/node_modules/refractor/lang/soy.js"],"sourcesContent":["'use strict'\r\nvar refractorMarkupTemplating = require('./markup-templating.js')\r\nmodule.exports = soy\r\nsoy.displayName = 'soy'\r\nsoy.aliases = []\r\nfunction soy(Prism) {\r\n  Prism.register(refractorMarkupTemplating)\r\n  ;(function (Prism) {\r\n    var stringPattern = /([\"'])(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/\r\n    var numberPattern = /\\b\\d+(?:\\.\\d+)?(?:[eE][+-]?\\d+)?\\b|\\b0x[\\dA-F]+\\b/\r\n    Prism.languages.soy = {\r\n      comment: [\r\n        /\\/\\*[\\s\\S]*?\\*\\//,\r\n        {\r\n          pattern: /(\\s)\\/\\/.*/,\r\n          lookbehind: true,\r\n          greedy: true\r\n        }\r\n      ],\r\n      'command-arg': {\r\n        pattern:\r\n          /(\\{+\\/?\\s*(?:alias|call|delcall|delpackage|deltemplate|namespace|template)\\s+)\\.?[\\w.]+/,\r\n        lookbehind: true,\r\n        alias: 'string',\r\n        inside: {\r\n          punctuation: /\\./\r\n        }\r\n      },\r\n      parameter: {\r\n        pattern: /(\\{+\\/?\\s*@?param\\??\\s+)\\.?[\\w.]+/,\r\n        lookbehind: true,\r\n        alias: 'variable'\r\n      },\r\n      keyword: [\r\n        {\r\n          pattern:\r\n            /(\\{+\\/?[^\\S\\r\\n]*)(?:\\\\[nrt]|alias|call|case|css|default|delcall|delpackage|deltemplate|else(?:if)?|fallbackmsg|for(?:each)?|if(?:empty)?|lb|let|literal|msg|namespace|nil|@?param\\??|rb|sp|switch|template|xid)/,\r\n          lookbehind: true\r\n        },\r\n        /\\b(?:any|as|attributes|bool|css|float|html|in|int|js|list|map|null|number|string|uri)\\b/\r\n      ],\r\n      delimiter: {\r\n        pattern: /^\\{+\\/?|\\/?\\}+$/,\r\n        alias: 'punctuation'\r\n      },\r\n      property: /\\w+(?==)/,\r\n      variable: {\r\n        pattern: /\\$[^\\W\\d]\\w*(?:\\??(?:\\.\\w+|\\[[^\\]]+\\]))*/,\r\n        inside: {\r\n          string: {\r\n            pattern: stringPattern,\r\n            greedy: true\r\n          },\r\n          number: numberPattern,\r\n          punctuation: /[\\[\\].?]/\r\n        }\r\n      },\r\n      string: {\r\n        pattern: stringPattern,\r\n        greedy: true\r\n      },\r\n      function: [\r\n        /\\w+(?=\\()/,\r\n        {\r\n          pattern: /(\\|[^\\S\\r\\n]*)\\w+/,\r\n          lookbehind: true\r\n        }\r\n      ],\r\n      boolean: /\\b(?:false|true)\\b/,\r\n      number: numberPattern,\r\n      operator: /\\?:?|<=?|>=?|==?|!=|[+*/%-]|\\b(?:and|not|or)\\b/,\r\n      punctuation: /[{}()\\[\\]|.,:]/\r\n    } // Tokenize all inline Soy expressions\r\n    Prism.hooks.add('before-tokenize', function (env) {\r\n      var soyPattern = /\\{\\{.+?\\}\\}|\\{.+?\\}|\\s\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\//g\r\n      var soyLitteralStart = '{literal}'\r\n      var soyLitteralEnd = '{/literal}'\r\n      var soyLitteralMode = false\r\n      Prism.languages['markup-templating'].buildPlaceholders(\r\n        env,\r\n        'soy',\r\n        soyPattern,\r\n        function (match) {\r\n          // Soy tags inside {literal} block are ignored\r\n          if (match === soyLitteralEnd) {\r\n            soyLitteralMode = false\r\n          }\r\n          if (!soyLitteralMode) {\r\n            if (match === soyLitteralStart) {\r\n              soyLitteralMode = true\r\n            }\r\n            return true\r\n          }\r\n          return false\r\n        }\r\n      )\r\n    }) // Re-insert the tokens after tokenizing\r\n    Prism.hooks.add('after-tokenize', function (env) {\r\n      Prism.languages['markup-templating'].tokenizePlaceholders(env, 'soy')\r\n    })\r\n  })(Prism)\r\n}\r\n"],"mappings":"AAAA,YAAY;;AACZ,IAAIA,yBAAyB,GAAGC,OAAO,CAAC,wBAAwB,CAAC;AACjEC,MAAM,CAACC,OAAO,GAAGC,GAAG;AACpBA,GAAG,CAACC,WAAW,GAAG,KAAK;AACvBD,GAAG,CAACE,OAAO,GAAG,EAAE;AAChB,SAASF,GAAGA,CAACG,KAAK,EAAE;EAClBA,KAAK,CAACC,QAAQ,CAACR,yBAAyB,CAAC;EACxC,CAAC,UAAUO,KAAK,EAAE;IACjB,IAAIE,aAAa,GAAG,gDAAgD;IACpE,IAAIC,aAAa,GAAG,mDAAmD;IACvEH,KAAK,CAACI,SAAS,CAACP,GAAG,GAAG;MACpBQ,OAAO,EAAE,CACP,kBAAkB,EAClB;QACEC,OAAO,EAAE,YAAY;QACrBC,UAAU,EAAE,IAAI;QAChBC,MAAM,EAAE;MACV,CAAC,CACF;MACD,aAAa,EAAE;QACbF,OAAO,EACL,yFAAyF;QAC3FC,UAAU,EAAE,IAAI;QAChBE,KAAK,EAAE,QAAQ;QACfC,MAAM,EAAE;UACNC,WAAW,EAAE;QACf;MACF,CAAC;MACDC,SAAS,EAAE;QACTN,OAAO,EAAE,mCAAmC;QAC5CC,UAAU,EAAE,IAAI;QAChBE,KAAK,EAAE;MACT,CAAC;MACDI,OAAO,EAAE,CACP;QACEP,OAAO,EACL,kNAAkN;QACpNC,UAAU,EAAE;MACd,CAAC,EACD,yFAAyF,CAC1F;MACDO,SAAS,EAAE;QACTR,OAAO,EAAE,iBAAiB;QAC1BG,KAAK,EAAE;MACT,CAAC;MACDM,QAAQ,EAAE,UAAU;MACpBC,QAAQ,EAAE;QACRV,OAAO,EAAE,0CAA0C;QACnDI,MAAM,EAAE;UACNO,MAAM,EAAE;YACNX,OAAO,EAAEJ,aAAa;YACtBM,MAAM,EAAE;UACV,CAAC;UACDU,MAAM,EAAEf,aAAa;UACrBQ,WAAW,EAAE;QACf;MACF,CAAC;MACDM,MAAM,EAAE;QACNX,OAAO,EAAEJ,aAAa;QACtBM,MAAM,EAAE;MACV,CAAC;MACDW,QAAQ,EAAE,CACR,WAAW,EACX;QACEb,OAAO,EAAE,mBAAmB;QAC5BC,UAAU,EAAE;MACd,CAAC,CACF;MACDa,OAAO,EAAE,oBAAoB;MAC7BF,MAAM,EAAEf,aAAa;MACrBkB,QAAQ,EAAE,gDAAgD;MAC1DV,WAAW,EAAE;IACf,CAAC,EAAC;IACFX,KAAK,CAACsB,KAAK,CAACC,GAAG,CAAC,iBAAiB,EAAE,UAAUC,GAAG,EAAE;MAChD,IAAIC,UAAU,GAAG,gDAAgD;MACjE,IAAIC,gBAAgB,GAAG,WAAW;MAClC,IAAIC,cAAc,GAAG,YAAY;MACjC,IAAIC,eAAe,GAAG,KAAK;MAC3B5B,KAAK,CAACI,SAAS,CAAC,mBAAmB,CAAC,CAACyB,iBAAiB,CACpDL,GAAG,EACH,KAAK,EACLC,UAAU,EACV,UAAUK,KAAK,EAAE;QACf;QACA,IAAIA,KAAK,KAAKH,cAAc,EAAE;UAC5BC,eAAe,GAAG,KAAK;QACzB;QACA,IAAI,CAACA,eAAe,EAAE;UACpB,IAAIE,KAAK,KAAKJ,gBAAgB,EAAE;YAC9BE,eAAe,GAAG,IAAI;UACxB;UACA,OAAO,IAAI;QACb;QACA,OAAO,KAAK;MACd,CACF,CAAC;IACH,CAAC,CAAC,EAAC;IACH5B,KAAK,CAACsB,KAAK,CAACC,GAAG,CAAC,gBAAgB,EAAE,UAAUC,GAAG,EAAE;MAC/CxB,KAAK,CAACI,SAAS,CAAC,mBAAmB,CAAC,CAAC2B,oBAAoB,CAACP,GAAG,EAAE,KAAK,CAAC;IACvE,CAAC,CAAC;EACJ,CAAC,EAAExB,KAAK,CAAC;AACX","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}