{"ast":null,"code":"/**\r\n * @typedef {import('micromark-util-types').Construct} Construct\r\n * @typedef {import('micromark-util-types').State} State\r\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\r\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\r\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding, markdownSpace } from 'micromark-util-character';\nimport { codes, types } from 'micromark-util-symbol';\n\n/** @type {Construct} */\nexport const blankLine = {\n  tokenize: tokenizeBlankLine,\n  partial: true\n};\n\n/**\r\n * @this {TokenizeContext}\r\n * @type {Tokenizer}\r\n */\nfunction tokenizeBlankLine(effects, ok, nok) {\n  return start;\n\n  /**\r\n   * Start of blank line.\r\n   *\r\n   * > üëâ **Note**: `‚ê†` represents a space character.\r\n   *\r\n   * ```markdown\r\n   * > | ‚ê†‚ê†‚êä\r\n   *     ^\r\n   * > | ‚êä\r\n   *     ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\n  function start(code) {\n    return markdownSpace(code) ? factorySpace(effects, after, types.linePrefix)(code) : after(code);\n  }\n\n  /**\r\n   * At eof/eol, after optional whitespace.\r\n   *\r\n   * > üëâ **Note**: `‚ê†` represents a space character.\r\n   *\r\n   * ```markdown\r\n   * > | ‚ê†‚ê†‚êä\r\n   *       ^\r\n   * > | ‚êä\r\n   *     ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\n  function after(code) {\n    return code === codes.eof || markdownLineEnding(code) ? ok(code) : nok(code);\n  }\n}","map":{"version":3,"names":["factorySpace","markdownLineEnding","markdownSpace","codes","types","blankLine","tokenize","tokenizeBlankLine","partial","effects","ok","nok","start","code","after","linePrefix","eof"],"sources":["E:/Documents/2024-1 YBIGTA/Ybigta_BLOG/blog_git/Ybigta-Blog/frontend/node_modules/micromark-core-commonmark/dev/lib/blank-line.js"],"sourcesContent":["/**\r\n * @typedef {import('micromark-util-types').Construct} Construct\r\n * @typedef {import('micromark-util-types').State} State\r\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\r\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\r\n */\r\n\r\nimport {factorySpace} from 'micromark-factory-space'\r\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\r\nimport {codes, types} from 'micromark-util-symbol'\r\n\r\n/** @type {Construct} */\r\nexport const blankLine = {tokenize: tokenizeBlankLine, partial: true}\r\n\r\n/**\r\n * @this {TokenizeContext}\r\n * @type {Tokenizer}\r\n */\r\nfunction tokenizeBlankLine(effects, ok, nok) {\r\n  return start\r\n\r\n  /**\r\n   * Start of blank line.\r\n   *\r\n   * > üëâ **Note**: `‚ê†` represents a space character.\r\n   *\r\n   * ```markdown\r\n   * > | ‚ê†‚ê†‚êä\r\n   *     ^\r\n   * > | ‚êä\r\n   *     ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function start(code) {\r\n    return markdownSpace(code)\r\n      ? factorySpace(effects, after, types.linePrefix)(code)\r\n      : after(code)\r\n  }\r\n\r\n  /**\r\n   * At eof/eol, after optional whitespace.\r\n   *\r\n   * > üëâ **Note**: `‚ê†` represents a space character.\r\n   *\r\n   * ```markdown\r\n   * > | ‚ê†‚ê†‚êä\r\n   *       ^\r\n   * > | ‚êä\r\n   *     ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function after(code) {\r\n    return code === codes.eof || markdownLineEnding(code) ? ok(code) : nok(code)\r\n  }\r\n}\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAAQA,YAAY,QAAO,yBAAyB;AACpD,SAAQC,kBAAkB,EAAEC,aAAa,QAAO,0BAA0B;AAC1E,SAAQC,KAAK,EAAEC,KAAK,QAAO,uBAAuB;;AAElD;AACA,OAAO,MAAMC,SAAS,GAAG;EAACC,QAAQ,EAAEC,iBAAiB;EAAEC,OAAO,EAAE;AAAI,CAAC;;AAErE;AACA;AACA;AACA;AACA,SAASD,iBAAiBA,CAACE,OAAO,EAAEC,EAAE,EAAEC,GAAG,EAAE;EAC3C,OAAOC,KAAK;;EAEZ;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,SAASA,KAAKA,CAACC,IAAI,EAAE;IACnB,OAAOX,aAAa,CAACW,IAAI,CAAC,GACtBb,YAAY,CAACS,OAAO,EAAEK,KAAK,EAAEV,KAAK,CAACW,UAAU,CAAC,CAACF,IAAI,CAAC,GACpDC,KAAK,CAACD,IAAI,CAAC;EACjB;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,SAASC,KAAKA,CAACD,IAAI,EAAE;IACnB,OAAOA,IAAI,KAAKV,KAAK,CAACa,GAAG,IAAIf,kBAAkB,CAACY,IAAI,CAAC,GAAGH,EAAE,CAACG,IAAI,CAAC,GAAGF,GAAG,CAACE,IAAI,CAAC;EAC9E;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}