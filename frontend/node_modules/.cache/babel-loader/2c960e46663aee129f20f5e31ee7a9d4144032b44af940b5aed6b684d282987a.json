{"ast":null,"code":"var _jsxFileName = \"E:\\\\Documents\\\\2024-1 YBIGTA\\\\Ybigta_BLOG\\\\Ybigta-Blog\\\\frontend\\\\src\\\\components\\\\page\\\\BlogListPage.jsx\",\n  _s = $RefreshSig$();\nimport React from \"react\";\nimport { useEffect, useState } from \"react\";\nimport { useNavigate, useSearchParams } from \"react-router-dom\";\nimport styled, { createGlobalStyle } from \"styled-components\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Wrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  padding: 40px;\n`;\n_c = Wrapper;\nconst TagContainer = styled.div`\n  display: flex;\n  flex-direction: row;\n  flex-wrap: wrap;\n  align-items: center;\n  justify-content: center;\n  //width: 600px;\n  gap: 7px;\n`;\n_c2 = TagContainer;\nconst CategoryContainer = styled.div`\n  display: flex;\n  flex-direction: row;\n  flex-wrap: wrap;\n  align-items: center;\n  justify-content: center;\n  //width: 600px;\n  gap: 7px;\n`;\n_c3 = CategoryContainer;\nconst Tags = styled.span`\n  padding-top: 3px;\n  padding-bottom: 3px;\n  padding-right: 8px;\n  padding-left: 8px;\n  background-color: #ebebeb;\n  text-align: center;\n  font-size: 13px;\n  justify-content: center;\n  color: #666666;\n  border-radius: 5px;\n`;\n_c4 = Tags;\nconst BlogListPage = () => {\n  _s();\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [posts, setPosts] = useState([]);\n  const [selectedTags, setSelectedTags] = useState([]);\n  const [selectedCategory, setSelectedCategory] = useState(\"\");\n  const [searchParams, setSearchParams] = useSearchParams();\n\n  // 페이지 이동\n  const navigate = useNavigate();\n\n  // 필터링 초기화\n  const resetFilters = () => {\n    setSelectedTags([]);\n    setSelectedCategory(\"\");\n    setSearchParams({});\n  };\n\n  // 날짜 정렬\n  const sortPostsByDate = posts => {\n    return posts.sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt));\n  };\n\n  // 초기 태그와 카테고리 목록 상태 추가\n  const [allTags, setAllTags] = useState([]);\n  const [allCategories, setAllCategories] = useState([]);\n\n  // 초기 데이터 로딩\n  useEffect(() => {\n    // 전체 태그와 카테고리 로딩\n    const fetchAllTagsAndCategories = async () => {\n      try {\n        const tagsResponse = await fetch(\"http://localhost:8000/tags\");\n        const categoriesResponse = await fetch(\"http://localhost:8000/categories\");\n        if (!tagsResponse.ok || !categoriesResponse.ok) {\n          throw new Error(\"Failed to fetch\");\n        }\n        const tagsData = await tagsResponse.json();\n        const categoriesData = await categoriesResponse.json();\n        setAllTags(tagsData);\n        setAllCategories(categoriesData);\n      } catch (error) {\n        setError(error.message);\n      }\n    };\n    fetchAllTagsAndCategories();\n  }, []); // 빈 의존성 배열로 마운트 시에만 실행\n\n  useEffect(() => {\n    // URL 쿼리 파라미터를 사용하여 백엔드 요청 URL 구성\n    const tagsFromURL = searchParams.get(\"tags\");\n    const categoryFromURL = searchParams.get(\"cat\");\n    let queryParams = new URLSearchParams();\n\n    // tagsFromURL이 있으면 각 태그를 queryParams에 추가\n    if (tagsFromURL) {\n      tagsFromURL.split(\"&\").forEach(tag => {\n        queryParams.append(\"tags\", tag);\n      });\n    }\n\n    // categoryFromURL이 있으면 queryParams에 추가\n    if (categoryFromURL) {\n      queryParams.set(\"cat\", categoryFromURL);\n    }\n    const fetchPosts = async () => {\n      try {\n        setLoading(true);\n        setError(null);\n        const response = await fetch(`http://localhost:8000/posts/?${queryParams}`);\n        if (!response.ok) {\n          throw new Error(\"Failed to fetch posts\");\n        }\n        const data = await response.json();\n        const sortedPosts = sortPostsByDate(data); // 받아온 데이터를 날짜 순으로 정렬\n        setPosts(sortedPosts);\n      } catch (error) {\n        setError(error.message);\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchPosts();\n  }, [searchParams]); // searchParams의 변화에 따라 실행\n\n  // 글 제목 클릭 시 해당 글의 상세 페이지로 이동하는 함수\n  const handlePostClick = postId => {\n    navigate(`/posts/${postId}`);\n  };\n\n  // 태그 단일선택 처리 (공통사용)\n  const handleTagClick = (tag, event) => {\n    event.stopPropagation();\n    navigate(`/?tags=${tag}`);\n  };\n\n  // 태그 다중선택 처리\n  const handleTagChange = tag => {\n    const newSelectedTags = selectedTags.includes(tag) ? selectedTags.filter(t => t !== tag) : [...selectedTags, tag];\n    setSelectedTags(newSelectedTags);\n    setSearchParams({\n      tags: newSelectedTags.join(\"&\"),\n      cat: selectedCategory\n    });\n  };\n\n  // 카테고리 선택 처리\n  const handleCategoryChange = category => {\n    const isDeselecting = selectedCategory === category || category === \"ALL\";\n    const newCategory = isDeselecting ? \"\" : category;\n    setSelectedCategory(newCategory);\n    if (newCategory === \"\") {\n      setSearchParams(selectedTags.length > 0 ? {\n        tags: selectedTags.join(\"&\")\n      } : {});\n    } else {\n      setSearchParams({\n        tags: selectedTags.join(\"&\"),\n        cat: newCategory\n      });\n    }\n  };\n\n  // 필터링 로직\n  const filteredPosts = posts.filter(post => {\n    const tagsFromURL = searchParams.get('tags') ? searchParams.get('tags').split(',') : [];\n    const categoryFromURL = searchParams.get('cat');\n    const hasSelectedTags = tagsFromURL.length === 0 || tagsFromURL.every(tag => post.tags.includes(tag));\n    const hasSelectedCategory = !categoryFromURL || post.categories.includes(categoryFromURL);\n    return hasSelectedTags && hasSelectedCategory;\n  });\n\n  // 페이지네이션 로직\n  const indexOfLastPost = currentPage * postsPerPage;\n  const indexOfFirstPost = indexOfLastPost - postsPerPage;\n  const currentPosts = filteredPosts.slice(indexOfFirstPost, indexOfLastPost);\n  const handlePageClick = event => {\n    setCurrentPage(event.selected + 1);\n  };\n\n  // const allTags = posts.reduce((acc, post) => [...acc, ...post.tags], []);\n  // const uniqueTags = [...new Set(allTags)];\n\n  // const uniqueTags = [...new Set(posts.flatMap((post) => post.tags))];\n  // const uniqueCategories = [...new Set(posts.map((post) => post.categories))];\n\n  if (loading) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"Loading...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 201,\n    columnNumber: 23\n  }, this);\n  if (error) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [\"Error: \", error]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 202,\n    columnNumber: 21\n  }, this);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Wrapper, {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        onClick: resetFilters,\n        style: {\n          cursor: \"pointer\"\n        },\n        children: \"\\uBE14\\uB85C\\uADF8 \\uBA54\\uC778/\\uB9AC\\uC2A4\\uD2B8 \\uD398\\uC774\\uC9C0\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(TagContainer, {\n        children: allTags.map((tag, tagIndex) => /*#__PURE__*/_jsxDEV(Tags, {\n          onClick: () => handleTagChange(tag),\n          style: {\n            marginRight: \"10px\",\n            cursor: 'pointer',\n            gap: \"10px\"\n          },\n          children: [\"#\", tag, selectedTags.includes(tag) ? ' (Selected)' : '']\n        }, tagIndex, true, {\n          fileName: _jsxFileName,\n          lineNumber: 213,\n          columnNumber: 11\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 211,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(CategoryContainer, {\n        children: allCategories.map((category, index) => /*#__PURE__*/_jsxDEV(Tags, {\n          onClick: () => handleCategoryChange(category),\n          style: {\n            marginRight: \"10px\",\n            cursor: 'pointer',\n            gap: \"10px\"\n          },\n          children: selectedCategory === category ? `${category} (Selected)` : category\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 222,\n          columnNumber: 11\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 220,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: posts.map((post, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            onClick: () => handlePostClick(post._id),\n            style: {\n              cursor: \"pointer\"\n            },\n            children: post.title\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 234,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              display: \"flex\",\n              alignItems: \"center\",\n              fontSize: \"16px\",\n              fontWeight: \"bold\",\n              color: \"gray\"\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              children: post.author\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 251,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n              src: post.profileImagePath,\n              alt: \"Author's profile\",\n              style: {\n                width: \"30px\",\n                height: \"30px\",\n                borderRadius: \"50%\"\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 252,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              style: {\n                margin: \"0 10px\",\n                fontWeight: \"bold\",\n                color: \"lightgray\"\n              },\n              children: new Date(post.createdAt).toLocaleDateString()\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 256,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 242,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n            children: post.outline\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 267,\n            columnNumber: 13\n          }, this), post.tags.map((tag, tagIndex) => /*#__PURE__*/_jsxDEV(Tags, {\n            onClick: event => handleTagClick(tag, event),\n            style: {\n              marginRight: \"10px\",\n              cursor: \"pointer\",\n              gap: \"10px\"\n            },\n            children: [\"#\", tag]\n          }, tagIndex, true, {\n            fileName: _jsxFileName,\n            lineNumber: 271,\n            columnNumber: 15\n          }, this))]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 232,\n          columnNumber: 11\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 230,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 205,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ReactPaginate, {\n      previousLabel: '이전',\n      nextLabel: '다음',\n      breakLabel: '...',\n      pageCount: Math.ceil(filteredPosts.length / postsPerPage),\n      marginPagesDisplayed: 2,\n      pageRangeDisplayed: 5,\n      onPageChange: handlePageClick,\n      containerClassName: 'pagination',\n      activeClassName: 'active',\n      forcePage: currentPage - 1\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 282,\n      columnNumber: 15\n    }, this)]\n  }, void 0, true);\n};\n_s(BlogListPage, \"fGUmIYg7U9sjyzQnH+fanZz2wOY=\", false, function () {\n  return [useSearchParams, useNavigate];\n});\n_c5 = BlogListPage;\nexport default BlogListPage;\nvar _c, _c2, _c3, _c4, _c5;\n$RefreshReg$(_c, \"Wrapper\");\n$RefreshReg$(_c2, \"TagContainer\");\n$RefreshReg$(_c3, \"CategoryContainer\");\n$RefreshReg$(_c4, \"Tags\");\n$RefreshReg$(_c5, \"BlogListPage\");","map":{"version":3,"names":["React","useEffect","useState","useNavigate","useSearchParams","styled","createGlobalStyle","jsxDEV","_jsxDEV","Fragment","_Fragment","Wrapper","div","_c","TagContainer","_c2","CategoryContainer","_c3","Tags","span","_c4","BlogListPage","_s","loading","setLoading","error","setError","posts","setPosts","selectedTags","setSelectedTags","selectedCategory","setSelectedCategory","searchParams","setSearchParams","navigate","resetFilters","sortPostsByDate","sort","a","b","Date","createdAt","allTags","setAllTags","allCategories","setAllCategories","fetchAllTagsAndCategories","tagsResponse","fetch","categoriesResponse","ok","Error","tagsData","json","categoriesData","message","tagsFromURL","get","categoryFromURL","queryParams","URLSearchParams","split","forEach","tag","append","set","fetchPosts","response","data","sortedPosts","handlePostClick","postId","handleTagClick","event","stopPropagation","handleTagChange","newSelectedTags","includes","filter","t","tags","join","cat","handleCategoryChange","category","isDeselecting","newCategory","length","filteredPosts","post","hasSelectedTags","every","hasSelectedCategory","categories","indexOfLastPost","currentPage","postsPerPage","indexOfFirstPost","currentPosts","slice","handlePageClick","setCurrentPage","selected","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","style","cursor","map","tagIndex","marginRight","gap","index","_id","title","display","alignItems","fontSize","fontWeight","color","author","src","profileImagePath","alt","width","height","borderRadius","margin","toLocaleDateString","outline","ReactPaginate","previousLabel","nextLabel","breakLabel","pageCount","Math","ceil","marginPagesDisplayed","pageRangeDisplayed","onPageChange","containerClassName","activeClassName","forcePage","_c5","$RefreshReg$"],"sources":["E:/Documents/2024-1 YBIGTA/Ybigta_BLOG/Ybigta-Blog/frontend/src/components/page/BlogListPage.jsx"],"sourcesContent":["import React from \"react\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { useNavigate, useSearchParams } from \"react-router-dom\";\r\nimport styled, { createGlobalStyle } from \"styled-components\";\r\n\r\nconst Wrapper = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  padding: 40px;\r\n`;\r\n\r\nconst TagContainer = styled.div`\r\n  display: flex;\r\n  flex-direction: row;\r\n  flex-wrap: wrap;\r\n  align-items: center;\r\n  justify-content: center;\r\n  //width: 600px;\r\n  gap: 7px;\r\n`;\r\n\r\nconst CategoryContainer = styled.div`\r\n  display: flex;\r\n  flex-direction: row;\r\n  flex-wrap: wrap;\r\n  align-items: center;\r\n  justify-content: center;\r\n  //width: 600px;\r\n  gap: 7px;\r\n`;\r\n\r\nconst Tags = styled.span`\r\n  padding-top: 3px;\r\n  padding-bottom: 3px;\r\n  padding-right: 8px;\r\n  padding-left: 8px;\r\n  background-color: #ebebeb;\r\n  text-align: center;\r\n  font-size: 13px;\r\n  justify-content: center;\r\n  color: #666666;\r\n  border-radius: 5px;\r\n`;\r\n\r\nconst BlogListPage = () => {\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n  const [posts, setPosts] = useState([]);\r\n  const [selectedTags, setSelectedTags] = useState([]);\r\n  const [selectedCategory, setSelectedCategory] = useState(\"\");\r\n  const [searchParams, setSearchParams] = useSearchParams();\r\n\r\n  // 페이지 이동\r\n  const navigate = useNavigate();\r\n\r\n  // 필터링 초기화\r\n  const resetFilters = () => {\r\n    setSelectedTags([]);\r\n    setSelectedCategory(\"\");\r\n    setSearchParams({});\r\n  };\r\n\r\n  // 날짜 정렬\r\n  const sortPostsByDate = (posts) => {\r\n    return posts.sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt));\r\n  };\r\n\r\n  // 초기 태그와 카테고리 목록 상태 추가\r\n  const [allTags, setAllTags] = useState([]);\r\n  const [allCategories, setAllCategories] = useState([]);\r\n\r\n\r\n  // 초기 데이터 로딩\r\n  useEffect(() => {\r\n    // 전체 태그와 카테고리 로딩\r\n    const fetchAllTagsAndCategories = async () => {\r\n      try {\r\n        const tagsResponse = await fetch(\"http://localhost:8000/tags\");\r\n        const categoriesResponse = await fetch(\r\n          \"http://localhost:8000/categories\"\r\n        );\r\n        if (!tagsResponse.ok || !categoriesResponse.ok) {\r\n          throw new Error(\"Failed to fetch\");\r\n        }\r\n        const tagsData = await tagsResponse.json();\r\n        const categoriesData = await categoriesResponse.json();\r\n\r\n        setAllTags(tagsData);\r\n        setAllCategories(categoriesData);\r\n      } catch (error) {\r\n        setError(error.message);\r\n      }\r\n    };\r\n\r\n    fetchAllTagsAndCategories();\r\n  }, []); // 빈 의존성 배열로 마운트 시에만 실행\r\n\r\n\r\n  useEffect(() => {\r\n    // URL 쿼리 파라미터를 사용하여 백엔드 요청 URL 구성\r\n    const tagsFromURL = searchParams.get(\"tags\");\r\n    const categoryFromURL = searchParams.get(\"cat\");\r\n\r\n    let queryParams = new URLSearchParams();\r\n\r\n    // tagsFromURL이 있으면 각 태그를 queryParams에 추가\r\n    if (tagsFromURL) {\r\n      tagsFromURL.split(\"&\").forEach((tag) => {\r\n        queryParams.append(\"tags\", tag);\r\n      });\r\n    }\r\n\r\n    // categoryFromURL이 있으면 queryParams에 추가\r\n    if (categoryFromURL) {\r\n      queryParams.set(\"cat\", categoryFromURL);\r\n    }\r\n\r\n    const fetchPosts = async () => {\r\n      try {\r\n        setLoading(true);\r\n        setError(null);\r\n\r\n        const response = await fetch(\r\n          `http://localhost:8000/posts/?${queryParams}`\r\n        );\r\n        if (!response.ok) {\r\n          throw new Error(\"Failed to fetch posts\");\r\n        }\r\n        const data = await response.json();\r\n        const sortedPosts = sortPostsByDate(data); // 받아온 데이터를 날짜 순으로 정렬\r\n        setPosts(sortedPosts);\r\n      } catch (error) {\r\n        setError(error.message);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchPosts();\r\n  }, [searchParams]); // searchParams의 변화에 따라 실행\r\n\r\n  // 글 제목 클릭 시 해당 글의 상세 페이지로 이동하는 함수\r\n  const handlePostClick = (postId) => {\r\n    navigate(`/posts/${postId}`);\r\n  };\r\n\r\n  // 태그 단일선택 처리 (공통사용)\r\n  const handleTagClick = (tag, event) => {\r\n    event.stopPropagation();\r\n    navigate(`/?tags=${tag}`);\r\n  };\r\n\r\n  // 태그 다중선택 처리\r\n  const handleTagChange = (tag) => {\r\n    const newSelectedTags = selectedTags.includes(tag)\r\n      ? selectedTags.filter((t) => t !== tag)\r\n      : [...selectedTags, tag];\r\n    setSelectedTags(newSelectedTags);\r\n    setSearchParams({ tags: newSelectedTags.join(\"&\"), cat: selectedCategory });\r\n  };\r\n\r\n  // 카테고리 선택 처리\r\n  const handleCategoryChange = (category) => {\r\n    const isDeselecting = selectedCategory === category || category === \"ALL\";\r\n    const newCategory = isDeselecting ? \"\" : category;\r\n    setSelectedCategory(newCategory);\r\n\r\n    if (newCategory === \"\") {\r\n      setSearchParams(\r\n        selectedTags.length > 0 ? { tags: selectedTags.join(\"&\") } : {}\r\n      );\r\n    } else {\r\n      setSearchParams({ tags: selectedTags.join(\"&\"), cat: newCategory });\r\n    }\r\n  };\r\n\r\n    // 필터링 로직\r\n    const filteredPosts = posts.filter(post => {\r\n      const tagsFromURL = searchParams.get('tags') ? searchParams.get('tags').split(',') : [];\r\n      const categoryFromURL = searchParams.get('cat');\r\n      const hasSelectedTags = tagsFromURL.length === 0 || tagsFromURL.every(tag => post.tags.includes(tag));\r\n      const hasSelectedCategory = !categoryFromURL || post.categories.includes(categoryFromURL);\r\n      return hasSelectedTags && hasSelectedCategory;\r\n  });\r\n\r\n  // 페이지네이션 로직\r\n  const indexOfLastPost = currentPage * postsPerPage;\r\n  const indexOfFirstPost = indexOfLastPost - postsPerPage;\r\n  const currentPosts = filteredPosts.slice(indexOfFirstPost, indexOfLastPost);\r\n\r\n  const handlePageClick = (event) => {\r\n      setCurrentPage(event.selected + 1);\r\n  };\r\n\r\n  // const allTags = posts.reduce((acc, post) => [...acc, ...post.tags], []);\r\n  // const uniqueTags = [...new Set(allTags)];\r\n\r\n  // const uniqueTags = [...new Set(posts.flatMap((post) => post.tags))];\r\n  // const uniqueCategories = [...new Set(posts.map((post) => post.categories))];\r\n\r\n  if (loading) return <div>Loading...</div>;\r\n  if (error) return <div>Error: {error}</div>;\r\n\r\n  return (\r\n    <><Wrapper>\r\n      <h1 onClick={resetFilters} style={{ cursor: \"pointer\" }}>\r\n        블로그 메인/리스트 페이지\r\n      </h1>\r\n\r\n      {/* 전체 태그 렌더링 */}\r\n      <TagContainer>\r\n        {allTags.map((tag, tagIndex) => (\r\n          <Tags key={tagIndex} onClick={() => handleTagChange(tag)} style={{ marginRight: \"10px\", cursor: 'pointer', gap: \"10px\" }}>\r\n            #{tag}{selectedTags.includes(tag) ? ' (Selected)' : ''}\r\n          </Tags>\r\n        ))}\r\n      </TagContainer>\r\n\r\n      {/* 전체 카테고리 렌더링 */}\r\n      <CategoryContainer>\r\n        {allCategories.map((category, index) => (\r\n          <Tags key={index} onClick={() => handleCategoryChange(category)} style={{ marginRight: \"10px\", cursor: 'pointer', gap: \"10px\" }}>\r\n            {selectedCategory === category ? `${category} (Selected)` : category}\r\n          </Tags>\r\n        ))}\r\n      </CategoryContainer>\r\n\r\n\r\n      {/* 포스트 목록 렌더링 및 각종 click 이동 이벤트 */}\r\n      <div>\r\n        {posts.map((post, index) => (\r\n          <div key={index}>\r\n            {/* 제목 클릭 시 포스트로 이동 */}\r\n            <h2\r\n              onClick={() => handlePostClick(post._id)}\r\n              style={{ cursor: \"pointer\" }}\r\n            >\r\n              {post.title}\r\n            </h2>\r\n\r\n            {/* 작성자, 프사, 날짜, 아웃라인 */}\r\n            <div\r\n              style={{\r\n                display: \"flex\",\r\n                alignItems: \"center\",\r\n                fontSize: \"16px\",\r\n                fontWeight: \"bold\",\r\n                color: \"gray\",\r\n              }}\r\n            >\r\n              <span>{post.author}</span>\r\n              <img\r\n                src={post.profileImagePath}\r\n                alt=\"Author's profile\"\r\n                style={{ width: \"30px\", height: \"30px\", borderRadius: \"50%\" }} />\r\n              <span\r\n                style={{\r\n                  margin: \"0 10px\",\r\n                  fontWeight: \"bold\",\r\n                  color: \"lightgray\",\r\n                }}\r\n              >\r\n                {new Date(post.createdAt).toLocaleDateString()}\r\n              </span>\r\n            </div>\r\n\r\n            <h4>{post.outline}</h4>\r\n\r\n            {/* 태그 및 단일 필터링 */}\r\n            {post.tags.map((tag, tagIndex) => (\r\n              <Tags\r\n                key={tagIndex}\r\n                onClick={(event) => handleTagClick(tag, event)}\r\n                style={{ marginRight: \"10px\", cursor: \"pointer\", gap: \"10px\" }}\r\n              >\r\n                #{tag}\r\n              </Tags>\r\n            ))}\r\n          </div>\r\n        ))}\r\n      </div>\r\n    </Wrapper><ReactPaginate\r\n        previousLabel={'이전'}\r\n        nextLabel={'다음'}\r\n        breakLabel={'...'}\r\n        pageCount={Math.ceil(filteredPosts.length / postsPerPage)}\r\n        marginPagesDisplayed={2}\r\n        pageRangeDisplayed={5}\r\n        onPageChange={handlePageClick}\r\n        containerClassName={'pagination'}\r\n        activeClassName={'active'}\r\n        forcePage={currentPage - 1} /></>\r\n);\r\n};\r\nexport default BlogListPage;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}