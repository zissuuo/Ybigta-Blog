{"ast":null,"code":"const characterReferences = {\n  '\"': 'quot',\n  '&': 'amp',\n  '<': 'lt',\n  '>': 'gt'\n};\n\n/**\r\n * Encode only the dangerous HTML characters.\r\n *\r\n * This ensures that certain characters which have special meaning in HTML are\r\n * dealt with.\r\n * Technically, we can skip `>` and `\"` in many cases, but CM includes them.\r\n *\r\n * @param {string} value\r\n *   Value to encode.\r\n * @returns {string}\r\n *   Encoded value.\r\n */\nexport function encode(value) {\n  return value.replace(/[\"&<>]/g, replace);\n\n  /**\r\n   * @param {string} value\r\n   * @returns {string}\r\n   */\n  function replace(value) {\n    // @ts-expect-error Hush, it’s fine.\n    return '&' + characterReferences[value] + ';';\n  }\n}","map":{"version":3,"names":["characterReferences","encode","value","replace"],"sources":["E:/Documents/2024-1 YBIGTA/React/blog_git/Ybigta-Blog/frontend/node_modules/micromark-util-encode/index.js"],"sourcesContent":["const characterReferences = {'\"': 'quot', '&': 'amp', '<': 'lt', '>': 'gt'}\r\n\r\n/**\r\n * Encode only the dangerous HTML characters.\r\n *\r\n * This ensures that certain characters which have special meaning in HTML are\r\n * dealt with.\r\n * Technically, we can skip `>` and `\"` in many cases, but CM includes them.\r\n *\r\n * @param {string} value\r\n *   Value to encode.\r\n * @returns {string}\r\n *   Encoded value.\r\n */\r\nexport function encode(value) {\r\n  return value.replace(/[\"&<>]/g, replace)\r\n\r\n  /**\r\n   * @param {string} value\r\n   * @returns {string}\r\n   */\r\n  function replace(value) {\r\n    // @ts-expect-error Hush, it’s fine.\r\n    return '&' + characterReferences[value] + ';'\r\n  }\r\n}\r\n"],"mappings":"AAAA,MAAMA,mBAAmB,GAAG;EAAC,GAAG,EAAE,MAAM;EAAE,GAAG,EAAE,KAAK;EAAE,GAAG,EAAE,IAAI;EAAE,GAAG,EAAE;AAAI,CAAC;;AAE3E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,MAAMA,CAACC,KAAK,EAAE;EAC5B,OAAOA,KAAK,CAACC,OAAO,CAAC,SAAS,EAAEA,OAAO,CAAC;;EAExC;AACF;AACA;AACA;EACE,SAASA,OAAOA,CAACD,KAAK,EAAE;IACtB;IACA,OAAO,GAAG,GAAGF,mBAAmB,CAACE,KAAK,CAAC,GAAG,GAAG;EAC/C;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}