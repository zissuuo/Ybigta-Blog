{"ast":null,"code":"/**\r\n * @callback Handler\r\n *   Handle a value, with a certain ID field set to a certain value.\r\n *   The ID field is passed to `zwitch`, and it’s value is this function’s\r\n *   place on the `handlers` record.\r\n * @param {...any} parameters\r\n *   Arbitrary parameters passed to the zwitch.\r\n *   The first will be an object with a certain ID field set to a certain value.\r\n * @returns {any}\r\n *   Anything!\r\n */\n\n/**\r\n * @callback UnknownHandler\r\n *   Handle values that do have a certain ID field, but it’s set to a value\r\n *   that is not listed in the `handlers` record.\r\n * @param {unknown} value\r\n *   An object with a certain ID field set to an unknown value.\r\n * @param {...any} rest\r\n *   Arbitrary parameters passed to the zwitch.\r\n * @returns {any}\r\n *   Anything!\r\n */\n\n/**\r\n * @callback InvalidHandler\r\n *   Handle values that do not have a certain ID field.\r\n * @param {unknown} value\r\n *   Any unknown value.\r\n * @param {...any} rest\r\n *   Arbitrary parameters passed to the zwitch.\r\n * @returns {void|null|undefined|never}\r\n *   This should crash or return nothing.\r\n */\n\n/**\r\n * @template {InvalidHandler} [Invalid=InvalidHandler]\r\n * @template {UnknownHandler} [Unknown=UnknownHandler]\r\n * @template {Record<string, Handler>} [Handlers=Record<string, Handler>]\r\n * @typedef Options\r\n *   Configuration (required).\r\n * @property {Invalid} [invalid]\r\n *   Handler to use for invalid values.\r\n * @property {Unknown} [unknown]\r\n *   Handler to use for unknown values.\r\n * @property {Handlers} [handlers]\r\n *   Handlers to use.\r\n */\n\nconst own = {}.hasOwnProperty;\n\n/**\r\n * Handle values based on a field.\r\n *\r\n * @template {InvalidHandler} [Invalid=InvalidHandler]\r\n * @template {UnknownHandler} [Unknown=UnknownHandler]\r\n * @template {Record<string, Handler>} [Handlers=Record<string, Handler>]\r\n * @param {string} key\r\n *   Field to switch on.\r\n * @param {Options<Invalid, Unknown, Handlers>} [options]\r\n *   Configuration (required).\r\n * @returns {{unknown: Unknown, invalid: Invalid, handlers: Handlers, (...parameters: Parameters<Handlers[keyof Handlers]>): ReturnType<Handlers[keyof Handlers]>, (...parameters: Parameters<Unknown>): ReturnType<Unknown>}}\r\n */\nexport function zwitch(key, options) {\n  const settings = options || {};\n\n  /**\r\n   * Handle one value.\r\n   *\r\n   * Based on the bound `key`, a respective handler will be called.\r\n   * If `value` is not an object, or doesn’t have a `key` property, the special\r\n   * “invalid” handler will be called.\r\n   * If `value` has an unknown `key`, the special “unknown” handler will be\r\n   * called.\r\n   *\r\n   * All arguments, and the context object, are passed through to the handler,\r\n   * and it’s result is returned.\r\n   *\r\n   * @this {unknown}\r\n   *   Any context object.\r\n   * @param {unknown} [value]\r\n   *   Any value.\r\n   * @param {...unknown} parameters\r\n   *   Arbitrary parameters passed to the zwitch.\r\n   * @property {Handler} invalid\r\n   *   Handle for values that do not have a certain ID field.\r\n   * @property {Handler} unknown\r\n   *   Handle values that do have a certain ID field, but it’s set to a value\r\n   *   that is not listed in the `handlers` record.\r\n   * @property {Handlers} handlers\r\n   *   Record of handlers.\r\n   * @returns {unknown}\r\n   *   Anything.\r\n   */\n  function one(value, ...parameters) {\n    /** @type {Handler|undefined} */\n    let fn = one.invalid;\n    const handlers = one.handlers;\n    if (value && own.call(value, key)) {\n      // @ts-expect-error Indexable.\n      const id = String(value[key]);\n      // @ts-expect-error Indexable.\n      fn = own.call(handlers, id) ? handlers[id] : one.unknown;\n    }\n    if (fn) {\n      return fn.call(this, value, ...parameters);\n    }\n  }\n  one.handlers = settings.handlers || {};\n  one.invalid = settings.invalid;\n  one.unknown = settings.unknown;\n\n  // @ts-expect-error: matches!\n  return one;\n}","map":{"version":3,"names":["own","hasOwnProperty","zwitch","key","options","settings","one","value","parameters","fn","invalid","handlers","call","id","String","unknown"],"sources":["E:/Documents/2024-1 YBIGTA/Ybigta_BLOG/Ybigta-Blog/frontend/node_modules/zwitch/index.js"],"sourcesContent":["/**\r\n * @callback Handler\r\n *   Handle a value, with a certain ID field set to a certain value.\r\n *   The ID field is passed to `zwitch`, and it’s value is this function’s\r\n *   place on the `handlers` record.\r\n * @param {...any} parameters\r\n *   Arbitrary parameters passed to the zwitch.\r\n *   The first will be an object with a certain ID field set to a certain value.\r\n * @returns {any}\r\n *   Anything!\r\n */\r\n\r\n/**\r\n * @callback UnknownHandler\r\n *   Handle values that do have a certain ID field, but it’s set to a value\r\n *   that is not listed in the `handlers` record.\r\n * @param {unknown} value\r\n *   An object with a certain ID field set to an unknown value.\r\n * @param {...any} rest\r\n *   Arbitrary parameters passed to the zwitch.\r\n * @returns {any}\r\n *   Anything!\r\n */\r\n\r\n/**\r\n * @callback InvalidHandler\r\n *   Handle values that do not have a certain ID field.\r\n * @param {unknown} value\r\n *   Any unknown value.\r\n * @param {...any} rest\r\n *   Arbitrary parameters passed to the zwitch.\r\n * @returns {void|null|undefined|never}\r\n *   This should crash or return nothing.\r\n */\r\n\r\n/**\r\n * @template {InvalidHandler} [Invalid=InvalidHandler]\r\n * @template {UnknownHandler} [Unknown=UnknownHandler]\r\n * @template {Record<string, Handler>} [Handlers=Record<string, Handler>]\r\n * @typedef Options\r\n *   Configuration (required).\r\n * @property {Invalid} [invalid]\r\n *   Handler to use for invalid values.\r\n * @property {Unknown} [unknown]\r\n *   Handler to use for unknown values.\r\n * @property {Handlers} [handlers]\r\n *   Handlers to use.\r\n */\r\n\r\nconst own = {}.hasOwnProperty\r\n\r\n/**\r\n * Handle values based on a field.\r\n *\r\n * @template {InvalidHandler} [Invalid=InvalidHandler]\r\n * @template {UnknownHandler} [Unknown=UnknownHandler]\r\n * @template {Record<string, Handler>} [Handlers=Record<string, Handler>]\r\n * @param {string} key\r\n *   Field to switch on.\r\n * @param {Options<Invalid, Unknown, Handlers>} [options]\r\n *   Configuration (required).\r\n * @returns {{unknown: Unknown, invalid: Invalid, handlers: Handlers, (...parameters: Parameters<Handlers[keyof Handlers]>): ReturnType<Handlers[keyof Handlers]>, (...parameters: Parameters<Unknown>): ReturnType<Unknown>}}\r\n */\r\nexport function zwitch(key, options) {\r\n  const settings = options || {}\r\n\r\n  /**\r\n   * Handle one value.\r\n   *\r\n   * Based on the bound `key`, a respective handler will be called.\r\n   * If `value` is not an object, or doesn’t have a `key` property, the special\r\n   * “invalid” handler will be called.\r\n   * If `value` has an unknown `key`, the special “unknown” handler will be\r\n   * called.\r\n   *\r\n   * All arguments, and the context object, are passed through to the handler,\r\n   * and it’s result is returned.\r\n   *\r\n   * @this {unknown}\r\n   *   Any context object.\r\n   * @param {unknown} [value]\r\n   *   Any value.\r\n   * @param {...unknown} parameters\r\n   *   Arbitrary parameters passed to the zwitch.\r\n   * @property {Handler} invalid\r\n   *   Handle for values that do not have a certain ID field.\r\n   * @property {Handler} unknown\r\n   *   Handle values that do have a certain ID field, but it’s set to a value\r\n   *   that is not listed in the `handlers` record.\r\n   * @property {Handlers} handlers\r\n   *   Record of handlers.\r\n   * @returns {unknown}\r\n   *   Anything.\r\n   */\r\n  function one(value, ...parameters) {\r\n    /** @type {Handler|undefined} */\r\n    let fn = one.invalid\r\n    const handlers = one.handlers\r\n\r\n    if (value && own.call(value, key)) {\r\n      // @ts-expect-error Indexable.\r\n      const id = String(value[key])\r\n      // @ts-expect-error Indexable.\r\n      fn = own.call(handlers, id) ? handlers[id] : one.unknown\r\n    }\r\n\r\n    if (fn) {\r\n      return fn.call(this, value, ...parameters)\r\n    }\r\n  }\r\n\r\n  one.handlers = settings.handlers || {}\r\n  one.invalid = settings.invalid\r\n  one.unknown = settings.unknown\r\n\r\n  // @ts-expect-error: matches!\r\n  return one\r\n}\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMA,GAAG,GAAG,CAAC,CAAC,CAACC,cAAc;;AAE7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,MAAMA,CAACC,GAAG,EAAEC,OAAO,EAAE;EACnC,MAAMC,QAAQ,GAAGD,OAAO,IAAI,CAAC,CAAC;;EAE9B;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,SAASE,GAAGA,CAACC,KAAK,EAAE,GAAGC,UAAU,EAAE;IACjC;IACA,IAAIC,EAAE,GAAGH,GAAG,CAACI,OAAO;IACpB,MAAMC,QAAQ,GAAGL,GAAG,CAACK,QAAQ;IAE7B,IAAIJ,KAAK,IAAIP,GAAG,CAACY,IAAI,CAACL,KAAK,EAAEJ,GAAG,CAAC,EAAE;MACjC;MACA,MAAMU,EAAE,GAAGC,MAAM,CAACP,KAAK,CAACJ,GAAG,CAAC,CAAC;MAC7B;MACAM,EAAE,GAAGT,GAAG,CAACY,IAAI,CAACD,QAAQ,EAAEE,EAAE,CAAC,GAAGF,QAAQ,CAACE,EAAE,CAAC,GAAGP,GAAG,CAACS,OAAO;IAC1D;IAEA,IAAIN,EAAE,EAAE;MACN,OAAOA,EAAE,CAACG,IAAI,CAAC,IAAI,EAAEL,KAAK,EAAE,GAAGC,UAAU,CAAC;IAC5C;EACF;EAEAF,GAAG,CAACK,QAAQ,GAAGN,QAAQ,CAACM,QAAQ,IAAI,CAAC,CAAC;EACtCL,GAAG,CAACI,OAAO,GAAGL,QAAQ,CAACK,OAAO;EAC9BJ,GAAG,CAACS,OAAO,GAAGV,QAAQ,CAACU,OAAO;;EAE9B;EACA,OAAOT,GAAG;AACZ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}